//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace TMS.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class NHCC_NHCC_TMSEntities : DbContext
    {
        public NHCC_NHCC_TMSEntities()
            : base("name=NHCC_NHCC_TMSEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<C__MigrationHistory> C__MigrationHistory { get; set; }
        public virtual DbSet<A_ChiefCommunicationsOfficer> A_ChiefCommunicationsOfficer { get; set; }
        public virtual DbSet<A_Dept> A_Dept { get; set; }
        public virtual DbSet<A_Employee> A_Employee { get; set; }
        public virtual DbSet<A_ID_Type> A_ID_Type { get; set; }
        public virtual DbSet<A_LoginLog> A_LoginLog { get; set; }
        public virtual DbSet<A_MarketingManager> A_MarketingManager { get; set; }
        public virtual DbSet<A_NumberOfRooms> A_NumberOfRooms { get; set; }
        public virtual DbSet<A_PaymemtTerms> A_PaymemtTerms { get; set; }
        public virtual DbSet<A_Position> A_Position { get; set; }
        public virtual DbSet<aspnet_Applications> aspnet_Applications { get; set; }
        public virtual DbSet<aspnet_Membership> aspnet_Membership { get; set; }
        public virtual DbSet<aspnet_Roles> aspnet_Roles { get; set; }
        public virtual DbSet<aspnet_SchemaVersions> aspnet_SchemaVersions { get; set; }
        public virtual DbSet<aspnet_Sessions> aspnet_Sessions { get; set; }
        public virtual DbSet<aspnet_Users> aspnet_Users { get; set; }
        public virtual DbSet<AspNetRole> AspNetRoles { get; set; }
        public virtual DbSet<AspNetUserClaim> AspNetUserClaims { get; set; }
        public virtual DbSet<AspNetUserLogin> AspNetUserLogins { get; set; }
        public virtual DbSet<AspNetUser> AspNetUsers { get; set; }
        public virtual DbSet<Audit_Action> Audit_Action { get; set; }
        public virtual DbSet<Country> Countries { get; set; }
        public virtual DbSet<County> Counties { get; set; }
        public virtual DbSet<DestinationType> DestinationTypes { get; set; }
        public virtual DbSet<District> Districts { get; set; }
        public virtual DbSet<ExpiryNotification> ExpiryNotifications { get; set; }
        public virtual DbSet<Lease_Type> Lease_Type { get; set; }
        public virtual DbSet<Location> Locations { get; set; }
        public virtual DbSet<ModuleInfo> ModuleInfoes { get; set; }
        public virtual DbSet<NHCCUserRole> NHCCUserRoles { get; set; }
        public virtual DbSet<NotificationReminderInterval> NotificationReminderIntervals { get; set; }
        public virtual DbSet<NotificationServer> NotificationServers { get; set; }
        public virtual DbSet<NotificationStatu> NotificationStatus { get; set; }
        public virtual DbSet<Offer> Offers { get; set; }
        public virtual DbSet<OfferStatu> OfferStatus { get; set; }
        public virtual DbSet<Outward> Outwards { get; set; }
        public virtual DbSet<Parish> Parishes { get; set; }
        public virtual DbSet<PayMethod> PayMethods { get; set; }
        public virtual DbSet<Project> Projects { get; set; }
        public virtual DbSet<PropertyApplicant> PropertyApplicants { get; set; }
        public virtual DbSet<PropertyApplicationDetail> PropertyApplicationDetails { get; set; }
        public virtual DbSet<PropertyApplication> PropertyApplications { get; set; }
        public virtual DbSet<PropertyStatu> PropertyStatus { get; set; }
        public virtual DbSet<PropertyTitle_LeaseYears> PropertyTitle_LeaseYears { get; set; }
        public virtual DbSet<PropertyTitle_Payment_Status> PropertyTitle_Payment_Status { get; set; }
        public virtual DbSet<PropertyTitle_PlotSize> PropertyTitle_PlotSize { get; set; }
        public virtual DbSet<PropertyType> PropertyTypes { get; set; }
        public virtual DbSet<Region> Regions { get; set; }
        public virtual DbSet<SealApplicationRegister> SealApplicationRegisters { get; set; }
        public virtual DbSet<SiteContent> SiteContents { get; set; }
        public virtual DbSet<Subcounty> Subcounties { get; set; }
        public virtual DbSet<tblErrorLog> tblErrorLogs { get; set; }
        public virtual DbSet<TitleChange> TitleChanges { get; set; }
        public virtual DbSet<TitleMovement_Purpose> TitleMovement_Purpose { get; set; }
        public virtual DbSet<TitleMovements_Lawyers> TitleMovements_Lawyers { get; set; }
        public virtual DbSet<User_Menu_Option> User_Menu_Option { get; set; }
        public virtual DbSet<User_NHCC> User_NHCC { get; set; }
        public virtual DbSet<Users_AccountStatus> Users_AccountStatus { get; set; }
        public virtual DbSet<Offers_Backup> Offers_Backup { get; set; }
        public virtual DbSet<PropertyTitleMovt_Missing> PropertyTitleMovt_Missing { get; set; }
        public virtual DbSet<YesNo> YesNoes { get; set; }
        public virtual DbSet<Report_AllPropertyTitles> Report_AllPropertyTitles { get; set; }
        public virtual DbSet<Report_AllPropertyTypes> Report_AllPropertyTypes { get; set; }
        public virtual DbSet<Report_AuditLog_PropertyPayment> Report_AuditLog_PropertyPayment { get; set; }
        public virtual DbSet<Report_AuditLog_PropertyTitle> Report_AuditLog_PropertyTitle { get; set; }
        public virtual DbSet<Report_AuditLog_PropertyTitleMovt> Report_AuditLog_PropertyTitleMovt { get; set; }
        public virtual DbSet<Report_FreeholdProperties> Report_FreeholdProperties { get; set; }
        public virtual DbSet<Report_LeaseHoldPropertyTitles> Report_LeaseHoldPropertyTitles { get; set; }
        public virtual DbSet<Report_LeaseNotifications> Report_LeaseNotifications { get; set; }
        public virtual DbSet<Report_MailoLandPropertyTitles> Report_MailoLandPropertyTitles { get; set; }
        public virtual DbSet<Report_ManagementReport> Report_ManagementReport { get; set; }
        public virtual DbSet<Report_nhccProperties> Report_nhccProperties { get; set; }
        public virtual DbSet<Report_NoTitles> Report_NoTitles { get; set; }
        public virtual DbSet<Report_OffersManagement> Report_OffersManagement { get; set; }
        public virtual DbSet<Report_PropertyPament> Report_PropertyPament { get; set; }
        public virtual DbSet<Report_SoldProperties> Report_SoldProperties { get; set; }
        public virtual DbSet<Report_StandAlone_Properties> Report_StandAlone_Properties { get; set; }
        public virtual DbSet<Report_TitleMovements> Report_TitleMovements { get; set; }
        public virtual DbSet<Report_UnlistedProperties> Report_UnlistedProperties { get; set; }
        public virtual DbSet<View_A_SubcountyList> View_A_SubcountyList { get; set; }
        public virtual DbSet<View_AspNetRoles> View_AspNetRoles { get; set; }
        public virtual DbSet<View_UserManagement> View_UserManagement { get; set; }
        public virtual DbSet<View_Users> View_Users { get; set; }
        public virtual DbSet<View_UsersRoles> View_UsersRoles { get; set; }
        public virtual DbSet<ViewA_LoginLogFullNames> ViewA_LoginLogFullNames { get; set; }
        public virtual DbSet<ViewAudPropPaymentAspNetUsersFullName> ViewAudPropPaymentAspNetUsersFullNames { get; set; }
        public virtual DbSet<ViewAudPropTitleAspNetUsersFullName> ViewAudPropTitleAspNetUsersFullNames { get; set; }
        public virtual DbSet<ViewAudPropTitleMvtAspNetUsersFullName> ViewAudPropTitleMvtAspNetUsersFullNames { get; set; }
        public virtual DbSet<ViewCountyDistrict> ViewCountyDistricts { get; set; }
        public virtual DbSet<ViewNewDistrictCountySubCounty> ViewNewDistrictCountySubCounties { get; set; }
        public virtual DbSet<ViewNewRegionDistrict> ViewNewRegionDistricts { get; set; }
        public virtual DbSet<ViewPropertyPaymentssTable> ViewPropertyPaymentssTables { get; set; }
        public virtual DbSet<ViewPropertyTitleMovtTable> ViewPropertyTitleMovtTables { get; set; }
        public virtual DbSet<A_DocumentUpload> A_DocumentUpload { get; set; }
        public virtual DbSet<View_A_DocumentUpload> View_A_DocumentUpload { get; set; }
        public virtual DbSet<AuditLog_PropertyTitle> AuditLog_PropertyTitle { get; set; }
        public virtual DbSet<AuditLog_PropertyPayment> AuditLog_PropertyPayment { get; set; }
        public virtual DbSet<Property_Payment> Property_Payment { get; set; }
        public virtual DbSet<ViewPropertyTitlesTable> ViewPropertyTitlesTables { get; set; }
        public virtual DbSet<AuditLog_PropertyTitleMovt> AuditLog_PropertyTitleMovt { get; set; }
        public virtual DbSet<PropertyTitleMovt> PropertyTitleMovts { get; set; }
        public virtual DbSet<View_LeasePeriodNotification> View_LeasePeriodNotification { get; set; }
        public virtual DbSet<PropertyTitle> PropertyTitles { get; set; }
    
        [DbFunction("NHCC_NHCC_TMSEntities", "SplitStringToValues")]
        public virtual IQueryable<SplitStringToValues_Result> SplitStringToValues(string valuein, string delimiter)
        {
            var valueinParameter = valuein != null ?
                new ObjectParameter("valuein", valuein) :
                new ObjectParameter("valuein", typeof(string));
    
            var delimiterParameter = delimiter != null ?
                new ObjectParameter("delimiter", delimiter) :
                new ObjectParameter("delimiter", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<SplitStringToValues_Result>("[NHCC_NHCC_TMSEntities].[SplitStringToValues](@valuein, @delimiter)", valueinParameter, delimiterParameter);
        }
    
        [DbFunction("NHCC_NHCC_TMSEntities", "SplitStringToValues1")]
        public virtual IQueryable<SplitStringToValues1_Result> SplitStringToValues1(string valuein, string delimiter)
        {
            var valueinParameter = valuein != null ?
                new ObjectParameter("valuein", valuein) :
                new ObjectParameter("valuein", typeof(string));
    
            var delimiterParameter = delimiter != null ?
                new ObjectParameter("delimiter", delimiter) :
                new ObjectParameter("delimiter", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<SplitStringToValues1_Result>("[NHCC_NHCC_TMSEntities].[SplitStringToValues1](@valuein, @delimiter)", valueinParameter, delimiterParameter);
        }
    
        public virtual int sp(Nullable<byte> destination)
        {
            var destinationParameter = destination.HasValue ?
                new ObjectParameter("Destination", destination) :
                new ObjectParameter("Destination", typeof(byte));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp", destinationParameter);
        }
    
        public virtual int spA_MarketingManagerUpdate(Nullable<int> marketingManagerCode, string marketingManagerName)
        {
            var marketingManagerCodeParameter = marketingManagerCode.HasValue ?
                new ObjectParameter("MarketingManagerCode", marketingManagerCode) :
                new ObjectParameter("MarketingManagerCode", typeof(int));
    
            var marketingManagerNameParameter = marketingManagerName != null ?
                new ObjectParameter("MarketingManagerName", marketingManagerName) :
                new ObjectParameter("MarketingManagerName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spA_MarketingManagerUpdate", marketingManagerCodeParameter, marketingManagerNameParameter);
        }
    
        public virtual int spAllTitlesMgt()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spAllTitlesMgt");
        }
    
        public virtual int spCondominiumTitle(Nullable<byte> typeCode)
        {
            var typeCodeParameter = typeCode.HasValue ?
                new ObjectParameter("TypeCode", typeCode) :
                new ObjectParameter("TypeCode", typeof(byte));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spCondominiumTitle", typeCodeParameter);
        }
    
        public virtual int spCountryDelete(string countryCode)
        {
            var countryCodeParameter = countryCode != null ?
                new ObjectParameter("CountryCode", countryCode) :
                new ObjectParameter("CountryCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spCountryDelete", countryCodeParameter);
        }
    
        public virtual ObjectResult<spCountryGetAll_Result> spCountryGetAll(string countryCode, string countryName, string nationalityDesc)
        {
            var countryCodeParameter = countryCode != null ?
                new ObjectParameter("CountryCode", countryCode) :
                new ObjectParameter("CountryCode", typeof(string));
    
            var countryNameParameter = countryName != null ?
                new ObjectParameter("CountryName", countryName) :
                new ObjectParameter("CountryName", typeof(string));
    
            var nationalityDescParameter = nationalityDesc != null ?
                new ObjectParameter("NationalityDesc", nationalityDesc) :
                new ObjectParameter("NationalityDesc", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spCountryGetAll_Result>("spCountryGetAll", countryCodeParameter, countryNameParameter, nationalityDescParameter);
        }
    
        public virtual int spCountryGetByKey(string countryCode, ObjectParameter countryName, ObjectParameter nationalityDesc)
        {
            var countryCodeParameter = countryCode != null ?
                new ObjectParameter("CountryCode", countryCode) :
                new ObjectParameter("CountryCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spCountryGetByKey", countryCodeParameter, countryName, nationalityDesc);
        }
    
        public virtual int spCountryInsert(string countryCode, string countryName, string nationalityDesc)
        {
            var countryCodeParameter = countryCode != null ?
                new ObjectParameter("CountryCode", countryCode) :
                new ObjectParameter("CountryCode", typeof(string));
    
            var countryNameParameter = countryName != null ?
                new ObjectParameter("CountryName", countryName) :
                new ObjectParameter("CountryName", typeof(string));
    
            var nationalityDescParameter = nationalityDesc != null ?
                new ObjectParameter("NationalityDesc", nationalityDesc) :
                new ObjectParameter("NationalityDesc", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spCountryInsert", countryCodeParameter, countryNameParameter, nationalityDescParameter);
        }
    
        public virtual int spCountryUpdate(string countryCode, string countryName, string nationalityDesc)
        {
            var countryCodeParameter = countryCode != null ?
                new ObjectParameter("CountryCode", countryCode) :
                new ObjectParameter("CountryCode", typeof(string));
    
            var countryNameParameter = countryName != null ?
                new ObjectParameter("CountryName", countryName) :
                new ObjectParameter("CountryName", typeof(string));
    
            var nationalityDescParameter = nationalityDesc != null ?
                new ObjectParameter("NationalityDesc", nationalityDesc) :
                new ObjectParameter("NationalityDesc", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spCountryUpdate", countryCodeParameter, countryNameParameter, nationalityDescParameter);
        }
    
        public virtual int spCountyDelete(Nullable<short> county_ID)
        {
            var county_IDParameter = county_ID.HasValue ?
                new ObjectParameter("County_ID", county_ID) :
                new ObjectParameter("County_ID", typeof(short));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spCountyDelete", county_IDParameter);
        }
    
        public virtual ObjectResult<spCountyGetAll_Result> spCountyGetAll(Nullable<short> county_ID, Nullable<byte> district_ID, string county_Name, string dataModify, string dataEntry)
        {
            var county_IDParameter = county_ID.HasValue ?
                new ObjectParameter("County_ID", county_ID) :
                new ObjectParameter("County_ID", typeof(short));
    
            var district_IDParameter = district_ID.HasValue ?
                new ObjectParameter("District_ID", district_ID) :
                new ObjectParameter("District_ID", typeof(byte));
    
            var county_NameParameter = county_Name != null ?
                new ObjectParameter("County_Name", county_Name) :
                new ObjectParameter("County_Name", typeof(string));
    
            var dataModifyParameter = dataModify != null ?
                new ObjectParameter("DataModify", dataModify) :
                new ObjectParameter("DataModify", typeof(string));
    
            var dataEntryParameter = dataEntry != null ?
                new ObjectParameter("DataEntry", dataEntry) :
                new ObjectParameter("DataEntry", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spCountyGetAll_Result>("spCountyGetAll", county_IDParameter, district_IDParameter, county_NameParameter, dataModifyParameter, dataEntryParameter);
        }
    
        public virtual int spCountyGetByKey(Nullable<short> county_ID, ObjectParameter district_ID, ObjectParameter county_Name, ObjectParameter dataModify, ObjectParameter dataEntry)
        {
            var county_IDParameter = county_ID.HasValue ?
                new ObjectParameter("County_ID", county_ID) :
                new ObjectParameter("County_ID", typeof(short));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spCountyGetByKey", county_IDParameter, district_ID, county_Name, dataModify, dataEntry);
        }
    
        public virtual int spCountyInsert(Nullable<short> county_ID, Nullable<byte> district_ID, string county_Name, string dataModify, string dataEntry)
        {
            var county_IDParameter = county_ID.HasValue ?
                new ObjectParameter("County_ID", county_ID) :
                new ObjectParameter("County_ID", typeof(short));
    
            var district_IDParameter = district_ID.HasValue ?
                new ObjectParameter("District_ID", district_ID) :
                new ObjectParameter("District_ID", typeof(byte));
    
            var county_NameParameter = county_Name != null ?
                new ObjectParameter("County_Name", county_Name) :
                new ObjectParameter("County_Name", typeof(string));
    
            var dataModifyParameter = dataModify != null ?
                new ObjectParameter("DataModify", dataModify) :
                new ObjectParameter("DataModify", typeof(string));
    
            var dataEntryParameter = dataEntry != null ?
                new ObjectParameter("DataEntry", dataEntry) :
                new ObjectParameter("DataEntry", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spCountyInsert", county_IDParameter, district_IDParameter, county_NameParameter, dataModifyParameter, dataEntryParameter);
        }
    
        public virtual int spCountyUpdate(Nullable<short> county_ID, Nullable<byte> district_ID, string county_Name, string dataModify, string dataEntry)
        {
            var county_IDParameter = county_ID.HasValue ?
                new ObjectParameter("County_ID", county_ID) :
                new ObjectParameter("County_ID", typeof(short));
    
            var district_IDParameter = district_ID.HasValue ?
                new ObjectParameter("District_ID", district_ID) :
                new ObjectParameter("District_ID", typeof(byte));
    
            var county_NameParameter = county_Name != null ?
                new ObjectParameter("County_Name", county_Name) :
                new ObjectParameter("County_Name", typeof(string));
    
            var dataModifyParameter = dataModify != null ?
                new ObjectParameter("DataModify", dataModify) :
                new ObjectParameter("DataModify", typeof(string));
    
            var dataEntryParameter = dataEntry != null ?
                new ObjectParameter("DataEntry", dataEntry) :
                new ObjectParameter("DataEntry", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spCountyUpdate", county_IDParameter, district_IDParameter, county_NameParameter, dataModifyParameter, dataEntryParameter);
        }
    
        public virtual int spDefaulters(Nullable<System.DateTime> startdate, Nullable<System.DateTime> enddate, Nullable<int> location)
        {
            var startdateParameter = startdate.HasValue ?
                new ObjectParameter("startdate", startdate) :
                new ObjectParameter("startdate", typeof(System.DateTime));
    
            var enddateParameter = enddate.HasValue ?
                new ObjectParameter("enddate", enddate) :
                new ObjectParameter("enddate", typeof(System.DateTime));
    
            var locationParameter = location.HasValue ?
                new ObjectParameter("location", location) :
                new ObjectParameter("location", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spDefaulters", startdateParameter, enddateParameter, locationParameter);
        }
    
        public virtual int spDestinationTypeDelete(Nullable<byte> destinyCode)
        {
            var destinyCodeParameter = destinyCode.HasValue ?
                new ObjectParameter("DestinyCode", destinyCode) :
                new ObjectParameter("DestinyCode", typeof(byte));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spDestinationTypeDelete", destinyCodeParameter);
        }
    
        public virtual ObjectResult<spDestinationTypeGetAll_Result> spDestinationTypeGetAll(Nullable<byte> destinyCode, string destinyDesc)
        {
            var destinyCodeParameter = destinyCode.HasValue ?
                new ObjectParameter("DestinyCode", destinyCode) :
                new ObjectParameter("DestinyCode", typeof(byte));
    
            var destinyDescParameter = destinyDesc != null ?
                new ObjectParameter("DestinyDesc", destinyDesc) :
                new ObjectParameter("DestinyDesc", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spDestinationTypeGetAll_Result>("spDestinationTypeGetAll", destinyCodeParameter, destinyDescParameter);
        }
    
        public virtual int spDestinationTypeGetByKey(Nullable<byte> destinyCode, ObjectParameter destinyDesc)
        {
            var destinyCodeParameter = destinyCode.HasValue ?
                new ObjectParameter("DestinyCode", destinyCode) :
                new ObjectParameter("DestinyCode", typeof(byte));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spDestinationTypeGetByKey", destinyCodeParameter, destinyDesc);
        }
    
        public virtual int spDestinationTypeInsert(Nullable<byte> destinyCode, string destinyDesc)
        {
            var destinyCodeParameter = destinyCode.HasValue ?
                new ObjectParameter("DestinyCode", destinyCode) :
                new ObjectParameter("DestinyCode", typeof(byte));
    
            var destinyDescParameter = destinyDesc != null ?
                new ObjectParameter("DestinyDesc", destinyDesc) :
                new ObjectParameter("DestinyDesc", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spDestinationTypeInsert", destinyCodeParameter, destinyDescParameter);
        }
    
        public virtual int spDestinationTypeUpdate(Nullable<byte> destinyCode, string destinyDesc)
        {
            var destinyCodeParameter = destinyCode.HasValue ?
                new ObjectParameter("DestinyCode", destinyCode) :
                new ObjectParameter("DestinyCode", typeof(byte));
    
            var destinyDescParameter = destinyDesc != null ?
                new ObjectParameter("DestinyDesc", destinyDesc) :
                new ObjectParameter("DestinyDesc", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spDestinationTypeUpdate", destinyCodeParameter, destinyDescParameter);
        }
    
        public virtual int spDistrictDelete(Nullable<byte> districtID)
        {
            var districtIDParameter = districtID.HasValue ?
                new ObjectParameter("DistrictID", districtID) :
                new ObjectParameter("DistrictID", typeof(byte));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spDistrictDelete", districtIDParameter);
        }
    
        public virtual ObjectResult<spDistrictGetAll_Result> spDistrictGetAll(Nullable<byte> districtID, string district_Name, Nullable<byte> region_code, string newDataAudit, string editDataAudit)
        {
            var districtIDParameter = districtID.HasValue ?
                new ObjectParameter("DistrictID", districtID) :
                new ObjectParameter("DistrictID", typeof(byte));
    
            var district_NameParameter = district_Name != null ?
                new ObjectParameter("District_Name", district_Name) :
                new ObjectParameter("District_Name", typeof(string));
    
            var region_codeParameter = region_code.HasValue ?
                new ObjectParameter("Region_code", region_code) :
                new ObjectParameter("Region_code", typeof(byte));
    
            var newDataAuditParameter = newDataAudit != null ?
                new ObjectParameter("NewDataAudit", newDataAudit) :
                new ObjectParameter("NewDataAudit", typeof(string));
    
            var editDataAuditParameter = editDataAudit != null ?
                new ObjectParameter("EditDataAudit", editDataAudit) :
                new ObjectParameter("EditDataAudit", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spDistrictGetAll_Result>("spDistrictGetAll", districtIDParameter, district_NameParameter, region_codeParameter, newDataAuditParameter, editDataAuditParameter);
        }
    
        public virtual int spDistrictGetByKey(Nullable<byte> districtID, ObjectParameter district_Name, ObjectParameter region_code, ObjectParameter newDataAudit, ObjectParameter editDataAudit)
        {
            var districtIDParameter = districtID.HasValue ?
                new ObjectParameter("DistrictID", districtID) :
                new ObjectParameter("DistrictID", typeof(byte));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spDistrictGetByKey", districtIDParameter, district_Name, region_code, newDataAudit, editDataAudit);
        }
    
        public virtual int spDistrictInsert(Nullable<byte> districtID, string district_Name, Nullable<byte> region_code, string newDataAudit, string editDataAudit)
        {
            var districtIDParameter = districtID.HasValue ?
                new ObjectParameter("DistrictID", districtID) :
                new ObjectParameter("DistrictID", typeof(byte));
    
            var district_NameParameter = district_Name != null ?
                new ObjectParameter("District_Name", district_Name) :
                new ObjectParameter("District_Name", typeof(string));
    
            var region_codeParameter = region_code.HasValue ?
                new ObjectParameter("Region_code", region_code) :
                new ObjectParameter("Region_code", typeof(byte));
    
            var newDataAuditParameter = newDataAudit != null ?
                new ObjectParameter("NewDataAudit", newDataAudit) :
                new ObjectParameter("NewDataAudit", typeof(string));
    
            var editDataAuditParameter = editDataAudit != null ?
                new ObjectParameter("EditDataAudit", editDataAudit) :
                new ObjectParameter("EditDataAudit", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spDistrictInsert", districtIDParameter, district_NameParameter, region_codeParameter, newDataAuditParameter, editDataAuditParameter);
        }
    
        public virtual int spDistrictUpdate(Nullable<byte> districtID, string district_Name, Nullable<byte> region_code, string newDataAudit, string editDataAudit)
        {
            var districtIDParameter = districtID.HasValue ?
                new ObjectParameter("DistrictID", districtID) :
                new ObjectParameter("DistrictID", typeof(byte));
    
            var district_NameParameter = district_Name != null ?
                new ObjectParameter("District_Name", district_Name) :
                new ObjectParameter("District_Name", typeof(string));
    
            var region_codeParameter = region_code.HasValue ?
                new ObjectParameter("Region_code", region_code) :
                new ObjectParameter("Region_code", typeof(byte));
    
            var newDataAuditParameter = newDataAudit != null ?
                new ObjectParameter("NewDataAudit", newDataAudit) :
                new ObjectParameter("NewDataAudit", typeof(string));
    
            var editDataAuditParameter = editDataAudit != null ?
                new ObjectParameter("EditDataAudit", editDataAudit) :
                new ObjectParameter("EditDataAudit", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spDistrictUpdate", districtIDParameter, district_NameParameter, region_codeParameter, newDataAuditParameter, editDataAuditParameter);
        }
    
        public virtual int spErrorLogInsert(string source, string module, Nullable<int> errorNumber, string description)
        {
            var sourceParameter = source != null ?
                new ObjectParameter("Source", source) :
                new ObjectParameter("Source", typeof(string));
    
            var moduleParameter = module != null ?
                new ObjectParameter("Module", module) :
                new ObjectParameter("Module", typeof(string));
    
            var errorNumberParameter = errorNumber.HasValue ?
                new ObjectParameter("ErrorNumber", errorNumber) :
                new ObjectParameter("ErrorNumber", typeof(int));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spErrorLogInsert", sourceParameter, moduleParameter, errorNumberParameter, descriptionParameter);
        }
    
        public virtual ObjectResult<spLeaseHold_Result> spLeaseHold()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spLeaseHold_Result>("spLeaseHold");
        }
    
        public virtual int spLeaseStatus(Nullable<System.DateTime> startdate, Nullable<System.DateTime> enddate)
        {
            var startdateParameter = startdate.HasValue ?
                new ObjectParameter("startdate", startdate) :
                new ObjectParameter("startdate", typeof(System.DateTime));
    
            var enddateParameter = enddate.HasValue ?
                new ObjectParameter("enddate", enddate) :
                new ObjectParameter("enddate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spLeaseStatus", startdateParameter, enddateParameter);
        }
    
        public virtual int spLeaseTypesDelete(Nullable<byte> landCode)
        {
            var landCodeParameter = landCode.HasValue ?
                new ObjectParameter("LandCode", landCode) :
                new ObjectParameter("LandCode", typeof(byte));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spLeaseTypesDelete", landCodeParameter);
        }
    
        public virtual int spLeaseTypesGetAll(Nullable<byte> landCode, string landDesc)
        {
            var landCodeParameter = landCode.HasValue ?
                new ObjectParameter("LandCode", landCode) :
                new ObjectParameter("LandCode", typeof(byte));
    
            var landDescParameter = landDesc != null ?
                new ObjectParameter("LandDesc", landDesc) :
                new ObjectParameter("LandDesc", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spLeaseTypesGetAll", landCodeParameter, landDescParameter);
        }
    
        public virtual int spLeaseTypesGetByKey(Nullable<byte> landCode, ObjectParameter landDesc)
        {
            var landCodeParameter = landCode.HasValue ?
                new ObjectParameter("LandCode", landCode) :
                new ObjectParameter("LandCode", typeof(byte));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spLeaseTypesGetByKey", landCodeParameter, landDesc);
        }
    
        public virtual int spLeaseTypesInsert(Nullable<byte> landCode, string landDesc)
        {
            var landCodeParameter = landCode.HasValue ?
                new ObjectParameter("LandCode", landCode) :
                new ObjectParameter("LandCode", typeof(byte));
    
            var landDescParameter = landDesc != null ?
                new ObjectParameter("LandDesc", landDesc) :
                new ObjectParameter("LandDesc", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spLeaseTypesInsert", landCodeParameter, landDescParameter);
        }
    
        public virtual int spLeaseTypesUpdate(Nullable<byte> landCode, string landDesc)
        {
            var landCodeParameter = landCode.HasValue ?
                new ObjectParameter("LandCode", landCode) :
                new ObjectParameter("LandCode", typeof(byte));
    
            var landDescParameter = landDesc != null ?
                new ObjectParameter("LandDesc", landDesc) :
                new ObjectParameter("LandDesc", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spLeaseTypesUpdate", landCodeParameter, landDescParameter);
        }
    
        public virtual int spLocationsDelete(Nullable<int> location_id)
        {
            var location_idParameter = location_id.HasValue ?
                new ObjectParameter("Location_id", location_id) :
                new ObjectParameter("Location_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spLocationsDelete", location_idParameter);
        }
    
        public virtual ObjectResult<spLocationsGetAll_Result> spLocationsGetAll(Nullable<int> location_id, string location_Desc)
        {
            var location_idParameter = location_id.HasValue ?
                new ObjectParameter("Location_id", location_id) :
                new ObjectParameter("Location_id", typeof(int));
    
            var location_DescParameter = location_Desc != null ?
                new ObjectParameter("Location_Desc", location_Desc) :
                new ObjectParameter("Location_Desc", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spLocationsGetAll_Result>("spLocationsGetAll", location_idParameter, location_DescParameter);
        }
    
        public virtual int spLocationsGetByKey(Nullable<int> location_id, ObjectParameter location_Desc)
        {
            var location_idParameter = location_id.HasValue ?
                new ObjectParameter("Location_id", location_id) :
                new ObjectParameter("Location_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spLocationsGetByKey", location_idParameter, location_Desc);
        }
    
        public virtual int spLocationsInsert(Nullable<int> location_id, string location_Desc)
        {
            var location_idParameter = location_id.HasValue ?
                new ObjectParameter("Location_id", location_id) :
                new ObjectParameter("Location_id", typeof(int));
    
            var location_DescParameter = location_Desc != null ?
                new ObjectParameter("Location_Desc", location_Desc) :
                new ObjectParameter("Location_Desc", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spLocationsInsert", location_idParameter, location_DescParameter);
        }
    
        public virtual int spLocationsUpdate(Nullable<int> location_id, string location_Desc)
        {
            var location_idParameter = location_id.HasValue ?
                new ObjectParameter("Location_id", location_id) :
                new ObjectParameter("Location_id", typeof(int));
    
            var location_DescParameter = location_Desc != null ?
                new ObjectParameter("Location_Desc", location_Desc) :
                new ObjectParameter("Location_Desc", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spLocationsUpdate", location_idParameter, location_DescParameter);
        }
    
        public virtual ObjectResult<spMailo_Result> spMailo()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spMailo_Result>("spMailo");
        }
    
        public virtual int spNewAllTitlesReport()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spNewAllTitlesReport");
        }
    
        public virtual int spNewDefaulters(Nullable<System.DateTime> startdate, Nullable<System.DateTime> enddate, Nullable<int> location)
        {
            var startdateParameter = startdate.HasValue ?
                new ObjectParameter("startdate", startdate) :
                new ObjectParameter("startdate", typeof(System.DateTime));
    
            var enddateParameter = enddate.HasValue ?
                new ObjectParameter("enddate", enddate) :
                new ObjectParameter("enddate", typeof(System.DateTime));
    
            var locationParameter = location.HasValue ?
                new ObjectParameter("Location", location) :
                new ObjectParameter("Location", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spNewDefaulters", startdateParameter, enddateParameter, locationParameter);
        }
    
        public virtual int spNHCCAllTitlesMgt()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spNHCCAllTitlesMgt");
        }
    
        public virtual int spNHCCAllTitlesMgt_false()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spNHCCAllTitlesMgt_false");
        }
    
        public virtual int spNHCCUserRoleDelete(Nullable<byte> userRoleCode)
        {
            var userRoleCodeParameter = userRoleCode.HasValue ?
                new ObjectParameter("UserRoleCode", userRoleCode) :
                new ObjectParameter("UserRoleCode", typeof(byte));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spNHCCUserRoleDelete", userRoleCodeParameter);
        }
    
        public virtual ObjectResult<spNHCCUserRoleGetAll_Result> spNHCCUserRoleGetAll(Nullable<byte> userRoleCode, string userRoleDesc)
        {
            var userRoleCodeParameter = userRoleCode.HasValue ?
                new ObjectParameter("UserRoleCode", userRoleCode) :
                new ObjectParameter("UserRoleCode", typeof(byte));
    
            var userRoleDescParameter = userRoleDesc != null ?
                new ObjectParameter("UserRoleDesc", userRoleDesc) :
                new ObjectParameter("UserRoleDesc", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spNHCCUserRoleGetAll_Result>("spNHCCUserRoleGetAll", userRoleCodeParameter, userRoleDescParameter);
        }
    
        public virtual int spNHCCUserRoleGetByKey(Nullable<byte> userRoleCode, ObjectParameter userRoleDesc)
        {
            var userRoleCodeParameter = userRoleCode.HasValue ?
                new ObjectParameter("UserRoleCode", userRoleCode) :
                new ObjectParameter("UserRoleCode", typeof(byte));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spNHCCUserRoleGetByKey", userRoleCodeParameter, userRoleDesc);
        }
    
        public virtual int spNHCCUserRoleInsert(Nullable<byte> userRoleCode, string userRoleDesc)
        {
            var userRoleCodeParameter = userRoleCode.HasValue ?
                new ObjectParameter("UserRoleCode", userRoleCode) :
                new ObjectParameter("UserRoleCode", typeof(byte));
    
            var userRoleDescParameter = userRoleDesc != null ?
                new ObjectParameter("UserRoleDesc", userRoleDesc) :
                new ObjectParameter("UserRoleDesc", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spNHCCUserRoleInsert", userRoleCodeParameter, userRoleDescParameter);
        }
    
        public virtual int spNHCCUserRoleUpdate(Nullable<byte> userRoleCode, string userRoleDesc)
        {
            var userRoleCodeParameter = userRoleCode.HasValue ?
                new ObjectParameter("UserRoleCode", userRoleCode) :
                new ObjectParameter("UserRoleCode", typeof(byte));
    
            var userRoleDescParameter = userRoleDesc != null ?
                new ObjectParameter("UserRoleDesc", userRoleDesc) :
                new ObjectParameter("UserRoleDesc", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spNHCCUserRoleUpdate", userRoleCodeParameter, userRoleDescParameter);
        }
    
        public virtual int spNotificationReminderIntervalDelete(Nullable<short> reminder_Interval)
        {
            var reminder_IntervalParameter = reminder_Interval.HasValue ?
                new ObjectParameter("Reminder_Interval", reminder_Interval) :
                new ObjectParameter("Reminder_Interval", typeof(short));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spNotificationReminderIntervalDelete", reminder_IntervalParameter);
        }
    
        public virtual ObjectResult<spNotificationReminderIntervalGetAll_Result> spNotificationReminderIntervalGetAll(Nullable<short> reminder_Interval, string reminder_Desc)
        {
            var reminder_IntervalParameter = reminder_Interval.HasValue ?
                new ObjectParameter("Reminder_Interval", reminder_Interval) :
                new ObjectParameter("Reminder_Interval", typeof(short));
    
            var reminder_DescParameter = reminder_Desc != null ?
                new ObjectParameter("Reminder_Desc", reminder_Desc) :
                new ObjectParameter("Reminder_Desc", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spNotificationReminderIntervalGetAll_Result>("spNotificationReminderIntervalGetAll", reminder_IntervalParameter, reminder_DescParameter);
        }
    
        public virtual int spNotificationReminderIntervalGetByKey(Nullable<short> reminder_Interval, ObjectParameter reminder_Desc)
        {
            var reminder_IntervalParameter = reminder_Interval.HasValue ?
                new ObjectParameter("Reminder_Interval", reminder_Interval) :
                new ObjectParameter("Reminder_Interval", typeof(short));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spNotificationReminderIntervalGetByKey", reminder_IntervalParameter, reminder_Desc);
        }
    
        public virtual int spNotificationReminderIntervalInsert(Nullable<short> reminder_Interval, string reminder_Desc)
        {
            var reminder_IntervalParameter = reminder_Interval.HasValue ?
                new ObjectParameter("Reminder_Interval", reminder_Interval) :
                new ObjectParameter("Reminder_Interval", typeof(short));
    
            var reminder_DescParameter = reminder_Desc != null ?
                new ObjectParameter("Reminder_Desc", reminder_Desc) :
                new ObjectParameter("Reminder_Desc", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spNotificationReminderIntervalInsert", reminder_IntervalParameter, reminder_DescParameter);
        }
    
        public virtual int spNotificationReminderIntervalUpdate(Nullable<short> reminder_Interval, string reminder_Desc)
        {
            var reminder_IntervalParameter = reminder_Interval.HasValue ?
                new ObjectParameter("Reminder_Interval", reminder_Interval) :
                new ObjectParameter("Reminder_Interval", typeof(short));
    
            var reminder_DescParameter = reminder_Desc != null ?
                new ObjectParameter("Reminder_Desc", reminder_Desc) :
                new ObjectParameter("Reminder_Desc", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spNotificationReminderIntervalUpdate", reminder_IntervalParameter, reminder_DescParameter);
        }
    
        public virtual int spNotificationServerDelete(Nullable<int> hostID)
        {
            var hostIDParameter = hostID.HasValue ?
                new ObjectParameter("HostID", hostID) :
                new ObjectParameter("HostID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spNotificationServerDelete", hostIDParameter);
        }
    
        public virtual ObjectResult<spNotificationServerGetAll_Result> spNotificationServerGetAll(Nullable<int> hostID, string senderEmail, string senderPassword, string sMTP_Port, string sMTP_Host, Nullable<bool> enableSSL, Nullable<bool> default_Host, Nullable<int> no_Reminders, Nullable<short> reminder_Interval, string remindees)
        {
            var hostIDParameter = hostID.HasValue ?
                new ObjectParameter("HostID", hostID) :
                new ObjectParameter("HostID", typeof(int));
    
            var senderEmailParameter = senderEmail != null ?
                new ObjectParameter("SenderEmail", senderEmail) :
                new ObjectParameter("SenderEmail", typeof(string));
    
            var senderPasswordParameter = senderPassword != null ?
                new ObjectParameter("SenderPassword", senderPassword) :
                new ObjectParameter("SenderPassword", typeof(string));
    
            var sMTP_PortParameter = sMTP_Port != null ?
                new ObjectParameter("SMTP_Port", sMTP_Port) :
                new ObjectParameter("SMTP_Port", typeof(string));
    
            var sMTP_HostParameter = sMTP_Host != null ?
                new ObjectParameter("SMTP_Host", sMTP_Host) :
                new ObjectParameter("SMTP_Host", typeof(string));
    
            var enableSSLParameter = enableSSL.HasValue ?
                new ObjectParameter("EnableSSL", enableSSL) :
                new ObjectParameter("EnableSSL", typeof(bool));
    
            var default_HostParameter = default_Host.HasValue ?
                new ObjectParameter("Default_Host", default_Host) :
                new ObjectParameter("Default_Host", typeof(bool));
    
            var no_RemindersParameter = no_Reminders.HasValue ?
                new ObjectParameter("No_Reminders", no_Reminders) :
                new ObjectParameter("No_Reminders", typeof(int));
    
            var reminder_IntervalParameter = reminder_Interval.HasValue ?
                new ObjectParameter("Reminder_Interval", reminder_Interval) :
                new ObjectParameter("Reminder_Interval", typeof(short));
    
            var remindeesParameter = remindees != null ?
                new ObjectParameter("Remindees", remindees) :
                new ObjectParameter("Remindees", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spNotificationServerGetAll_Result>("spNotificationServerGetAll", hostIDParameter, senderEmailParameter, senderPasswordParameter, sMTP_PortParameter, sMTP_HostParameter, enableSSLParameter, default_HostParameter, no_RemindersParameter, reminder_IntervalParameter, remindeesParameter);
        }
    
        public virtual int spNotificationServerGetByKey(Nullable<int> hostID, ObjectParameter senderEmail, ObjectParameter senderPassword, ObjectParameter sMTP_Port, ObjectParameter sMTP_Host, ObjectParameter enableSSL, ObjectParameter default_Host, ObjectParameter no_Reminders, ObjectParameter reminder_Interval, ObjectParameter remindees)
        {
            var hostIDParameter = hostID.HasValue ?
                new ObjectParameter("HostID", hostID) :
                new ObjectParameter("HostID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spNotificationServerGetByKey", hostIDParameter, senderEmail, senderPassword, sMTP_Port, sMTP_Host, enableSSL, default_Host, no_Reminders, reminder_Interval, remindees);
        }
    
        public virtual int spNotificationServerInsert(Nullable<int> hostID, string senderEmail, string senderPassword, string sMTP_Port, string sMTP_Host, Nullable<bool> enableSSL, Nullable<bool> default_Host, Nullable<int> no_Reminders, Nullable<short> reminder_Interval, string remindees)
        {
            var hostIDParameter = hostID.HasValue ?
                new ObjectParameter("HostID", hostID) :
                new ObjectParameter("HostID", typeof(int));
    
            var senderEmailParameter = senderEmail != null ?
                new ObjectParameter("SenderEmail", senderEmail) :
                new ObjectParameter("SenderEmail", typeof(string));
    
            var senderPasswordParameter = senderPassword != null ?
                new ObjectParameter("SenderPassword", senderPassword) :
                new ObjectParameter("SenderPassword", typeof(string));
    
            var sMTP_PortParameter = sMTP_Port != null ?
                new ObjectParameter("SMTP_Port", sMTP_Port) :
                new ObjectParameter("SMTP_Port", typeof(string));
    
            var sMTP_HostParameter = sMTP_Host != null ?
                new ObjectParameter("SMTP_Host", sMTP_Host) :
                new ObjectParameter("SMTP_Host", typeof(string));
    
            var enableSSLParameter = enableSSL.HasValue ?
                new ObjectParameter("EnableSSL", enableSSL) :
                new ObjectParameter("EnableSSL", typeof(bool));
    
            var default_HostParameter = default_Host.HasValue ?
                new ObjectParameter("Default_Host", default_Host) :
                new ObjectParameter("Default_Host", typeof(bool));
    
            var no_RemindersParameter = no_Reminders.HasValue ?
                new ObjectParameter("No_Reminders", no_Reminders) :
                new ObjectParameter("No_Reminders", typeof(int));
    
            var reminder_IntervalParameter = reminder_Interval.HasValue ?
                new ObjectParameter("Reminder_Interval", reminder_Interval) :
                new ObjectParameter("Reminder_Interval", typeof(short));
    
            var remindeesParameter = remindees != null ?
                new ObjectParameter("Remindees", remindees) :
                new ObjectParameter("Remindees", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spNotificationServerInsert", hostIDParameter, senderEmailParameter, senderPasswordParameter, sMTP_PortParameter, sMTP_HostParameter, enableSSLParameter, default_HostParameter, no_RemindersParameter, reminder_IntervalParameter, remindeesParameter);
        }
    
        public virtual int spNotificationServerUpdate(Nullable<int> hostID, string senderEmail, string senderPassword, string sMTP_Port, string sMTP_Host, Nullable<bool> enableSSL, Nullable<bool> default_Host, Nullable<int> no_Reminders, Nullable<short> reminder_Interval, string remindees)
        {
            var hostIDParameter = hostID.HasValue ?
                new ObjectParameter("HostID", hostID) :
                new ObjectParameter("HostID", typeof(int));
    
            var senderEmailParameter = senderEmail != null ?
                new ObjectParameter("SenderEmail", senderEmail) :
                new ObjectParameter("SenderEmail", typeof(string));
    
            var senderPasswordParameter = senderPassword != null ?
                new ObjectParameter("SenderPassword", senderPassword) :
                new ObjectParameter("SenderPassword", typeof(string));
    
            var sMTP_PortParameter = sMTP_Port != null ?
                new ObjectParameter("SMTP_Port", sMTP_Port) :
                new ObjectParameter("SMTP_Port", typeof(string));
    
            var sMTP_HostParameter = sMTP_Host != null ?
                new ObjectParameter("SMTP_Host", sMTP_Host) :
                new ObjectParameter("SMTP_Host", typeof(string));
    
            var enableSSLParameter = enableSSL.HasValue ?
                new ObjectParameter("EnableSSL", enableSSL) :
                new ObjectParameter("EnableSSL", typeof(bool));
    
            var default_HostParameter = default_Host.HasValue ?
                new ObjectParameter("Default_Host", default_Host) :
                new ObjectParameter("Default_Host", typeof(bool));
    
            var no_RemindersParameter = no_Reminders.HasValue ?
                new ObjectParameter("No_Reminders", no_Reminders) :
                new ObjectParameter("No_Reminders", typeof(int));
    
            var reminder_IntervalParameter = reminder_Interval.HasValue ?
                new ObjectParameter("Reminder_Interval", reminder_Interval) :
                new ObjectParameter("Reminder_Interval", typeof(short));
    
            var remindeesParameter = remindees != null ?
                new ObjectParameter("Remindees", remindees) :
                new ObjectParameter("Remindees", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spNotificationServerUpdate", hostIDParameter, senderEmailParameter, senderPasswordParameter, sMTP_PortParameter, sMTP_HostParameter, enableSSLParameter, default_HostParameter, no_RemindersParameter, reminder_IntervalParameter, remindeesParameter);
        }
    
        public virtual int spNotificationStatusDelete(Nullable<int> statusID)
        {
            var statusIDParameter = statusID.HasValue ?
                new ObjectParameter("StatusID", statusID) :
                new ObjectParameter("StatusID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spNotificationStatusDelete", statusIDParameter);
        }
    
        public virtual ObjectResult<spNotificationStatusGetAll_Result> spNotificationStatusGetAll(Nullable<int> statusID, string statudDesc)
        {
            var statusIDParameter = statusID.HasValue ?
                new ObjectParameter("StatusID", statusID) :
                new ObjectParameter("StatusID", typeof(int));
    
            var statudDescParameter = statudDesc != null ?
                new ObjectParameter("StatudDesc", statudDesc) :
                new ObjectParameter("StatudDesc", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spNotificationStatusGetAll_Result>("spNotificationStatusGetAll", statusIDParameter, statudDescParameter);
        }
    
        public virtual int spNotificationStatusGetByKey(Nullable<int> statusID, ObjectParameter statudDesc)
        {
            var statusIDParameter = statusID.HasValue ?
                new ObjectParameter("StatusID", statusID) :
                new ObjectParameter("StatusID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spNotificationStatusGetByKey", statusIDParameter, statudDesc);
        }
    
        public virtual int spNotificationStatusInsert(Nullable<int> statusID, string statudDesc)
        {
            var statusIDParameter = statusID.HasValue ?
                new ObjectParameter("StatusID", statusID) :
                new ObjectParameter("StatusID", typeof(int));
    
            var statudDescParameter = statudDesc != null ?
                new ObjectParameter("StatudDesc", statudDesc) :
                new ObjectParameter("StatudDesc", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spNotificationStatusInsert", statusIDParameter, statudDescParameter);
        }
    
        public virtual int spNotificationStatusUpdate(Nullable<int> statusID, string statudDesc)
        {
            var statusIDParameter = statusID.HasValue ?
                new ObjectParameter("StatusID", statusID) :
                new ObjectParameter("StatusID", typeof(int));
    
            var statudDescParameter = statudDesc != null ?
                new ObjectParameter("StatudDesc", statudDesc) :
                new ObjectParameter("StatudDesc", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spNotificationStatusUpdate", statusIDParameter, statudDescParameter);
        }
    
        public virtual ObjectResult<spOffers_Result> spOffers(Nullable<System.DateTime> startdate, Nullable<System.DateTime> enddate, Nullable<int> location)
        {
            var startdateParameter = startdate.HasValue ?
                new ObjectParameter("startdate", startdate) :
                new ObjectParameter("startdate", typeof(System.DateTime));
    
            var enddateParameter = enddate.HasValue ?
                new ObjectParameter("enddate", enddate) :
                new ObjectParameter("enddate", typeof(System.DateTime));
    
            var locationParameter = location.HasValue ?
                new ObjectParameter("location", location) :
                new ObjectParameter("location", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spOffers_Result>("spOffers", startdateParameter, enddateParameter, locationParameter);
        }
    
        public virtual int spOffersDelete(Nullable<int> project_code, Nullable<int> offerNo, string volume, Nullable<int> folio)
        {
            var project_codeParameter = project_code.HasValue ?
                new ObjectParameter("Project_code", project_code) :
                new ObjectParameter("Project_code", typeof(int));
    
            var offerNoParameter = offerNo.HasValue ?
                new ObjectParameter("OfferNo", offerNo) :
                new ObjectParameter("OfferNo", typeof(int));
    
            var volumeParameter = volume != null ?
                new ObjectParameter("Volume", volume) :
                new ObjectParameter("Volume", typeof(string));
    
            var folioParameter = folio.HasValue ?
                new ObjectParameter("Folio", folio) :
                new ObjectParameter("Folio", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spOffersDelete", project_codeParameter, offerNoParameter, volumeParameter, folioParameter);
        }
    
        public virtual ObjectResult<spOffersGetAll_Result> spOffersGetAll(Nullable<int> project_code, Nullable<int> offerNo, string volume, Nullable<int> folio)
        {
            var project_codeParameter = project_code.HasValue ?
                new ObjectParameter("Project_code", project_code) :
                new ObjectParameter("Project_code", typeof(int));
    
            var offerNoParameter = offerNo.HasValue ?
                new ObjectParameter("OfferNo", offerNo) :
                new ObjectParameter("OfferNo", typeof(int));
    
            var volumeParameter = volume != null ?
                new ObjectParameter("Volume", volume) :
                new ObjectParameter("Volume", typeof(string));
    
            var folioParameter = folio.HasValue ?
                new ObjectParameter("Folio", folio) :
                new ObjectParameter("Folio", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spOffersGetAll_Result>("spOffersGetAll", project_codeParameter, offerNoParameter, volumeParameter, folioParameter);
        }
    
        public virtual int spOffersGetByKey(Nullable<int> project_code, Nullable<int> offerNo, string volume, Nullable<int> folio, ObjectParameter title_Reference, ObjectParameter purchaser_Name, ObjectParameter nationality, ObjectParameter purchasers_Address, ObjectParameter purchasers_TelNo, ObjectParameter purchasers_Email, ObjectParameter purchaserEmployer, ObjectParameter offer_Value, ObjectParameter offerDate, ObjectParameter offerExpiryDate, ObjectParameter offerPaymentDate, ObjectParameter offerPaidUP, ObjectParameter titleTransferred, ObjectParameter transferDate, ObjectParameter purchaserRemark, ObjectParameter newDataAudit, ObjectParameter editDataAudit, ObjectParameter statusCode, ObjectParameter sealApplicationRegister)
        {
            var project_codeParameter = project_code.HasValue ?
                new ObjectParameter("Project_code", project_code) :
                new ObjectParameter("Project_code", typeof(int));
    
            var offerNoParameter = offerNo.HasValue ?
                new ObjectParameter("OfferNo", offerNo) :
                new ObjectParameter("OfferNo", typeof(int));
    
            var volumeParameter = volume != null ?
                new ObjectParameter("Volume", volume) :
                new ObjectParameter("Volume", typeof(string));
    
            var folioParameter = folio.HasValue ?
                new ObjectParameter("Folio", folio) :
                new ObjectParameter("Folio", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spOffersGetByKey", project_codeParameter, offerNoParameter, volumeParameter, folioParameter, title_Reference, purchaser_Name, nationality, purchasers_Address, purchasers_TelNo, purchasers_Email, purchaserEmployer, offer_Value, offerDate, offerExpiryDate, offerPaymentDate, offerPaidUP, titleTransferred, transferDate, purchaserRemark, newDataAudit, editDataAudit, statusCode, sealApplicationRegister);
        }
    
        public virtual int spOffersInsert(Nullable<int> project_code, Nullable<int> offerNo, string volume, Nullable<int> folio, string title_Reference, string purchaser_Name, string nationality, string purchasers_Address, string purchasers_TelNo, string purchasers_Email, string purchaserEmployer, Nullable<int> offer_Value, Nullable<System.DateTime> offerDate, Nullable<System.DateTime> offerExpiryDate, Nullable<System.DateTime> offerPaymentDate, Nullable<bool> offerPaidUP, Nullable<bool> titleTransferred, Nullable<System.DateTime> transferDate, string purchaserRemark, string newDataAudit, string editDataAudit, Nullable<byte> statusCode, Nullable<byte> sealApplicationRegister)
        {
            var project_codeParameter = project_code.HasValue ?
                new ObjectParameter("Project_code", project_code) :
                new ObjectParameter("Project_code", typeof(int));
    
            var offerNoParameter = offerNo.HasValue ?
                new ObjectParameter("OfferNo", offerNo) :
                new ObjectParameter("OfferNo", typeof(int));
    
            var volumeParameter = volume != null ?
                new ObjectParameter("Volume", volume) :
                new ObjectParameter("Volume", typeof(string));
    
            var folioParameter = folio.HasValue ?
                new ObjectParameter("Folio", folio) :
                new ObjectParameter("Folio", typeof(int));
    
            var title_ReferenceParameter = title_Reference != null ?
                new ObjectParameter("Title_Reference", title_Reference) :
                new ObjectParameter("Title_Reference", typeof(string));
    
            var purchaser_NameParameter = purchaser_Name != null ?
                new ObjectParameter("Purchaser_Name", purchaser_Name) :
                new ObjectParameter("Purchaser_Name", typeof(string));
    
            var nationalityParameter = nationality != null ?
                new ObjectParameter("Nationality", nationality) :
                new ObjectParameter("Nationality", typeof(string));
    
            var purchasers_AddressParameter = purchasers_Address != null ?
                new ObjectParameter("Purchasers_Address", purchasers_Address) :
                new ObjectParameter("Purchasers_Address", typeof(string));
    
            var purchasers_TelNoParameter = purchasers_TelNo != null ?
                new ObjectParameter("Purchasers_TelNo", purchasers_TelNo) :
                new ObjectParameter("Purchasers_TelNo", typeof(string));
    
            var purchasers_EmailParameter = purchasers_Email != null ?
                new ObjectParameter("Purchasers_Email", purchasers_Email) :
                new ObjectParameter("Purchasers_Email", typeof(string));
    
            var purchaserEmployerParameter = purchaserEmployer != null ?
                new ObjectParameter("PurchaserEmployer", purchaserEmployer) :
                new ObjectParameter("PurchaserEmployer", typeof(string));
    
            var offer_ValueParameter = offer_Value.HasValue ?
                new ObjectParameter("Offer_Value", offer_Value) :
                new ObjectParameter("Offer_Value", typeof(int));
    
            var offerDateParameter = offerDate.HasValue ?
                new ObjectParameter("OfferDate", offerDate) :
                new ObjectParameter("OfferDate", typeof(System.DateTime));
    
            var offerExpiryDateParameter = offerExpiryDate.HasValue ?
                new ObjectParameter("OfferExpiryDate", offerExpiryDate) :
                new ObjectParameter("OfferExpiryDate", typeof(System.DateTime));
    
            var offerPaymentDateParameter = offerPaymentDate.HasValue ?
                new ObjectParameter("OfferPaymentDate", offerPaymentDate) :
                new ObjectParameter("OfferPaymentDate", typeof(System.DateTime));
    
            var offerPaidUPParameter = offerPaidUP.HasValue ?
                new ObjectParameter("OfferPaidUP", offerPaidUP) :
                new ObjectParameter("OfferPaidUP", typeof(bool));
    
            var titleTransferredParameter = titleTransferred.HasValue ?
                new ObjectParameter("TitleTransferred", titleTransferred) :
                new ObjectParameter("TitleTransferred", typeof(bool));
    
            var transferDateParameter = transferDate.HasValue ?
                new ObjectParameter("TransferDate", transferDate) :
                new ObjectParameter("TransferDate", typeof(System.DateTime));
    
            var purchaserRemarkParameter = purchaserRemark != null ?
                new ObjectParameter("PurchaserRemark", purchaserRemark) :
                new ObjectParameter("PurchaserRemark", typeof(string));
    
            var newDataAuditParameter = newDataAudit != null ?
                new ObjectParameter("NewDataAudit", newDataAudit) :
                new ObjectParameter("NewDataAudit", typeof(string));
    
            var editDataAuditParameter = editDataAudit != null ?
                new ObjectParameter("EditDataAudit", editDataAudit) :
                new ObjectParameter("EditDataAudit", typeof(string));
    
            var statusCodeParameter = statusCode.HasValue ?
                new ObjectParameter("StatusCode", statusCode) :
                new ObjectParameter("StatusCode", typeof(byte));
    
            var sealApplicationRegisterParameter = sealApplicationRegister.HasValue ?
                new ObjectParameter("SealApplicationRegister", sealApplicationRegister) :
                new ObjectParameter("SealApplicationRegister", typeof(byte));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spOffersInsert", project_codeParameter, offerNoParameter, volumeParameter, folioParameter, title_ReferenceParameter, purchaser_NameParameter, nationalityParameter, purchasers_AddressParameter, purchasers_TelNoParameter, purchasers_EmailParameter, purchaserEmployerParameter, offer_ValueParameter, offerDateParameter, offerExpiryDateParameter, offerPaymentDateParameter, offerPaidUPParameter, titleTransferredParameter, transferDateParameter, purchaserRemarkParameter, newDataAuditParameter, editDataAuditParameter, statusCodeParameter, sealApplicationRegisterParameter);
        }
    
        public virtual int spOffersMgt(Nullable<System.DateTime> startdate, Nullable<System.DateTime> enddate)
        {
            var startdateParameter = startdate.HasValue ?
                new ObjectParameter("startdate", startdate) :
                new ObjectParameter("startdate", typeof(System.DateTime));
    
            var enddateParameter = enddate.HasValue ?
                new ObjectParameter("enddate", enddate) :
                new ObjectParameter("enddate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spOffersMgt", startdateParameter, enddateParameter);
        }
    
        public virtual int spOfferStatusDelete(Nullable<byte> statusCode)
        {
            var statusCodeParameter = statusCode.HasValue ?
                new ObjectParameter("StatusCode", statusCode) :
                new ObjectParameter("StatusCode", typeof(byte));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spOfferStatusDelete", statusCodeParameter);
        }
    
        public virtual ObjectResult<spOfferStatusGetAll_Result> spOfferStatusGetAll(Nullable<byte> statusCode, string statusDesc)
        {
            var statusCodeParameter = statusCode.HasValue ?
                new ObjectParameter("StatusCode", statusCode) :
                new ObjectParameter("StatusCode", typeof(byte));
    
            var statusDescParameter = statusDesc != null ?
                new ObjectParameter("StatusDesc", statusDesc) :
                new ObjectParameter("StatusDesc", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spOfferStatusGetAll_Result>("spOfferStatusGetAll", statusCodeParameter, statusDescParameter);
        }
    
        public virtual int spOfferStatusGetByKey(Nullable<byte> statusCode, ObjectParameter statusDesc)
        {
            var statusCodeParameter = statusCode.HasValue ?
                new ObjectParameter("StatusCode", statusCode) :
                new ObjectParameter("StatusCode", typeof(byte));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spOfferStatusGetByKey", statusCodeParameter, statusDesc);
        }
    
        public virtual int spOfferStatusInsert(Nullable<byte> statusCode, string statusDesc)
        {
            var statusCodeParameter = statusCode.HasValue ?
                new ObjectParameter("StatusCode", statusCode) :
                new ObjectParameter("StatusCode", typeof(byte));
    
            var statusDescParameter = statusDesc != null ?
                new ObjectParameter("StatusDesc", statusDesc) :
                new ObjectParameter("StatusDesc", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spOfferStatusInsert", statusCodeParameter, statusDescParameter);
        }
    
        public virtual int spOfferStatusUpdate(Nullable<byte> statusCode, string statusDesc)
        {
            var statusCodeParameter = statusCode.HasValue ?
                new ObjectParameter("StatusCode", statusCode) :
                new ObjectParameter("StatusCode", typeof(byte));
    
            var statusDescParameter = statusDesc != null ?
                new ObjectParameter("StatusDesc", statusDesc) :
                new ObjectParameter("StatusDesc", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spOfferStatusUpdate", statusCodeParameter, statusDescParameter);
        }
    
        public virtual int spOffersUpdate(Nullable<int> project_code, Nullable<int> offerNo, string volume, Nullable<int> folio, string title_Reference, string purchaser_Name, string nationality, string purchasers_Address, string purchasers_TelNo, string purchasers_Email, string purchaserEmployer, Nullable<int> offer_Value, Nullable<System.DateTime> offerDate, Nullable<System.DateTime> offerExpiryDate, Nullable<System.DateTime> offerPaymentDate, Nullable<bool> offerPaidUP, Nullable<bool> titleTransferred, Nullable<System.DateTime> transferDate, string purchaserRemark, string newDataAudit, string editDataAudit, Nullable<byte> statusCode, Nullable<byte> sealApplicationRegister)
        {
            var project_codeParameter = project_code.HasValue ?
                new ObjectParameter("Project_code", project_code) :
                new ObjectParameter("Project_code", typeof(int));
    
            var offerNoParameter = offerNo.HasValue ?
                new ObjectParameter("OfferNo", offerNo) :
                new ObjectParameter("OfferNo", typeof(int));
    
            var volumeParameter = volume != null ?
                new ObjectParameter("Volume", volume) :
                new ObjectParameter("Volume", typeof(string));
    
            var folioParameter = folio.HasValue ?
                new ObjectParameter("Folio", folio) :
                new ObjectParameter("Folio", typeof(int));
    
            var title_ReferenceParameter = title_Reference != null ?
                new ObjectParameter("Title_Reference", title_Reference) :
                new ObjectParameter("Title_Reference", typeof(string));
    
            var purchaser_NameParameter = purchaser_Name != null ?
                new ObjectParameter("Purchaser_Name", purchaser_Name) :
                new ObjectParameter("Purchaser_Name", typeof(string));
    
            var nationalityParameter = nationality != null ?
                new ObjectParameter("Nationality", nationality) :
                new ObjectParameter("Nationality", typeof(string));
    
            var purchasers_AddressParameter = purchasers_Address != null ?
                new ObjectParameter("Purchasers_Address", purchasers_Address) :
                new ObjectParameter("Purchasers_Address", typeof(string));
    
            var purchasers_TelNoParameter = purchasers_TelNo != null ?
                new ObjectParameter("Purchasers_TelNo", purchasers_TelNo) :
                new ObjectParameter("Purchasers_TelNo", typeof(string));
    
            var purchasers_EmailParameter = purchasers_Email != null ?
                new ObjectParameter("Purchasers_Email", purchasers_Email) :
                new ObjectParameter("Purchasers_Email", typeof(string));
    
            var purchaserEmployerParameter = purchaserEmployer != null ?
                new ObjectParameter("PurchaserEmployer", purchaserEmployer) :
                new ObjectParameter("PurchaserEmployer", typeof(string));
    
            var offer_ValueParameter = offer_Value.HasValue ?
                new ObjectParameter("Offer_Value", offer_Value) :
                new ObjectParameter("Offer_Value", typeof(int));
    
            var offerDateParameter = offerDate.HasValue ?
                new ObjectParameter("OfferDate", offerDate) :
                new ObjectParameter("OfferDate", typeof(System.DateTime));
    
            var offerExpiryDateParameter = offerExpiryDate.HasValue ?
                new ObjectParameter("OfferExpiryDate", offerExpiryDate) :
                new ObjectParameter("OfferExpiryDate", typeof(System.DateTime));
    
            var offerPaymentDateParameter = offerPaymentDate.HasValue ?
                new ObjectParameter("OfferPaymentDate", offerPaymentDate) :
                new ObjectParameter("OfferPaymentDate", typeof(System.DateTime));
    
            var offerPaidUPParameter = offerPaidUP.HasValue ?
                new ObjectParameter("OfferPaidUP", offerPaidUP) :
                new ObjectParameter("OfferPaidUP", typeof(bool));
    
            var titleTransferredParameter = titleTransferred.HasValue ?
                new ObjectParameter("TitleTransferred", titleTransferred) :
                new ObjectParameter("TitleTransferred", typeof(bool));
    
            var transferDateParameter = transferDate.HasValue ?
                new ObjectParameter("TransferDate", transferDate) :
                new ObjectParameter("TransferDate", typeof(System.DateTime));
    
            var purchaserRemarkParameter = purchaserRemark != null ?
                new ObjectParameter("PurchaserRemark", purchaserRemark) :
                new ObjectParameter("PurchaserRemark", typeof(string));
    
            var newDataAuditParameter = newDataAudit != null ?
                new ObjectParameter("NewDataAudit", newDataAudit) :
                new ObjectParameter("NewDataAudit", typeof(string));
    
            var editDataAuditParameter = editDataAudit != null ?
                new ObjectParameter("EditDataAudit", editDataAudit) :
                new ObjectParameter("EditDataAudit", typeof(string));
    
            var statusCodeParameter = statusCode.HasValue ?
                new ObjectParameter("StatusCode", statusCode) :
                new ObjectParameter("StatusCode", typeof(byte));
    
            var sealApplicationRegisterParameter = sealApplicationRegister.HasValue ?
                new ObjectParameter("SealApplicationRegister", sealApplicationRegister) :
                new ObjectParameter("SealApplicationRegister", typeof(byte));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spOffersUpdate", project_codeParameter, offerNoParameter, volumeParameter, folioParameter, title_ReferenceParameter, purchaser_NameParameter, nationalityParameter, purchasers_AddressParameter, purchasers_TelNoParameter, purchasers_EmailParameter, purchaserEmployerParameter, offer_ValueParameter, offerDateParameter, offerExpiryDateParameter, offerPaymentDateParameter, offerPaidUPParameter, titleTransferredParameter, transferDateParameter, purchaserRemarkParameter, newDataAuditParameter, editDataAuditParameter, statusCodeParameter, sealApplicationRegisterParameter);
        }
    
        public virtual int spParishDelete(Nullable<int> parish_ID)
        {
            var parish_IDParameter = parish_ID.HasValue ?
                new ObjectParameter("Parish_ID", parish_ID) :
                new ObjectParameter("Parish_ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spParishDelete", parish_IDParameter);
        }
    
        public virtual ObjectResult<spParishGetAll_Result> spParishGetAll(Nullable<int> parish_ID, Nullable<int> subcounty_ID, Nullable<byte> district, Nullable<short> county, string parish_Name)
        {
            var parish_IDParameter = parish_ID.HasValue ?
                new ObjectParameter("Parish_ID", parish_ID) :
                new ObjectParameter("Parish_ID", typeof(int));
    
            var subcounty_IDParameter = subcounty_ID.HasValue ?
                new ObjectParameter("Subcounty_ID", subcounty_ID) :
                new ObjectParameter("Subcounty_ID", typeof(int));
    
            var districtParameter = district.HasValue ?
                new ObjectParameter("District", district) :
                new ObjectParameter("District", typeof(byte));
    
            var countyParameter = county.HasValue ?
                new ObjectParameter("County", county) :
                new ObjectParameter("County", typeof(short));
    
            var parish_NameParameter = parish_Name != null ?
                new ObjectParameter("Parish_Name", parish_Name) :
                new ObjectParameter("Parish_Name", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spParishGetAll_Result>("spParishGetAll", parish_IDParameter, subcounty_IDParameter, districtParameter, countyParameter, parish_NameParameter);
        }
    
        public virtual int spParishGetByKey(Nullable<int> parish_ID, ObjectParameter subcounty_ID, ObjectParameter district, ObjectParameter county, ObjectParameter parish_Name)
        {
            var parish_IDParameter = parish_ID.HasValue ?
                new ObjectParameter("Parish_ID", parish_ID) :
                new ObjectParameter("Parish_ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spParishGetByKey", parish_IDParameter, subcounty_ID, district, county, parish_Name);
        }
    
        public virtual int spParishInsert(Nullable<int> parish_ID, Nullable<int> subcounty_ID, Nullable<byte> district, Nullable<short> county, string parish_Name)
        {
            var parish_IDParameter = parish_ID.HasValue ?
                new ObjectParameter("Parish_ID", parish_ID) :
                new ObjectParameter("Parish_ID", typeof(int));
    
            var subcounty_IDParameter = subcounty_ID.HasValue ?
                new ObjectParameter("Subcounty_ID", subcounty_ID) :
                new ObjectParameter("Subcounty_ID", typeof(int));
    
            var districtParameter = district.HasValue ?
                new ObjectParameter("District", district) :
                new ObjectParameter("District", typeof(byte));
    
            var countyParameter = county.HasValue ?
                new ObjectParameter("County", county) :
                new ObjectParameter("County", typeof(short));
    
            var parish_NameParameter = parish_Name != null ?
                new ObjectParameter("Parish_Name", parish_Name) :
                new ObjectParameter("Parish_Name", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spParishInsert", parish_IDParameter, subcounty_IDParameter, districtParameter, countyParameter, parish_NameParameter);
        }
    
        public virtual int spParishUpdate(Nullable<int> parish_ID, Nullable<int> subcounty_ID, Nullable<byte> district, Nullable<short> county, string parish_Name)
        {
            var parish_IDParameter = parish_ID.HasValue ?
                new ObjectParameter("Parish_ID", parish_ID) :
                new ObjectParameter("Parish_ID", typeof(int));
    
            var subcounty_IDParameter = subcounty_ID.HasValue ?
                new ObjectParameter("Subcounty_ID", subcounty_ID) :
                new ObjectParameter("Subcounty_ID", typeof(int));
    
            var districtParameter = district.HasValue ?
                new ObjectParameter("District", district) :
                new ObjectParameter("District", typeof(byte));
    
            var countyParameter = county.HasValue ?
                new ObjectParameter("County", county) :
                new ObjectParameter("County", typeof(short));
    
            var parish_NameParameter = parish_Name != null ?
                new ObjectParameter("Parish_Name", parish_Name) :
                new ObjectParameter("Parish_Name", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spParishUpdate", parish_IDParameter, subcounty_IDParameter, districtParameter, countyParameter, parish_NameParameter);
        }
    
        public virtual int spPayMethodDelete(Nullable<byte> payMethodCode)
        {
            var payMethodCodeParameter = payMethodCode.HasValue ?
                new ObjectParameter("PayMethodCode", payMethodCode) :
                new ObjectParameter("PayMethodCode", typeof(byte));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spPayMethodDelete", payMethodCodeParameter);
        }
    
        public virtual ObjectResult<spPayMethodGetAll_Result> spPayMethodGetAll(Nullable<byte> payMethodCode, string payMethodDesc)
        {
            var payMethodCodeParameter = payMethodCode.HasValue ?
                new ObjectParameter("PayMethodCode", payMethodCode) :
                new ObjectParameter("PayMethodCode", typeof(byte));
    
            var payMethodDescParameter = payMethodDesc != null ?
                new ObjectParameter("PayMethodDesc", payMethodDesc) :
                new ObjectParameter("PayMethodDesc", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spPayMethodGetAll_Result>("spPayMethodGetAll", payMethodCodeParameter, payMethodDescParameter);
        }
    
        public virtual int spPayMethodGetByKey(Nullable<byte> payMethodCode, ObjectParameter payMethodDesc)
        {
            var payMethodCodeParameter = payMethodCode.HasValue ?
                new ObjectParameter("PayMethodCode", payMethodCode) :
                new ObjectParameter("PayMethodCode", typeof(byte));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spPayMethodGetByKey", payMethodCodeParameter, payMethodDesc);
        }
    
        public virtual int spPayMethodInsert(Nullable<byte> payMethodCode, string payMethodDesc)
        {
            var payMethodCodeParameter = payMethodCode.HasValue ?
                new ObjectParameter("PayMethodCode", payMethodCode) :
                new ObjectParameter("PayMethodCode", typeof(byte));
    
            var payMethodDescParameter = payMethodDesc != null ?
                new ObjectParameter("PayMethodDesc", payMethodDesc) :
                new ObjectParameter("PayMethodDesc", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spPayMethodInsert", payMethodCodeParameter, payMethodDescParameter);
        }
    
        public virtual int spPayMethodUpdate(Nullable<byte> payMethodCode, string payMethodDesc)
        {
            var payMethodCodeParameter = payMethodCode.HasValue ?
                new ObjectParameter("PayMethodCode", payMethodCode) :
                new ObjectParameter("PayMethodCode", typeof(byte));
    
            var payMethodDescParameter = payMethodDesc != null ?
                new ObjectParameter("PayMethodDesc", payMethodDesc) :
                new ObjectParameter("PayMethodDesc", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spPayMethodUpdate", payMethodCodeParameter, payMethodDescParameter);
        }
    
        public virtual int spProjectsDelete(Nullable<int> project_id)
        {
            var project_idParameter = project_id.HasValue ?
                new ObjectParameter("Project_id", project_id) :
                new ObjectParameter("Project_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spProjectsDelete", project_idParameter);
        }
    
        public virtual ObjectResult<spProjectsGetAll_Result> spProjectsGetAll(Nullable<int> project_id, string project_Desc)
        {
            var project_idParameter = project_id.HasValue ?
                new ObjectParameter("Project_id", project_id) :
                new ObjectParameter("Project_id", typeof(int));
    
            var project_DescParameter = project_Desc != null ?
                new ObjectParameter("Project_Desc", project_Desc) :
                new ObjectParameter("Project_Desc", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spProjectsGetAll_Result>("spProjectsGetAll", project_idParameter, project_DescParameter);
        }
    
        public virtual int spProjectsGetByKey(Nullable<int> project_id, ObjectParameter project_Desc, ObjectParameter nHCC_Codes)
        {
            var project_idParameter = project_id.HasValue ?
                new ObjectParameter("Project_id", project_id) :
                new ObjectParameter("Project_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spProjectsGetByKey", project_idParameter, project_Desc, nHCC_Codes);
        }
    
        public virtual int spProjectsInsert(Nullable<int> project_id, string project_Desc, string nHCC_Codes)
        {
            var project_idParameter = project_id.HasValue ?
                new ObjectParameter("Project_id", project_id) :
                new ObjectParameter("Project_id", typeof(int));
    
            var project_DescParameter = project_Desc != null ?
                new ObjectParameter("Project_Desc", project_Desc) :
                new ObjectParameter("Project_Desc", typeof(string));
    
            var nHCC_CodesParameter = nHCC_Codes != null ?
                new ObjectParameter("NHCC_Codes", nHCC_Codes) :
                new ObjectParameter("NHCC_Codes", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spProjectsInsert", project_idParameter, project_DescParameter, nHCC_CodesParameter);
        }
    
        public virtual int spProjectsUpdate(Nullable<int> project_id, string project_Desc, string nHCC_Codes)
        {
            var project_idParameter = project_id.HasValue ?
                new ObjectParameter("Project_id", project_id) :
                new ObjectParameter("Project_id", typeof(int));
    
            var project_DescParameter = project_Desc != null ?
                new ObjectParameter("Project_Desc", project_Desc) :
                new ObjectParameter("Project_Desc", typeof(string));
    
            var nHCC_CodesParameter = nHCC_Codes != null ?
                new ObjectParameter("NHCC_Codes", nHCC_Codes) :
                new ObjectParameter("NHCC_Codes", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spProjectsUpdate", project_idParameter, project_DescParameter, nHCC_CodesParameter);
        }
    
        public virtual int spProperty_PaymentDelete(Nullable<int> project_Code, Nullable<int> offerNo, string volume, Nullable<int> folio, string payment_Ref_No)
        {
            var project_CodeParameter = project_Code.HasValue ?
                new ObjectParameter("Project_Code", project_Code) :
                new ObjectParameter("Project_Code", typeof(int));
    
            var offerNoParameter = offerNo.HasValue ?
                new ObjectParameter("OfferNo", offerNo) :
                new ObjectParameter("OfferNo", typeof(int));
    
            var volumeParameter = volume != null ?
                new ObjectParameter("Volume", volume) :
                new ObjectParameter("Volume", typeof(string));
    
            var folioParameter = folio.HasValue ?
                new ObjectParameter("Folio", folio) :
                new ObjectParameter("Folio", typeof(int));
    
            var payment_Ref_NoParameter = payment_Ref_No != null ?
                new ObjectParameter("Payment_Ref_No", payment_Ref_No) :
                new ObjectParameter("Payment_Ref_No", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spProperty_PaymentDelete", project_CodeParameter, offerNoParameter, volumeParameter, folioParameter, payment_Ref_NoParameter);
        }
    
        public virtual ObjectResult<spProperty_PaymentGetAll_Result> spProperty_PaymentGetAll(Nullable<int> project_Code, Nullable<int> offerNo, string volume, Nullable<int> folio, string payment_Ref_No)
        {
            var project_CodeParameter = project_Code.HasValue ?
                new ObjectParameter("Project_Code", project_Code) :
                new ObjectParameter("Project_Code", typeof(int));
    
            var offerNoParameter = offerNo.HasValue ?
                new ObjectParameter("OfferNo", offerNo) :
                new ObjectParameter("OfferNo", typeof(int));
    
            var volumeParameter = volume != null ?
                new ObjectParameter("Volume", volume) :
                new ObjectParameter("Volume", typeof(string));
    
            var folioParameter = folio.HasValue ?
                new ObjectParameter("Folio", folio) :
                new ObjectParameter("Folio", typeof(int));
    
            var payment_Ref_NoParameter = payment_Ref_No != null ?
                new ObjectParameter("Payment_Ref_No", payment_Ref_No) :
                new ObjectParameter("Payment_Ref_No", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spProperty_PaymentGetAll_Result>("spProperty_PaymentGetAll", project_CodeParameter, offerNoParameter, volumeParameter, folioParameter, payment_Ref_NoParameter);
        }
    
        public virtual int spProperty_PaymentGetByKey(Nullable<int> project_Code, Nullable<int> offerNo, string volume, Nullable<int> folio, string payment_Ref_No, ObjectParameter title_Reference, ObjectParameter pay_Date, ObjectParameter payMethodCode, ObjectParameter amountPaid, ObjectParameter payment_Details, ObjectParameter grroundRent, ObjectParameter propertyRates, ObjectParameter newDataAudit, ObjectParameter editDataAudit, ObjectParameter added_By, ObjectParameter added_Date, ObjectParameter edited_By, ObjectParameter edited_Date)
        {
            var project_CodeParameter = project_Code.HasValue ?
                new ObjectParameter("Project_Code", project_Code) :
                new ObjectParameter("Project_Code", typeof(int));
    
            var offerNoParameter = offerNo.HasValue ?
                new ObjectParameter("OfferNo", offerNo) :
                new ObjectParameter("OfferNo", typeof(int));
    
            var volumeParameter = volume != null ?
                new ObjectParameter("Volume", volume) :
                new ObjectParameter("Volume", typeof(string));
    
            var folioParameter = folio.HasValue ?
                new ObjectParameter("Folio", folio) :
                new ObjectParameter("Folio", typeof(int));
    
            var payment_Ref_NoParameter = payment_Ref_No != null ?
                new ObjectParameter("Payment_Ref_No", payment_Ref_No) :
                new ObjectParameter("Payment_Ref_No", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spProperty_PaymentGetByKey", project_CodeParameter, offerNoParameter, volumeParameter, folioParameter, payment_Ref_NoParameter, title_Reference, pay_Date, payMethodCode, amountPaid, payment_Details, grroundRent, propertyRates, newDataAudit, editDataAudit, added_By, added_Date, edited_By, edited_Date);
        }
    
        public virtual int spProperty_PaymentInsert(Nullable<int> project_Code, Nullable<int> offerNo, string volume, Nullable<int> folio, string payment_Ref_No, string title_Reference, Nullable<System.DateTime> pay_Date, Nullable<byte> payMethodCode, Nullable<int> amountPaid, string payment_Details, Nullable<decimal> grroundRent, Nullable<decimal> propertyRates, string newDataAudit, string editDataAudit, string added_By, Nullable<System.DateTime> added_Date, string edited_By, Nullable<System.DateTime> edited_Date)
        {
            var project_CodeParameter = project_Code.HasValue ?
                new ObjectParameter("Project_Code", project_Code) :
                new ObjectParameter("Project_Code", typeof(int));
    
            var offerNoParameter = offerNo.HasValue ?
                new ObjectParameter("OfferNo", offerNo) :
                new ObjectParameter("OfferNo", typeof(int));
    
            var volumeParameter = volume != null ?
                new ObjectParameter("Volume", volume) :
                new ObjectParameter("Volume", typeof(string));
    
            var folioParameter = folio.HasValue ?
                new ObjectParameter("Folio", folio) :
                new ObjectParameter("Folio", typeof(int));
    
            var payment_Ref_NoParameter = payment_Ref_No != null ?
                new ObjectParameter("Payment_Ref_No", payment_Ref_No) :
                new ObjectParameter("Payment_Ref_No", typeof(string));
    
            var title_ReferenceParameter = title_Reference != null ?
                new ObjectParameter("Title_Reference", title_Reference) :
                new ObjectParameter("Title_Reference", typeof(string));
    
            var pay_DateParameter = pay_Date.HasValue ?
                new ObjectParameter("Pay_Date", pay_Date) :
                new ObjectParameter("Pay_Date", typeof(System.DateTime));
    
            var payMethodCodeParameter = payMethodCode.HasValue ?
                new ObjectParameter("PayMethodCode", payMethodCode) :
                new ObjectParameter("PayMethodCode", typeof(byte));
    
            var amountPaidParameter = amountPaid.HasValue ?
                new ObjectParameter("AmountPaid", amountPaid) :
                new ObjectParameter("AmountPaid", typeof(int));
    
            var payment_DetailsParameter = payment_Details != null ?
                new ObjectParameter("Payment_Details", payment_Details) :
                new ObjectParameter("Payment_Details", typeof(string));
    
            var grroundRentParameter = grroundRent.HasValue ?
                new ObjectParameter("GrroundRent", grroundRent) :
                new ObjectParameter("GrroundRent", typeof(decimal));
    
            var propertyRatesParameter = propertyRates.HasValue ?
                new ObjectParameter("PropertyRates", propertyRates) :
                new ObjectParameter("PropertyRates", typeof(decimal));
    
            var newDataAuditParameter = newDataAudit != null ?
                new ObjectParameter("NewDataAudit", newDataAudit) :
                new ObjectParameter("NewDataAudit", typeof(string));
    
            var editDataAuditParameter = editDataAudit != null ?
                new ObjectParameter("EditDataAudit", editDataAudit) :
                new ObjectParameter("EditDataAudit", typeof(string));
    
            var added_ByParameter = added_By != null ?
                new ObjectParameter("Added_By", added_By) :
                new ObjectParameter("Added_By", typeof(string));
    
            var added_DateParameter = added_Date.HasValue ?
                new ObjectParameter("Added_Date", added_Date) :
                new ObjectParameter("Added_Date", typeof(System.DateTime));
    
            var edited_ByParameter = edited_By != null ?
                new ObjectParameter("Edited_By", edited_By) :
                new ObjectParameter("Edited_By", typeof(string));
    
            var edited_DateParameter = edited_Date.HasValue ?
                new ObjectParameter("Edited_Date", edited_Date) :
                new ObjectParameter("Edited_Date", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spProperty_PaymentInsert", project_CodeParameter, offerNoParameter, volumeParameter, folioParameter, payment_Ref_NoParameter, title_ReferenceParameter, pay_DateParameter, payMethodCodeParameter, amountPaidParameter, payment_DetailsParameter, grroundRentParameter, propertyRatesParameter, newDataAuditParameter, editDataAuditParameter, added_ByParameter, added_DateParameter, edited_ByParameter, edited_DateParameter);
        }
    
        public virtual int spProperty_PaymentUpdate(Nullable<int> project_Code, Nullable<int> offerNo, string volume, Nullable<int> folio, string payment_Ref_No, string title_Reference, Nullable<System.DateTime> pay_Date, Nullable<byte> payMethodCode, Nullable<int> amountPaid, string payment_Details, Nullable<decimal> grroundRent, Nullable<decimal> propertyRates, string newDataAudit, string editDataAudit, string added_By, Nullable<System.DateTime> added_Date, string edited_By, Nullable<System.DateTime> edited_Date)
        {
            var project_CodeParameter = project_Code.HasValue ?
                new ObjectParameter("Project_Code", project_Code) :
                new ObjectParameter("Project_Code", typeof(int));
    
            var offerNoParameter = offerNo.HasValue ?
                new ObjectParameter("OfferNo", offerNo) :
                new ObjectParameter("OfferNo", typeof(int));
    
            var volumeParameter = volume != null ?
                new ObjectParameter("Volume", volume) :
                new ObjectParameter("Volume", typeof(string));
    
            var folioParameter = folio.HasValue ?
                new ObjectParameter("Folio", folio) :
                new ObjectParameter("Folio", typeof(int));
    
            var payment_Ref_NoParameter = payment_Ref_No != null ?
                new ObjectParameter("Payment_Ref_No", payment_Ref_No) :
                new ObjectParameter("Payment_Ref_No", typeof(string));
    
            var title_ReferenceParameter = title_Reference != null ?
                new ObjectParameter("Title_Reference", title_Reference) :
                new ObjectParameter("Title_Reference", typeof(string));
    
            var pay_DateParameter = pay_Date.HasValue ?
                new ObjectParameter("Pay_Date", pay_Date) :
                new ObjectParameter("Pay_Date", typeof(System.DateTime));
    
            var payMethodCodeParameter = payMethodCode.HasValue ?
                new ObjectParameter("PayMethodCode", payMethodCode) :
                new ObjectParameter("PayMethodCode", typeof(byte));
    
            var amountPaidParameter = amountPaid.HasValue ?
                new ObjectParameter("AmountPaid", amountPaid) :
                new ObjectParameter("AmountPaid", typeof(int));
    
            var payment_DetailsParameter = payment_Details != null ?
                new ObjectParameter("Payment_Details", payment_Details) :
                new ObjectParameter("Payment_Details", typeof(string));
    
            var grroundRentParameter = grroundRent.HasValue ?
                new ObjectParameter("GrroundRent", grroundRent) :
                new ObjectParameter("GrroundRent", typeof(decimal));
    
            var propertyRatesParameter = propertyRates.HasValue ?
                new ObjectParameter("PropertyRates", propertyRates) :
                new ObjectParameter("PropertyRates", typeof(decimal));
    
            var newDataAuditParameter = newDataAudit != null ?
                new ObjectParameter("NewDataAudit", newDataAudit) :
                new ObjectParameter("NewDataAudit", typeof(string));
    
            var editDataAuditParameter = editDataAudit != null ?
                new ObjectParameter("EditDataAudit", editDataAudit) :
                new ObjectParameter("EditDataAudit", typeof(string));
    
            var added_ByParameter = added_By != null ?
                new ObjectParameter("Added_By", added_By) :
                new ObjectParameter("Added_By", typeof(string));
    
            var added_DateParameter = added_Date.HasValue ?
                new ObjectParameter("Added_Date", added_Date) :
                new ObjectParameter("Added_Date", typeof(System.DateTime));
    
            var edited_ByParameter = edited_By != null ?
                new ObjectParameter("Edited_By", edited_By) :
                new ObjectParameter("Edited_By", typeof(string));
    
            var edited_DateParameter = edited_Date.HasValue ?
                new ObjectParameter("Edited_Date", edited_Date) :
                new ObjectParameter("Edited_Date", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spProperty_PaymentUpdate", project_CodeParameter, offerNoParameter, volumeParameter, folioParameter, payment_Ref_NoParameter, title_ReferenceParameter, pay_DateParameter, payMethodCodeParameter, amountPaidParameter, payment_DetailsParameter, grroundRentParameter, propertyRatesParameter, newDataAuditParameter, editDataAuditParameter, added_ByParameter, added_DateParameter, edited_ByParameter, edited_DateParameter);
        }
    
        public virtual int spPropertyApplicantsDelete(string client_ID)
        {
            var client_IDParameter = client_ID != null ?
                new ObjectParameter("Client_ID", client_ID) :
                new ObjectParameter("Client_ID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spPropertyApplicantsDelete", client_IDParameter);
        }
    
        public virtual ObjectResult<spPropertyApplicantsGetAll_Result> spPropertyApplicantsGetAll(string client_ID, string clientName)
        {
            var client_IDParameter = client_ID != null ?
                new ObjectParameter("Client_ID", client_ID) :
                new ObjectParameter("Client_ID", typeof(string));
    
            var clientNameParameter = clientName != null ?
                new ObjectParameter("ClientName", clientName) :
                new ObjectParameter("ClientName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spPropertyApplicantsGetAll_Result>("spPropertyApplicantsGetAll", client_IDParameter, clientNameParameter);
        }
    
        public virtual int spPropertyApplicantsGetByKey(string client_ID, ObjectParameter clientName, ObjectParameter nationality, ObjectParameter physicalAddress, ObjectParameter postalAddress, ObjectParameter emailAddress, ObjectParameter office_Tel, ObjectParameter home_Tel, ObjectParameter mobile_Tel, ObjectParameter iD_Number, ObjectParameter addedBy, ObjectParameter dateAdded, ObjectParameter editedBy, ObjectParameter dateEdited, ObjectParameter isRecordValid, ObjectParameter iD_Type)
        {
            var client_IDParameter = client_ID != null ?
                new ObjectParameter("Client_ID", client_ID) :
                new ObjectParameter("Client_ID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spPropertyApplicantsGetByKey", client_IDParameter, clientName, nationality, physicalAddress, postalAddress, emailAddress, office_Tel, home_Tel, mobile_Tel, iD_Number, addedBy, dateAdded, editedBy, dateEdited, isRecordValid, iD_Type);
        }
    
        public virtual int spPropertyApplicantsInsert(string client_ID, string clientName, Nullable<int> nationality, string physicalAddress, string postalAddress, string emailAddress, string office_Tel, string home_Tel, string mobile_Tel, byte[] passportPhoto, string iD_Number, string addedBy, Nullable<System.DateTime> dateAdded, string editedBy, Nullable<System.DateTime> dateEdited, Nullable<bool> isRecordValid, Nullable<int> iD_Type)
        {
            var client_IDParameter = client_ID != null ?
                new ObjectParameter("Client_ID", client_ID) :
                new ObjectParameter("Client_ID", typeof(string));
    
            var clientNameParameter = clientName != null ?
                new ObjectParameter("ClientName", clientName) :
                new ObjectParameter("ClientName", typeof(string));
    
            var nationalityParameter = nationality.HasValue ?
                new ObjectParameter("Nationality", nationality) :
                new ObjectParameter("Nationality", typeof(int));
    
            var physicalAddressParameter = physicalAddress != null ?
                new ObjectParameter("PhysicalAddress", physicalAddress) :
                new ObjectParameter("PhysicalAddress", typeof(string));
    
            var postalAddressParameter = postalAddress != null ?
                new ObjectParameter("PostalAddress", postalAddress) :
                new ObjectParameter("PostalAddress", typeof(string));
    
            var emailAddressParameter = emailAddress != null ?
                new ObjectParameter("EmailAddress", emailAddress) :
                new ObjectParameter("EmailAddress", typeof(string));
    
            var office_TelParameter = office_Tel != null ?
                new ObjectParameter("Office_Tel", office_Tel) :
                new ObjectParameter("Office_Tel", typeof(string));
    
            var home_TelParameter = home_Tel != null ?
                new ObjectParameter("Home_Tel", home_Tel) :
                new ObjectParameter("Home_Tel", typeof(string));
    
            var mobile_TelParameter = mobile_Tel != null ?
                new ObjectParameter("Mobile_Tel", mobile_Tel) :
                new ObjectParameter("Mobile_Tel", typeof(string));
    
            var passportPhotoParameter = passportPhoto != null ?
                new ObjectParameter("PassportPhoto", passportPhoto) :
                new ObjectParameter("PassportPhoto", typeof(byte[]));
    
            var iD_NumberParameter = iD_Number != null ?
                new ObjectParameter("ID_Number", iD_Number) :
                new ObjectParameter("ID_Number", typeof(string));
    
            var addedByParameter = addedBy != null ?
                new ObjectParameter("AddedBy", addedBy) :
                new ObjectParameter("AddedBy", typeof(string));
    
            var dateAddedParameter = dateAdded.HasValue ?
                new ObjectParameter("DateAdded", dateAdded) :
                new ObjectParameter("DateAdded", typeof(System.DateTime));
    
            var editedByParameter = editedBy != null ?
                new ObjectParameter("EditedBy", editedBy) :
                new ObjectParameter("EditedBy", typeof(string));
    
            var dateEditedParameter = dateEdited.HasValue ?
                new ObjectParameter("DateEdited", dateEdited) :
                new ObjectParameter("DateEdited", typeof(System.DateTime));
    
            var isRecordValidParameter = isRecordValid.HasValue ?
                new ObjectParameter("IsRecordValid", isRecordValid) :
                new ObjectParameter("IsRecordValid", typeof(bool));
    
            var iD_TypeParameter = iD_Type.HasValue ?
                new ObjectParameter("ID_Type", iD_Type) :
                new ObjectParameter("ID_Type", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spPropertyApplicantsInsert", client_IDParameter, clientNameParameter, nationalityParameter, physicalAddressParameter, postalAddressParameter, emailAddressParameter, office_TelParameter, home_TelParameter, mobile_TelParameter, passportPhotoParameter, iD_NumberParameter, addedByParameter, dateAddedParameter, editedByParameter, dateEditedParameter, isRecordValidParameter, iD_TypeParameter);
        }
    
        public virtual int spPropertyApplicantsUpdate(string client_ID, string clientName, Nullable<int> nationality, string physicalAddress, string postalAddress, string emailAddress, string office_Tel, string home_Tel, string mobile_Tel, byte[] passportPhoto, string iD_Number, string addedBy, Nullable<System.DateTime> dateAdded, string editedBy, Nullable<System.DateTime> dateEdited, Nullable<bool> isRecordValid, Nullable<int> iD_Type)
        {
            var client_IDParameter = client_ID != null ?
                new ObjectParameter("Client_ID", client_ID) :
                new ObjectParameter("Client_ID", typeof(string));
    
            var clientNameParameter = clientName != null ?
                new ObjectParameter("ClientName", clientName) :
                new ObjectParameter("ClientName", typeof(string));
    
            var nationalityParameter = nationality.HasValue ?
                new ObjectParameter("Nationality", nationality) :
                new ObjectParameter("Nationality", typeof(int));
    
            var physicalAddressParameter = physicalAddress != null ?
                new ObjectParameter("PhysicalAddress", physicalAddress) :
                new ObjectParameter("PhysicalAddress", typeof(string));
    
            var postalAddressParameter = postalAddress != null ?
                new ObjectParameter("PostalAddress", postalAddress) :
                new ObjectParameter("PostalAddress", typeof(string));
    
            var emailAddressParameter = emailAddress != null ?
                new ObjectParameter("EmailAddress", emailAddress) :
                new ObjectParameter("EmailAddress", typeof(string));
    
            var office_TelParameter = office_Tel != null ?
                new ObjectParameter("Office_Tel", office_Tel) :
                new ObjectParameter("Office_Tel", typeof(string));
    
            var home_TelParameter = home_Tel != null ?
                new ObjectParameter("Home_Tel", home_Tel) :
                new ObjectParameter("Home_Tel", typeof(string));
    
            var mobile_TelParameter = mobile_Tel != null ?
                new ObjectParameter("Mobile_Tel", mobile_Tel) :
                new ObjectParameter("Mobile_Tel", typeof(string));
    
            var passportPhotoParameter = passportPhoto != null ?
                new ObjectParameter("PassportPhoto", passportPhoto) :
                new ObjectParameter("PassportPhoto", typeof(byte[]));
    
            var iD_NumberParameter = iD_Number != null ?
                new ObjectParameter("ID_Number", iD_Number) :
                new ObjectParameter("ID_Number", typeof(string));
    
            var addedByParameter = addedBy != null ?
                new ObjectParameter("AddedBy", addedBy) :
                new ObjectParameter("AddedBy", typeof(string));
    
            var dateAddedParameter = dateAdded.HasValue ?
                new ObjectParameter("DateAdded", dateAdded) :
                new ObjectParameter("DateAdded", typeof(System.DateTime));
    
            var editedByParameter = editedBy != null ?
                new ObjectParameter("EditedBy", editedBy) :
                new ObjectParameter("EditedBy", typeof(string));
    
            var dateEditedParameter = dateEdited.HasValue ?
                new ObjectParameter("DateEdited", dateEdited) :
                new ObjectParameter("DateEdited", typeof(System.DateTime));
    
            var isRecordValidParameter = isRecordValid.HasValue ?
                new ObjectParameter("IsRecordValid", isRecordValid) :
                new ObjectParameter("IsRecordValid", typeof(bool));
    
            var iD_TypeParameter = iD_Type.HasValue ?
                new ObjectParameter("ID_Type", iD_Type) :
                new ObjectParameter("ID_Type", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spPropertyApplicantsUpdate", client_IDParameter, clientNameParameter, nationalityParameter, physicalAddressParameter, postalAddressParameter, emailAddressParameter, office_TelParameter, home_TelParameter, mobile_TelParameter, passportPhotoParameter, iD_NumberParameter, addedByParameter, dateAddedParameter, editedByParameter, dateEditedParameter, isRecordValidParameter, iD_TypeParameter);
        }
    
        public virtual int spPropertyApplicationDetailsDelete(string referenceNumber)
        {
            var referenceNumberParameter = referenceNumber != null ?
                new ObjectParameter("ReferenceNumber", referenceNumber) :
                new ObjectParameter("ReferenceNumber", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spPropertyApplicationDetailsDelete", referenceNumberParameter);
        }
    
        public virtual ObjectResult<spPropertyApplicationDetailsGetAll_Result> spPropertyApplicationDetailsGetAll(string referenceNumber)
        {
            var referenceNumberParameter = referenceNumber != null ?
                new ObjectParameter("ReferenceNumber", referenceNumber) :
                new ObjectParameter("ReferenceNumber", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spPropertyApplicationDetailsGetAll_Result>("spPropertyApplicationDetailsGetAll", referenceNumberParameter);
        }
    
        public virtual int spPropertyApplicationDetailsGetByKey(string referenceNumber, ObjectParameter project_code, ObjectParameter plotNo, ObjectParameter blockNo, ObjectParameter house_Flat_No, ObjectParameter unitNo, ObjectParameter volume, ObjectParameter folio, ObjectParameter numberOfRooms, ObjectParameter title_Reference, ObjectParameter applicationAccepted, ObjectParameter applicationRemarks, ObjectParameter applicationDate, ObjectParameter dateApplicationRecieved, ObjectParameter offerAccepted, ObjectParameter offerDate, ObjectParameter houseOfferPrice, ObjectParameter amountPaidOnOfferAcceptance, ObjectParameter offerAcceptanceOrRejectionDate, ObjectParameter offerExpiryDate, ObjectParameter offerWithdrawn, ObjectParameter offerAcceptanceOrRejectionReason, ObjectParameter reasonForWithdrawal, ObjectParameter dateOfOfferWithdrawal, ObjectParameter paymentTerms, ObjectParameter titleTransferred, ObjectParameter dateOfTitleTransfer, ObjectParameter commitmentFeePaid, ObjectParameter amountOfCommitmentFeePaid, ObjectParameter salesAndMarketingManager, ObjectParameter chiefCommercialOfficer, ObjectParameter addedBy, ObjectParameter dateAdded, ObjectParameter editedBy, ObjectParameter dateEdited, ObjectParameter isRecordValid)
        {
            var referenceNumberParameter = referenceNumber != null ?
                new ObjectParameter("ReferenceNumber", referenceNumber) :
                new ObjectParameter("ReferenceNumber", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spPropertyApplicationDetailsGetByKey", referenceNumberParameter, project_code, plotNo, blockNo, house_Flat_No, unitNo, volume, folio, numberOfRooms, title_Reference, applicationAccepted, applicationRemarks, applicationDate, dateApplicationRecieved, offerAccepted, offerDate, houseOfferPrice, amountPaidOnOfferAcceptance, offerAcceptanceOrRejectionDate, offerExpiryDate, offerWithdrawn, offerAcceptanceOrRejectionReason, reasonForWithdrawal, dateOfOfferWithdrawal, paymentTerms, titleTransferred, dateOfTitleTransfer, commitmentFeePaid, amountOfCommitmentFeePaid, salesAndMarketingManager, chiefCommercialOfficer, addedBy, dateAdded, editedBy, dateEdited, isRecordValid);
        }
    
        public virtual int spPropertyApplicationDetailsInsert(string referenceNumber, Nullable<int> project_code, string plotNo, string blockNo, string house_Flat_No, string unitNo, string volume, Nullable<int> folio, Nullable<int> numberOfRooms, string title_Reference, Nullable<bool> applicationAccepted, string applicationRemarks, Nullable<System.DateTime> applicationDate, Nullable<System.DateTime> dateApplicationRecieved, Nullable<bool> offerAccepted, Nullable<System.DateTime> offerDate, Nullable<int> houseOfferPrice, Nullable<int> amountPaidOnOfferAcceptance, Nullable<System.DateTime> offerAcceptanceOrRejectionDate, Nullable<System.DateTime> offerExpiryDate, Nullable<bool> offerWithdrawn, string offerAcceptanceOrRejectionReason, string reasonForWithdrawal, Nullable<System.DateTime> dateOfOfferWithdrawal, Nullable<int> paymentTerms, Nullable<bool> titleTransferred, Nullable<System.DateTime> dateOfTitleTransfer, Nullable<bool> commitmentFeePaid, Nullable<int> amountOfCommitmentFeePaid, Nullable<int> salesAndMarketingManager, Nullable<int> chiefCommercialOfficer, string addedBy, Nullable<System.DateTime> dateAdded, string editedBy, Nullable<System.DateTime> dateEdited, Nullable<bool> isRecordValid)
        {
            var referenceNumberParameter = referenceNumber != null ?
                new ObjectParameter("ReferenceNumber", referenceNumber) :
                new ObjectParameter("ReferenceNumber", typeof(string));
    
            var project_codeParameter = project_code.HasValue ?
                new ObjectParameter("Project_code", project_code) :
                new ObjectParameter("Project_code", typeof(int));
    
            var plotNoParameter = plotNo != null ?
                new ObjectParameter("PlotNo", plotNo) :
                new ObjectParameter("PlotNo", typeof(string));
    
            var blockNoParameter = blockNo != null ?
                new ObjectParameter("BlockNo", blockNo) :
                new ObjectParameter("BlockNo", typeof(string));
    
            var house_Flat_NoParameter = house_Flat_No != null ?
                new ObjectParameter("House_Flat_No", house_Flat_No) :
                new ObjectParameter("House_Flat_No", typeof(string));
    
            var unitNoParameter = unitNo != null ?
                new ObjectParameter("UnitNo", unitNo) :
                new ObjectParameter("UnitNo", typeof(string));
    
            var volumeParameter = volume != null ?
                new ObjectParameter("Volume", volume) :
                new ObjectParameter("Volume", typeof(string));
    
            var folioParameter = folio.HasValue ?
                new ObjectParameter("Folio", folio) :
                new ObjectParameter("Folio", typeof(int));
    
            var numberOfRoomsParameter = numberOfRooms.HasValue ?
                new ObjectParameter("NumberOfRooms", numberOfRooms) :
                new ObjectParameter("NumberOfRooms", typeof(int));
    
            var title_ReferenceParameter = title_Reference != null ?
                new ObjectParameter("Title_Reference", title_Reference) :
                new ObjectParameter("Title_Reference", typeof(string));
    
            var applicationAcceptedParameter = applicationAccepted.HasValue ?
                new ObjectParameter("ApplicationAccepted", applicationAccepted) :
                new ObjectParameter("ApplicationAccepted", typeof(bool));
    
            var applicationRemarksParameter = applicationRemarks != null ?
                new ObjectParameter("ApplicationRemarks", applicationRemarks) :
                new ObjectParameter("ApplicationRemarks", typeof(string));
    
            var applicationDateParameter = applicationDate.HasValue ?
                new ObjectParameter("ApplicationDate", applicationDate) :
                new ObjectParameter("ApplicationDate", typeof(System.DateTime));
    
            var dateApplicationRecievedParameter = dateApplicationRecieved.HasValue ?
                new ObjectParameter("DateApplicationRecieved", dateApplicationRecieved) :
                new ObjectParameter("DateApplicationRecieved", typeof(System.DateTime));
    
            var offerAcceptedParameter = offerAccepted.HasValue ?
                new ObjectParameter("OfferAccepted", offerAccepted) :
                new ObjectParameter("OfferAccepted", typeof(bool));
    
            var offerDateParameter = offerDate.HasValue ?
                new ObjectParameter("OfferDate", offerDate) :
                new ObjectParameter("OfferDate", typeof(System.DateTime));
    
            var houseOfferPriceParameter = houseOfferPrice.HasValue ?
                new ObjectParameter("HouseOfferPrice", houseOfferPrice) :
                new ObjectParameter("HouseOfferPrice", typeof(int));
    
            var amountPaidOnOfferAcceptanceParameter = amountPaidOnOfferAcceptance.HasValue ?
                new ObjectParameter("AmountPaidOnOfferAcceptance", amountPaidOnOfferAcceptance) :
                new ObjectParameter("AmountPaidOnOfferAcceptance", typeof(int));
    
            var offerAcceptanceOrRejectionDateParameter = offerAcceptanceOrRejectionDate.HasValue ?
                new ObjectParameter("OfferAcceptanceOrRejectionDate", offerAcceptanceOrRejectionDate) :
                new ObjectParameter("OfferAcceptanceOrRejectionDate", typeof(System.DateTime));
    
            var offerExpiryDateParameter = offerExpiryDate.HasValue ?
                new ObjectParameter("OfferExpiryDate", offerExpiryDate) :
                new ObjectParameter("OfferExpiryDate", typeof(System.DateTime));
    
            var offerWithdrawnParameter = offerWithdrawn.HasValue ?
                new ObjectParameter("OfferWithdrawn", offerWithdrawn) :
                new ObjectParameter("OfferWithdrawn", typeof(bool));
    
            var offerAcceptanceOrRejectionReasonParameter = offerAcceptanceOrRejectionReason != null ?
                new ObjectParameter("OfferAcceptanceOrRejectionReason", offerAcceptanceOrRejectionReason) :
                new ObjectParameter("OfferAcceptanceOrRejectionReason", typeof(string));
    
            var reasonForWithdrawalParameter = reasonForWithdrawal != null ?
                new ObjectParameter("ReasonForWithdrawal", reasonForWithdrawal) :
                new ObjectParameter("ReasonForWithdrawal", typeof(string));
    
            var dateOfOfferWithdrawalParameter = dateOfOfferWithdrawal.HasValue ?
                new ObjectParameter("DateOfOfferWithdrawal", dateOfOfferWithdrawal) :
                new ObjectParameter("DateOfOfferWithdrawal", typeof(System.DateTime));
    
            var paymentTermsParameter = paymentTerms.HasValue ?
                new ObjectParameter("PaymentTerms", paymentTerms) :
                new ObjectParameter("PaymentTerms", typeof(int));
    
            var titleTransferredParameter = titleTransferred.HasValue ?
                new ObjectParameter("TitleTransferred", titleTransferred) :
                new ObjectParameter("TitleTransferred", typeof(bool));
    
            var dateOfTitleTransferParameter = dateOfTitleTransfer.HasValue ?
                new ObjectParameter("DateOfTitleTransfer", dateOfTitleTransfer) :
                new ObjectParameter("DateOfTitleTransfer", typeof(System.DateTime));
    
            var commitmentFeePaidParameter = commitmentFeePaid.HasValue ?
                new ObjectParameter("CommitmentFeePaid", commitmentFeePaid) :
                new ObjectParameter("CommitmentFeePaid", typeof(bool));
    
            var amountOfCommitmentFeePaidParameter = amountOfCommitmentFeePaid.HasValue ?
                new ObjectParameter("AmountOfCommitmentFeePaid", amountOfCommitmentFeePaid) :
                new ObjectParameter("AmountOfCommitmentFeePaid", typeof(int));
    
            var salesAndMarketingManagerParameter = salesAndMarketingManager.HasValue ?
                new ObjectParameter("SalesAndMarketingManager", salesAndMarketingManager) :
                new ObjectParameter("SalesAndMarketingManager", typeof(int));
    
            var chiefCommercialOfficerParameter = chiefCommercialOfficer.HasValue ?
                new ObjectParameter("ChiefCommercialOfficer", chiefCommercialOfficer) :
                new ObjectParameter("ChiefCommercialOfficer", typeof(int));
    
            var addedByParameter = addedBy != null ?
                new ObjectParameter("AddedBy", addedBy) :
                new ObjectParameter("AddedBy", typeof(string));
    
            var dateAddedParameter = dateAdded.HasValue ?
                new ObjectParameter("DateAdded", dateAdded) :
                new ObjectParameter("DateAdded", typeof(System.DateTime));
    
            var editedByParameter = editedBy != null ?
                new ObjectParameter("EditedBy", editedBy) :
                new ObjectParameter("EditedBy", typeof(string));
    
            var dateEditedParameter = dateEdited.HasValue ?
                new ObjectParameter("DateEdited", dateEdited) :
                new ObjectParameter("DateEdited", typeof(System.DateTime));
    
            var isRecordValidParameter = isRecordValid.HasValue ?
                new ObjectParameter("IsRecordValid", isRecordValid) :
                new ObjectParameter("IsRecordValid", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spPropertyApplicationDetailsInsert", referenceNumberParameter, project_codeParameter, plotNoParameter, blockNoParameter, house_Flat_NoParameter, unitNoParameter, volumeParameter, folioParameter, numberOfRoomsParameter, title_ReferenceParameter, applicationAcceptedParameter, applicationRemarksParameter, applicationDateParameter, dateApplicationRecievedParameter, offerAcceptedParameter, offerDateParameter, houseOfferPriceParameter, amountPaidOnOfferAcceptanceParameter, offerAcceptanceOrRejectionDateParameter, offerExpiryDateParameter, offerWithdrawnParameter, offerAcceptanceOrRejectionReasonParameter, reasonForWithdrawalParameter, dateOfOfferWithdrawalParameter, paymentTermsParameter, titleTransferredParameter, dateOfTitleTransferParameter, commitmentFeePaidParameter, amountOfCommitmentFeePaidParameter, salesAndMarketingManagerParameter, chiefCommercialOfficerParameter, addedByParameter, dateAddedParameter, editedByParameter, dateEditedParameter, isRecordValidParameter);
        }
    
        public virtual int spPropertyApplicationDetailsUpdate(string referenceNumber, Nullable<int> project_code, string plotNo, string blockNo, string house_Flat_No, string unitNo, string volume, Nullable<int> folio, Nullable<int> numberOfRooms, string title_Reference, Nullable<bool> applicationAccepted, string applicationRemarks, Nullable<System.DateTime> applicationDate, Nullable<System.DateTime> dateApplicationRecieved, Nullable<bool> offerAccepted, Nullable<System.DateTime> offerDate, Nullable<int> houseOfferPrice, Nullable<int> amountPaidOnOfferAcceptance, Nullable<System.DateTime> offerAcceptanceOrRejectionDate, Nullable<System.DateTime> offerExpiryDate, Nullable<bool> offerWithdrawn, string offerAcceptanceOrRejectionReason, string reasonForWithdrawal, Nullable<System.DateTime> dateOfOfferWithdrawal, Nullable<int> paymentTerms, Nullable<bool> titleTransferred, Nullable<System.DateTime> dateOfTitleTransfer, Nullable<bool> commitmentFeePaid, Nullable<int> amountOfCommitmentFeePaid, Nullable<int> salesAndMarketingManager, Nullable<int> chiefCommercialOfficer, string addedBy, Nullable<System.DateTime> dateAdded, string editedBy, Nullable<System.DateTime> dateEdited, Nullable<bool> isRecordValid)
        {
            var referenceNumberParameter = referenceNumber != null ?
                new ObjectParameter("ReferenceNumber", referenceNumber) :
                new ObjectParameter("ReferenceNumber", typeof(string));
    
            var project_codeParameter = project_code.HasValue ?
                new ObjectParameter("Project_code", project_code) :
                new ObjectParameter("Project_code", typeof(int));
    
            var plotNoParameter = plotNo != null ?
                new ObjectParameter("PlotNo", plotNo) :
                new ObjectParameter("PlotNo", typeof(string));
    
            var blockNoParameter = blockNo != null ?
                new ObjectParameter("BlockNo", blockNo) :
                new ObjectParameter("BlockNo", typeof(string));
    
            var house_Flat_NoParameter = house_Flat_No != null ?
                new ObjectParameter("House_Flat_No", house_Flat_No) :
                new ObjectParameter("House_Flat_No", typeof(string));
    
            var unitNoParameter = unitNo != null ?
                new ObjectParameter("UnitNo", unitNo) :
                new ObjectParameter("UnitNo", typeof(string));
    
            var volumeParameter = volume != null ?
                new ObjectParameter("Volume", volume) :
                new ObjectParameter("Volume", typeof(string));
    
            var folioParameter = folio.HasValue ?
                new ObjectParameter("Folio", folio) :
                new ObjectParameter("Folio", typeof(int));
    
            var numberOfRoomsParameter = numberOfRooms.HasValue ?
                new ObjectParameter("NumberOfRooms", numberOfRooms) :
                new ObjectParameter("NumberOfRooms", typeof(int));
    
            var title_ReferenceParameter = title_Reference != null ?
                new ObjectParameter("Title_Reference", title_Reference) :
                new ObjectParameter("Title_Reference", typeof(string));
    
            var applicationAcceptedParameter = applicationAccepted.HasValue ?
                new ObjectParameter("ApplicationAccepted", applicationAccepted) :
                new ObjectParameter("ApplicationAccepted", typeof(bool));
    
            var applicationRemarksParameter = applicationRemarks != null ?
                new ObjectParameter("ApplicationRemarks", applicationRemarks) :
                new ObjectParameter("ApplicationRemarks", typeof(string));
    
            var applicationDateParameter = applicationDate.HasValue ?
                new ObjectParameter("ApplicationDate", applicationDate) :
                new ObjectParameter("ApplicationDate", typeof(System.DateTime));
    
            var dateApplicationRecievedParameter = dateApplicationRecieved.HasValue ?
                new ObjectParameter("DateApplicationRecieved", dateApplicationRecieved) :
                new ObjectParameter("DateApplicationRecieved", typeof(System.DateTime));
    
            var offerAcceptedParameter = offerAccepted.HasValue ?
                new ObjectParameter("OfferAccepted", offerAccepted) :
                new ObjectParameter("OfferAccepted", typeof(bool));
    
            var offerDateParameter = offerDate.HasValue ?
                new ObjectParameter("OfferDate", offerDate) :
                new ObjectParameter("OfferDate", typeof(System.DateTime));
    
            var houseOfferPriceParameter = houseOfferPrice.HasValue ?
                new ObjectParameter("HouseOfferPrice", houseOfferPrice) :
                new ObjectParameter("HouseOfferPrice", typeof(int));
    
            var amountPaidOnOfferAcceptanceParameter = amountPaidOnOfferAcceptance.HasValue ?
                new ObjectParameter("AmountPaidOnOfferAcceptance", amountPaidOnOfferAcceptance) :
                new ObjectParameter("AmountPaidOnOfferAcceptance", typeof(int));
    
            var offerAcceptanceOrRejectionDateParameter = offerAcceptanceOrRejectionDate.HasValue ?
                new ObjectParameter("OfferAcceptanceOrRejectionDate", offerAcceptanceOrRejectionDate) :
                new ObjectParameter("OfferAcceptanceOrRejectionDate", typeof(System.DateTime));
    
            var offerExpiryDateParameter = offerExpiryDate.HasValue ?
                new ObjectParameter("OfferExpiryDate", offerExpiryDate) :
                new ObjectParameter("OfferExpiryDate", typeof(System.DateTime));
    
            var offerWithdrawnParameter = offerWithdrawn.HasValue ?
                new ObjectParameter("OfferWithdrawn", offerWithdrawn) :
                new ObjectParameter("OfferWithdrawn", typeof(bool));
    
            var offerAcceptanceOrRejectionReasonParameter = offerAcceptanceOrRejectionReason != null ?
                new ObjectParameter("OfferAcceptanceOrRejectionReason", offerAcceptanceOrRejectionReason) :
                new ObjectParameter("OfferAcceptanceOrRejectionReason", typeof(string));
    
            var reasonForWithdrawalParameter = reasonForWithdrawal != null ?
                new ObjectParameter("ReasonForWithdrawal", reasonForWithdrawal) :
                new ObjectParameter("ReasonForWithdrawal", typeof(string));
    
            var dateOfOfferWithdrawalParameter = dateOfOfferWithdrawal.HasValue ?
                new ObjectParameter("DateOfOfferWithdrawal", dateOfOfferWithdrawal) :
                new ObjectParameter("DateOfOfferWithdrawal", typeof(System.DateTime));
    
            var paymentTermsParameter = paymentTerms.HasValue ?
                new ObjectParameter("PaymentTerms", paymentTerms) :
                new ObjectParameter("PaymentTerms", typeof(int));
    
            var titleTransferredParameter = titleTransferred.HasValue ?
                new ObjectParameter("TitleTransferred", titleTransferred) :
                new ObjectParameter("TitleTransferred", typeof(bool));
    
            var dateOfTitleTransferParameter = dateOfTitleTransfer.HasValue ?
                new ObjectParameter("DateOfTitleTransfer", dateOfTitleTransfer) :
                new ObjectParameter("DateOfTitleTransfer", typeof(System.DateTime));
    
            var commitmentFeePaidParameter = commitmentFeePaid.HasValue ?
                new ObjectParameter("CommitmentFeePaid", commitmentFeePaid) :
                new ObjectParameter("CommitmentFeePaid", typeof(bool));
    
            var amountOfCommitmentFeePaidParameter = amountOfCommitmentFeePaid.HasValue ?
                new ObjectParameter("AmountOfCommitmentFeePaid", amountOfCommitmentFeePaid) :
                new ObjectParameter("AmountOfCommitmentFeePaid", typeof(int));
    
            var salesAndMarketingManagerParameter = salesAndMarketingManager.HasValue ?
                new ObjectParameter("SalesAndMarketingManager", salesAndMarketingManager) :
                new ObjectParameter("SalesAndMarketingManager", typeof(int));
    
            var chiefCommercialOfficerParameter = chiefCommercialOfficer.HasValue ?
                new ObjectParameter("ChiefCommercialOfficer", chiefCommercialOfficer) :
                new ObjectParameter("ChiefCommercialOfficer", typeof(int));
    
            var addedByParameter = addedBy != null ?
                new ObjectParameter("AddedBy", addedBy) :
                new ObjectParameter("AddedBy", typeof(string));
    
            var dateAddedParameter = dateAdded.HasValue ?
                new ObjectParameter("DateAdded", dateAdded) :
                new ObjectParameter("DateAdded", typeof(System.DateTime));
    
            var editedByParameter = editedBy != null ?
                new ObjectParameter("EditedBy", editedBy) :
                new ObjectParameter("EditedBy", typeof(string));
    
            var dateEditedParameter = dateEdited.HasValue ?
                new ObjectParameter("DateEdited", dateEdited) :
                new ObjectParameter("DateEdited", typeof(System.DateTime));
    
            var isRecordValidParameter = isRecordValid.HasValue ?
                new ObjectParameter("IsRecordValid", isRecordValid) :
                new ObjectParameter("IsRecordValid", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spPropertyApplicationDetailsUpdate", referenceNumberParameter, project_codeParameter, plotNoParameter, blockNoParameter, house_Flat_NoParameter, unitNoParameter, volumeParameter, folioParameter, numberOfRoomsParameter, title_ReferenceParameter, applicationAcceptedParameter, applicationRemarksParameter, applicationDateParameter, dateApplicationRecievedParameter, offerAcceptedParameter, offerDateParameter, houseOfferPriceParameter, amountPaidOnOfferAcceptanceParameter, offerAcceptanceOrRejectionDateParameter, offerExpiryDateParameter, offerWithdrawnParameter, offerAcceptanceOrRejectionReasonParameter, reasonForWithdrawalParameter, dateOfOfferWithdrawalParameter, paymentTermsParameter, titleTransferredParameter, dateOfTitleTransferParameter, commitmentFeePaidParameter, amountOfCommitmentFeePaidParameter, salesAndMarketingManagerParameter, chiefCommercialOfficerParameter, addedByParameter, dateAddedParameter, editedByParameter, dateEditedParameter, isRecordValidParameter);
        }
    
        public virtual int spPropertyApplicationsDelete(string client_ID, string referenceNumber)
        {
            var client_IDParameter = client_ID != null ?
                new ObjectParameter("Client_ID", client_ID) :
                new ObjectParameter("Client_ID", typeof(string));
    
            var referenceNumberParameter = referenceNumber != null ?
                new ObjectParameter("ReferenceNumber", referenceNumber) :
                new ObjectParameter("ReferenceNumber", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spPropertyApplicationsDelete", client_IDParameter, referenceNumberParameter);
        }
    
        public virtual ObjectResult<spPropertyApplicationsGetAll_Result> spPropertyApplicationsGetAll(string client_ID, string referenceNumber, Nullable<bool> clientWithdrawn)
        {
            var client_IDParameter = client_ID != null ?
                new ObjectParameter("Client_ID", client_ID) :
                new ObjectParameter("Client_ID", typeof(string));
    
            var referenceNumberParameter = referenceNumber != null ?
                new ObjectParameter("ReferenceNumber", referenceNumber) :
                new ObjectParameter("ReferenceNumber", typeof(string));
    
            var clientWithdrawnParameter = clientWithdrawn.HasValue ?
                new ObjectParameter("ClientWithdrawn", clientWithdrawn) :
                new ObjectParameter("ClientWithdrawn", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spPropertyApplicationsGetAll_Result>("spPropertyApplicationsGetAll", client_IDParameter, referenceNumberParameter, clientWithdrawnParameter);
        }
    
        public virtual int spPropertyApplicationsGetByKey(string client_ID, string referenceNumber, ObjectParameter clientWithdrawn, ObjectParameter addedBy, ObjectParameter dateAdded, ObjectParameter editedBy, ObjectParameter dateEdited, ObjectParameter isRecordValid, ObjectParameter notes)
        {
            var client_IDParameter = client_ID != null ?
                new ObjectParameter("Client_ID", client_ID) :
                new ObjectParameter("Client_ID", typeof(string));
    
            var referenceNumberParameter = referenceNumber != null ?
                new ObjectParameter("ReferenceNumber", referenceNumber) :
                new ObjectParameter("ReferenceNumber", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spPropertyApplicationsGetByKey", client_IDParameter, referenceNumberParameter, clientWithdrawn, addedBy, dateAdded, editedBy, dateEdited, isRecordValid, notes);
        }
    
        public virtual int spPropertyApplicationsInsert(string client_ID, string referenceNumber, Nullable<bool> clientWithdrawn, string addedBy, Nullable<System.DateTime> dateAdded, string editedBy, Nullable<System.DateTime> dateEdited, Nullable<bool> isRecordValid, string notes)
        {
            var client_IDParameter = client_ID != null ?
                new ObjectParameter("Client_ID", client_ID) :
                new ObjectParameter("Client_ID", typeof(string));
    
            var referenceNumberParameter = referenceNumber != null ?
                new ObjectParameter("ReferenceNumber", referenceNumber) :
                new ObjectParameter("ReferenceNumber", typeof(string));
    
            var clientWithdrawnParameter = clientWithdrawn.HasValue ?
                new ObjectParameter("ClientWithdrawn", clientWithdrawn) :
                new ObjectParameter("ClientWithdrawn", typeof(bool));
    
            var addedByParameter = addedBy != null ?
                new ObjectParameter("AddedBy", addedBy) :
                new ObjectParameter("AddedBy", typeof(string));
    
            var dateAddedParameter = dateAdded.HasValue ?
                new ObjectParameter("DateAdded", dateAdded) :
                new ObjectParameter("DateAdded", typeof(System.DateTime));
    
            var editedByParameter = editedBy != null ?
                new ObjectParameter("EditedBy", editedBy) :
                new ObjectParameter("EditedBy", typeof(string));
    
            var dateEditedParameter = dateEdited.HasValue ?
                new ObjectParameter("DateEdited", dateEdited) :
                new ObjectParameter("DateEdited", typeof(System.DateTime));
    
            var isRecordValidParameter = isRecordValid.HasValue ?
                new ObjectParameter("IsRecordValid", isRecordValid) :
                new ObjectParameter("IsRecordValid", typeof(bool));
    
            var notesParameter = notes != null ?
                new ObjectParameter("Notes", notes) :
                new ObjectParameter("Notes", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spPropertyApplicationsInsert", client_IDParameter, referenceNumberParameter, clientWithdrawnParameter, addedByParameter, dateAddedParameter, editedByParameter, dateEditedParameter, isRecordValidParameter, notesParameter);
        }
    
        public virtual int spPropertyApplicationsUpdate(string client_ID, string referenceNumber, Nullable<bool> clientWithdrawn, string addedBy, Nullable<System.DateTime> dateAdded, string editedBy, Nullable<System.DateTime> dateEdited, Nullable<bool> isRecordValid, string notes)
        {
            var client_IDParameter = client_ID != null ?
                new ObjectParameter("Client_ID", client_ID) :
                new ObjectParameter("Client_ID", typeof(string));
    
            var referenceNumberParameter = referenceNumber != null ?
                new ObjectParameter("ReferenceNumber", referenceNumber) :
                new ObjectParameter("ReferenceNumber", typeof(string));
    
            var clientWithdrawnParameter = clientWithdrawn.HasValue ?
                new ObjectParameter("ClientWithdrawn", clientWithdrawn) :
                new ObjectParameter("ClientWithdrawn", typeof(bool));
    
            var addedByParameter = addedBy != null ?
                new ObjectParameter("AddedBy", addedBy) :
                new ObjectParameter("AddedBy", typeof(string));
    
            var dateAddedParameter = dateAdded.HasValue ?
                new ObjectParameter("DateAdded", dateAdded) :
                new ObjectParameter("DateAdded", typeof(System.DateTime));
    
            var editedByParameter = editedBy != null ?
                new ObjectParameter("EditedBy", editedBy) :
                new ObjectParameter("EditedBy", typeof(string));
    
            var dateEditedParameter = dateEdited.HasValue ?
                new ObjectParameter("DateEdited", dateEdited) :
                new ObjectParameter("DateEdited", typeof(System.DateTime));
    
            var isRecordValidParameter = isRecordValid.HasValue ?
                new ObjectParameter("IsRecordValid", isRecordValid) :
                new ObjectParameter("IsRecordValid", typeof(bool));
    
            var notesParameter = notes != null ?
                new ObjectParameter("Notes", notes) :
                new ObjectParameter("Notes", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spPropertyApplicationsUpdate", client_IDParameter, referenceNumberParameter, clientWithdrawnParameter, addedByParameter, dateAddedParameter, editedByParameter, dateEditedParameter, isRecordValidParameter, notesParameter);
        }
    
        public virtual int spPropertyOwner(Nullable<byte> landTypeCode)
        {
            var landTypeCodeParameter = landTypeCode.HasValue ?
                new ObjectParameter("LandTypeCode", landTypeCode) :
                new ObjectParameter("LandTypeCode", typeof(byte));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spPropertyOwner", landTypeCodeParameter);
        }
    
        public virtual int spPropertyStatusDelete(Nullable<byte> statusCode)
        {
            var statusCodeParameter = statusCode.HasValue ?
                new ObjectParameter("StatusCode", statusCode) :
                new ObjectParameter("StatusCode", typeof(byte));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spPropertyStatusDelete", statusCodeParameter);
        }
    
        public virtual ObjectResult<spPropertyStatusGetAll_Result> spPropertyStatusGetAll(Nullable<byte> statusCode, string statusDesc)
        {
            var statusCodeParameter = statusCode.HasValue ?
                new ObjectParameter("StatusCode", statusCode) :
                new ObjectParameter("StatusCode", typeof(byte));
    
            var statusDescParameter = statusDesc != null ?
                new ObjectParameter("StatusDesc", statusDesc) :
                new ObjectParameter("StatusDesc", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spPropertyStatusGetAll_Result>("spPropertyStatusGetAll", statusCodeParameter, statusDescParameter);
        }
    
        public virtual int spPropertyStatusGetByKey(Nullable<byte> statusCode, ObjectParameter statusDesc)
        {
            var statusCodeParameter = statusCode.HasValue ?
                new ObjectParameter("StatusCode", statusCode) :
                new ObjectParameter("StatusCode", typeof(byte));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spPropertyStatusGetByKey", statusCodeParameter, statusDesc);
        }
    
        public virtual int spPropertyStatusInsert(Nullable<byte> statusCode, string statusDesc)
        {
            var statusCodeParameter = statusCode.HasValue ?
                new ObjectParameter("StatusCode", statusCode) :
                new ObjectParameter("StatusCode", typeof(byte));
    
            var statusDescParameter = statusDesc != null ?
                new ObjectParameter("StatusDesc", statusDesc) :
                new ObjectParameter("StatusDesc", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spPropertyStatusInsert", statusCodeParameter, statusDescParameter);
        }
    
        public virtual int spPropertyStatusUpdate(Nullable<byte> statusCode, string statusDesc)
        {
            var statusCodeParameter = statusCode.HasValue ?
                new ObjectParameter("StatusCode", statusCode) :
                new ObjectParameter("StatusCode", typeof(byte));
    
            var statusDescParameter = statusDesc != null ?
                new ObjectParameter("StatusDesc", statusDesc) :
                new ObjectParameter("StatusDesc", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spPropertyStatusUpdate", statusCodeParameter, statusDescParameter);
        }
    
        public virtual int spPropertyTitleDelete(Nullable<int> project_Code, string volume, Nullable<int> folio)
        {
            var project_CodeParameter = project_Code.HasValue ?
                new ObjectParameter("Project_Code", project_Code) :
                new ObjectParameter("Project_Code", typeof(int));
    
            var volumeParameter = volume != null ?
                new ObjectParameter("Volume", volume) :
                new ObjectParameter("Volume", typeof(string));
    
            var folioParameter = folio.HasValue ?
                new ObjectParameter("Folio", folio) :
                new ObjectParameter("Folio", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spPropertyTitleDelete", project_CodeParameter, volumeParameter, folioParameter);
        }
    
        public virtual int spPropertyTitleMovtDelete(Nullable<int> project_Code, Nullable<int> movt_Serial_No, Nullable<int> folio, string volume)
        {
            var project_CodeParameter = project_Code.HasValue ?
                new ObjectParameter("Project_Code", project_Code) :
                new ObjectParameter("Project_Code", typeof(int));
    
            var movt_Serial_NoParameter = movt_Serial_No.HasValue ?
                new ObjectParameter("Movt_Serial_No", movt_Serial_No) :
                new ObjectParameter("Movt_Serial_No", typeof(int));
    
            var folioParameter = folio.HasValue ?
                new ObjectParameter("Folio", folio) :
                new ObjectParameter("Folio", typeof(int));
    
            var volumeParameter = volume != null ?
                new ObjectParameter("Volume", volume) :
                new ObjectParameter("Volume", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spPropertyTitleMovtDelete", project_CodeParameter, movt_Serial_NoParameter, folioParameter, volumeParameter);
        }
    
        public virtual int spPropertyTypeDelete(Nullable<byte> typeCode)
        {
            var typeCodeParameter = typeCode.HasValue ?
                new ObjectParameter("TypeCode", typeCode) :
                new ObjectParameter("TypeCode", typeof(byte));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spPropertyTypeDelete", typeCodeParameter);
        }
    
        public virtual ObjectResult<spPropertyTypeGetAll_Result> spPropertyTypeGetAll(Nullable<byte> typeCode, string typeDesc)
        {
            var typeCodeParameter = typeCode.HasValue ?
                new ObjectParameter("TypeCode", typeCode) :
                new ObjectParameter("TypeCode", typeof(byte));
    
            var typeDescParameter = typeDesc != null ?
                new ObjectParameter("TypeDesc", typeDesc) :
                new ObjectParameter("TypeDesc", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spPropertyTypeGetAll_Result>("spPropertyTypeGetAll", typeCodeParameter, typeDescParameter);
        }
    
        public virtual int spPropertyTypeGetByKey(Nullable<byte> typeCode, ObjectParameter typeDesc)
        {
            var typeCodeParameter = typeCode.HasValue ?
                new ObjectParameter("TypeCode", typeCode) :
                new ObjectParameter("TypeCode", typeof(byte));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spPropertyTypeGetByKey", typeCodeParameter, typeDesc);
        }
    
        public virtual int spPropertyTypeInsert(Nullable<byte> typeCode, string typeDesc)
        {
            var typeCodeParameter = typeCode.HasValue ?
                new ObjectParameter("TypeCode", typeCode) :
                new ObjectParameter("TypeCode", typeof(byte));
    
            var typeDescParameter = typeDesc != null ?
                new ObjectParameter("TypeDesc", typeDesc) :
                new ObjectParameter("TypeDesc", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spPropertyTypeInsert", typeCodeParameter, typeDescParameter);
        }
    
        public virtual int spPropertyTypeUpdate(Nullable<byte> typeCode, string typeDesc)
        {
            var typeCodeParameter = typeCode.HasValue ?
                new ObjectParameter("TypeCode", typeCode) :
                new ObjectParameter("TypeCode", typeof(byte));
    
            var typeDescParameter = typeDesc != null ?
                new ObjectParameter("TypeDesc", typeDesc) :
                new ObjectParameter("TypeDesc", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spPropertyTypeUpdate", typeCodeParameter, typeDescParameter);
        }
    
        public virtual int spPurchaseStatus(Nullable<System.DateTime> startdate, Nullable<System.DateTime> enddate)
        {
            var startdateParameter = startdate.HasValue ?
                new ObjectParameter("startdate", startdate) :
                new ObjectParameter("startdate", typeof(System.DateTime));
    
            var enddateParameter = enddate.HasValue ?
                new ObjectParameter("enddate", enddate) :
                new ObjectParameter("enddate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spPurchaseStatus", startdateParameter, enddateParameter);
        }
    
        public virtual int spRateRents(Nullable<System.DateTime> startdate, Nullable<System.DateTime> enddate)
        {
            var startdateParameter = startdate.HasValue ?
                new ObjectParameter("startdate", startdate) :
                new ObjectParameter("startdate", typeof(System.DateTime));
    
            var enddateParameter = enddate.HasValue ?
                new ObjectParameter("enddate", enddate) :
                new ObjectParameter("enddate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spRateRents", startdateParameter, enddateParameter);
        }
    
        public virtual int spRegionDelete(Nullable<byte> region_num)
        {
            var region_numParameter = region_num.HasValue ?
                new ObjectParameter("Region_num", region_num) :
                new ObjectParameter("Region_num", typeof(byte));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spRegionDelete", region_numParameter);
        }
    
        public virtual ObjectResult<spRegionGetAll_Result> spRegionGetAll(Nullable<byte> region_num, string region_name)
        {
            var region_numParameter = region_num.HasValue ?
                new ObjectParameter("Region_num", region_num) :
                new ObjectParameter("Region_num", typeof(byte));
    
            var region_nameParameter = region_name != null ?
                new ObjectParameter("Region_name", region_name) :
                new ObjectParameter("Region_name", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spRegionGetAll_Result>("spRegionGetAll", region_numParameter, region_nameParameter);
        }
    
        public virtual int spRegionGetByKey(Nullable<byte> region_num, ObjectParameter region_name)
        {
            var region_numParameter = region_num.HasValue ?
                new ObjectParameter("Region_num", region_num) :
                new ObjectParameter("Region_num", typeof(byte));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spRegionGetByKey", region_numParameter, region_name);
        }
    
        public virtual int spRegionInsert(Nullable<byte> region_num, string region_name)
        {
            var region_numParameter = region_num.HasValue ?
                new ObjectParameter("Region_num", region_num) :
                new ObjectParameter("Region_num", typeof(byte));
    
            var region_nameParameter = region_name != null ?
                new ObjectParameter("Region_name", region_name) :
                new ObjectParameter("Region_name", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spRegionInsert", region_numParameter, region_nameParameter);
        }
    
        public virtual int spRegionUpdate(Nullable<byte> region_num, string region_name)
        {
            var region_numParameter = region_num.HasValue ?
                new ObjectParameter("Region_num", region_num) :
                new ObjectParameter("Region_num", typeof(byte));
    
            var region_nameParameter = region_name != null ?
                new ObjectParameter("Region_name", region_name) :
                new ObjectParameter("Region_name", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spRegionUpdate", region_numParameter, region_nameParameter);
        }
    
        public virtual ObjectResult<spReport_AllPropertyTitlesGetAll_Result> spReport_AllPropertyTitlesGetAll(string typeDesc, string title_Reference, string plot_No, string project_Desc, string plan_No, string block_No, string landDesc, Nullable<bool> offerPaidUP, Nullable<bool> titleTransferred)
        {
            var typeDescParameter = typeDesc != null ?
                new ObjectParameter("TypeDesc", typeDesc) :
                new ObjectParameter("TypeDesc", typeof(string));
    
            var title_ReferenceParameter = title_Reference != null ?
                new ObjectParameter("Title_Reference", title_Reference) :
                new ObjectParameter("Title_Reference", typeof(string));
    
            var plot_NoParameter = plot_No != null ?
                new ObjectParameter("Plot_No", plot_No) :
                new ObjectParameter("Plot_No", typeof(string));
    
            var project_DescParameter = project_Desc != null ?
                new ObjectParameter("Project_Desc", project_Desc) :
                new ObjectParameter("Project_Desc", typeof(string));
    
            var plan_NoParameter = plan_No != null ?
                new ObjectParameter("Plan_No", plan_No) :
                new ObjectParameter("Plan_No", typeof(string));
    
            var block_NoParameter = block_No != null ?
                new ObjectParameter("Block_No", block_No) :
                new ObjectParameter("Block_No", typeof(string));
    
            var landDescParameter = landDesc != null ?
                new ObjectParameter("LandDesc", landDesc) :
                new ObjectParameter("LandDesc", typeof(string));
    
            var offerPaidUPParameter = offerPaidUP.HasValue ?
                new ObjectParameter("OfferPaidUP", offerPaidUP) :
                new ObjectParameter("OfferPaidUP", typeof(bool));
    
            var titleTransferredParameter = titleTransferred.HasValue ?
                new ObjectParameter("TitleTransferred", titleTransferred) :
                new ObjectParameter("TitleTransferred", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spReport_AllPropertyTitlesGetAll_Result>("spReport_AllPropertyTitlesGetAll", typeDescParameter, title_ReferenceParameter, plot_NoParameter, project_DescParameter, plan_NoParameter, block_NoParameter, landDescParameter, offerPaidUPParameter, titleTransferredParameter);
        }
    
        public virtual ObjectResult<spReport_AllPropertyTypesGetAll_Result> spReport_AllPropertyTypesGetAll(string typeDesc, string plot_No, string plan_No, string block_No, string project_Desc, Nullable<bool> offerPaidUP)
        {
            var typeDescParameter = typeDesc != null ?
                new ObjectParameter("TypeDesc", typeDesc) :
                new ObjectParameter("TypeDesc", typeof(string));
    
            var plot_NoParameter = plot_No != null ?
                new ObjectParameter("Plot_No", plot_No) :
                new ObjectParameter("Plot_No", typeof(string));
    
            var plan_NoParameter = plan_No != null ?
                new ObjectParameter("Plan_No", plan_No) :
                new ObjectParameter("Plan_No", typeof(string));
    
            var block_NoParameter = block_No != null ?
                new ObjectParameter("Block_No", block_No) :
                new ObjectParameter("Block_No", typeof(string));
    
            var project_DescParameter = project_Desc != null ?
                new ObjectParameter("Project_Desc", project_Desc) :
                new ObjectParameter("Project_Desc", typeof(string));
    
            var offerPaidUPParameter = offerPaidUP.HasValue ?
                new ObjectParameter("OfferPaidUP", offerPaidUP) :
                new ObjectParameter("OfferPaidUP", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spReport_AllPropertyTypesGetAll_Result>("spReport_AllPropertyTypesGetAll", typeDescParameter, plot_NoParameter, plan_NoParameter, block_NoParameter, project_DescParameter, offerPaidUPParameter);
        }
    
        public virtual int spReport_AllTitlesManagement_NoTitlesGetAll(string typeDesc, string project_Desc, string landDesc, Nullable<int> total)
        {
            var typeDescParameter = typeDesc != null ?
                new ObjectParameter("TypeDesc", typeDesc) :
                new ObjectParameter("TypeDesc", typeof(string));
    
            var project_DescParameter = project_Desc != null ?
                new ObjectParameter("Project_Desc", project_Desc) :
                new ObjectParameter("Project_Desc", typeof(string));
    
            var landDescParameter = landDesc != null ?
                new ObjectParameter("LandDesc", landDesc) :
                new ObjectParameter("LandDesc", typeof(string));
    
            var totalParameter = total.HasValue ?
                new ObjectParameter("total", total) :
                new ObjectParameter("total", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spReport_AllTitlesManagement_NoTitlesGetAll", typeDescParameter, project_DescParameter, landDescParameter, totalParameter);
        }
    
        public virtual int spReport_AllTitlesManagementGetAll(string typeDesc, string project_Desc, string landDesc, Nullable<int> total)
        {
            var typeDescParameter = typeDesc != null ?
                new ObjectParameter("TypeDesc", typeDesc) :
                new ObjectParameter("TypeDesc", typeof(string));
    
            var project_DescParameter = project_Desc != null ?
                new ObjectParameter("Project_Desc", project_Desc) :
                new ObjectParameter("Project_Desc", typeof(string));
    
            var landDescParameter = landDesc != null ?
                new ObjectParameter("LandDesc", landDesc) :
                new ObjectParameter("LandDesc", typeof(string));
    
            var totalParameter = total.HasValue ?
                new ObjectParameter("total", total) :
                new ObjectParameter("total", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spReport_AllTitlesManagementGetAll", typeDescParameter, project_DescParameter, landDescParameter, totalParameter);
        }
    
        public virtual ObjectResult<spReport_ApprovedAllTitles_AuditLog_PropertyTitleGetAll_Result> spReport_ApprovedAllTitles_AuditLog_PropertyTitleGetAll(string approvedby, string landDesc, Nullable<System.DateTime> movement_Date01, Nullable<System.DateTime> movement_Date02)
        {
            var approvedbyParameter = approvedby != null ?
                new ObjectParameter("approvedby", approvedby) :
                new ObjectParameter("approvedby", typeof(string));
    
            var landDescParameter = landDesc != null ?
                new ObjectParameter("LandDesc", landDesc) :
                new ObjectParameter("LandDesc", typeof(string));
    
            var movement_Date01Parameter = movement_Date01.HasValue ?
                new ObjectParameter("Movement_Date01", movement_Date01) :
                new ObjectParameter("Movement_Date01", typeof(System.DateTime));
    
            var movement_Date02Parameter = movement_Date02.HasValue ?
                new ObjectParameter("Movement_Date02", movement_Date02) :
                new ObjectParameter("Movement_Date02", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spReport_ApprovedAllTitles_AuditLog_PropertyTitleGetAll_Result>("spReport_ApprovedAllTitles_AuditLog_PropertyTitleGetAll", approvedbyParameter, landDescParameter, movement_Date01Parameter, movement_Date02Parameter);
        }
    
        public virtual ObjectResult<spReport_ApprovedAllTitlesPropTypeSummary_AuditLog_PropertyTitleGetAll_Result> spReport_ApprovedAllTitlesPropTypeSummary_AuditLog_PropertyTitleGetAll(string approvedby, string landDesc, Nullable<System.DateTime> movement_Date01, Nullable<System.DateTime> movement_Date02)
        {
            var approvedbyParameter = approvedby != null ?
                new ObjectParameter("approvedby", approvedby) :
                new ObjectParameter("approvedby", typeof(string));
    
            var landDescParameter = landDesc != null ?
                new ObjectParameter("LandDesc", landDesc) :
                new ObjectParameter("LandDesc", typeof(string));
    
            var movement_Date01Parameter = movement_Date01.HasValue ?
                new ObjectParameter("Movement_Date01", movement_Date01) :
                new ObjectParameter("Movement_Date01", typeof(System.DateTime));
    
            var movement_Date02Parameter = movement_Date02.HasValue ?
                new ObjectParameter("Movement_Date02", movement_Date02) :
                new ObjectParameter("Movement_Date02", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spReport_ApprovedAllTitlesPropTypeSummary_AuditLog_PropertyTitleGetAll_Result>("spReport_ApprovedAllTitlesPropTypeSummary_AuditLog_PropertyTitleGetAll", approvedbyParameter, landDescParameter, movement_Date01Parameter, movement_Date02Parameter);
        }
    
        public virtual ObjectResult<spReport_ApprovedAllTitlesSummary_AuditLog_PropertyTitleGetAll_Result> spReport_ApprovedAllTitlesSummary_AuditLog_PropertyTitleGetAll(string approvedby, string landDesc, Nullable<System.DateTime> movement_Date01, Nullable<System.DateTime> movement_Date02)
        {
            var approvedbyParameter = approvedby != null ?
                new ObjectParameter("approvedby", approvedby) :
                new ObjectParameter("approvedby", typeof(string));
    
            var landDescParameter = landDesc != null ?
                new ObjectParameter("LandDesc", landDesc) :
                new ObjectParameter("LandDesc", typeof(string));
    
            var movement_Date01Parameter = movement_Date01.HasValue ?
                new ObjectParameter("Movement_Date01", movement_Date01) :
                new ObjectParameter("Movement_Date01", typeof(System.DateTime));
    
            var movement_Date02Parameter = movement_Date02.HasValue ?
                new ObjectParameter("Movement_Date02", movement_Date02) :
                new ObjectParameter("Movement_Date02", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spReport_ApprovedAllTitlesSummary_AuditLog_PropertyTitleGetAll_Result>("spReport_ApprovedAllTitlesSummary_AuditLog_PropertyTitleGetAll", approvedbyParameter, landDescParameter, movement_Date01Parameter, movement_Date02Parameter);
        }
    
        public virtual ObjectResult<spReport_AuditLog_PropertyPaymentGetAll_Result> spReport_AuditLog_PropertyPaymentGetAll(Nullable<System.DateTime> edited_Date, string edited_By, Nullable<int> original_Project_Code, Nullable<int> new_Project_Code, string original_Volume, string new_Volume, Nullable<int> original_Folio, Nullable<int> new_Folio, Nullable<int> original_OfferNo, Nullable<int> new_OfferNo, string original_Payment_Ref_No, string new_Payment_Ref_No, string original_Title_Reference, string new_Title_Reference, Nullable<System.DateTime> original_Pay_Date, Nullable<System.DateTime> new_Pay_Date, Nullable<byte> original_PayMethodCode, Nullable<byte> new_PayMethodCode, Nullable<int> original_AmountPaid, Nullable<int> new_AmountPaid, string original_Payment_Details, string new_Payment_Details, string original_NewDataAudit, string new_NewDataAudit, string original_EditDataAudit, string new_EditDataAudit)
        {
            var edited_DateParameter = edited_Date.HasValue ?
                new ObjectParameter("Edited_Date", edited_Date) :
                new ObjectParameter("Edited_Date", typeof(System.DateTime));
    
            var edited_ByParameter = edited_By != null ?
                new ObjectParameter("Edited_By", edited_By) :
                new ObjectParameter("Edited_By", typeof(string));
    
            var original_Project_CodeParameter = original_Project_Code.HasValue ?
                new ObjectParameter("original_Project_Code", original_Project_Code) :
                new ObjectParameter("original_Project_Code", typeof(int));
    
            var new_Project_CodeParameter = new_Project_Code.HasValue ?
                new ObjectParameter("new_Project_Code", new_Project_Code) :
                new ObjectParameter("new_Project_Code", typeof(int));
    
            var original_VolumeParameter = original_Volume != null ?
                new ObjectParameter("original_Volume", original_Volume) :
                new ObjectParameter("original_Volume", typeof(string));
    
            var new_VolumeParameter = new_Volume != null ?
                new ObjectParameter("new_Volume", new_Volume) :
                new ObjectParameter("new_Volume", typeof(string));
    
            var original_FolioParameter = original_Folio.HasValue ?
                new ObjectParameter("original_Folio", original_Folio) :
                new ObjectParameter("original_Folio", typeof(int));
    
            var new_FolioParameter = new_Folio.HasValue ?
                new ObjectParameter("new_Folio", new_Folio) :
                new ObjectParameter("new_Folio", typeof(int));
    
            var original_OfferNoParameter = original_OfferNo.HasValue ?
                new ObjectParameter("original_OfferNo", original_OfferNo) :
                new ObjectParameter("original_OfferNo", typeof(int));
    
            var new_OfferNoParameter = new_OfferNo.HasValue ?
                new ObjectParameter("new_OfferNo", new_OfferNo) :
                new ObjectParameter("new_OfferNo", typeof(int));
    
            var original_Payment_Ref_NoParameter = original_Payment_Ref_No != null ?
                new ObjectParameter("original_Payment_Ref_No", original_Payment_Ref_No) :
                new ObjectParameter("original_Payment_Ref_No", typeof(string));
    
            var new_Payment_Ref_NoParameter = new_Payment_Ref_No != null ?
                new ObjectParameter("new_Payment_Ref_No", new_Payment_Ref_No) :
                new ObjectParameter("new_Payment_Ref_No", typeof(string));
    
            var original_Title_ReferenceParameter = original_Title_Reference != null ?
                new ObjectParameter("original_Title_Reference", original_Title_Reference) :
                new ObjectParameter("original_Title_Reference", typeof(string));
    
            var new_Title_ReferenceParameter = new_Title_Reference != null ?
                new ObjectParameter("new_Title_Reference", new_Title_Reference) :
                new ObjectParameter("new_Title_Reference", typeof(string));
    
            var original_Pay_DateParameter = original_Pay_Date.HasValue ?
                new ObjectParameter("original_Pay_Date", original_Pay_Date) :
                new ObjectParameter("original_Pay_Date", typeof(System.DateTime));
    
            var new_Pay_DateParameter = new_Pay_Date.HasValue ?
                new ObjectParameter("new_Pay_Date", new_Pay_Date) :
                new ObjectParameter("new_Pay_Date", typeof(System.DateTime));
    
            var original_PayMethodCodeParameter = original_PayMethodCode.HasValue ?
                new ObjectParameter("original_PayMethodCode", original_PayMethodCode) :
                new ObjectParameter("original_PayMethodCode", typeof(byte));
    
            var new_PayMethodCodeParameter = new_PayMethodCode.HasValue ?
                new ObjectParameter("new_PayMethodCode", new_PayMethodCode) :
                new ObjectParameter("new_PayMethodCode", typeof(byte));
    
            var original_AmountPaidParameter = original_AmountPaid.HasValue ?
                new ObjectParameter("original_AmountPaid", original_AmountPaid) :
                new ObjectParameter("original_AmountPaid", typeof(int));
    
            var new_AmountPaidParameter = new_AmountPaid.HasValue ?
                new ObjectParameter("new_AmountPaid", new_AmountPaid) :
                new ObjectParameter("new_AmountPaid", typeof(int));
    
            var original_Payment_DetailsParameter = original_Payment_Details != null ?
                new ObjectParameter("original_Payment_Details", original_Payment_Details) :
                new ObjectParameter("original_Payment_Details", typeof(string));
    
            var new_Payment_DetailsParameter = new_Payment_Details != null ?
                new ObjectParameter("new_Payment_Details", new_Payment_Details) :
                new ObjectParameter("new_Payment_Details", typeof(string));
    
            var original_NewDataAuditParameter = original_NewDataAudit != null ?
                new ObjectParameter("original_NewDataAudit", original_NewDataAudit) :
                new ObjectParameter("original_NewDataAudit", typeof(string));
    
            var new_NewDataAuditParameter = new_NewDataAudit != null ?
                new ObjectParameter("new_NewDataAudit", new_NewDataAudit) :
                new ObjectParameter("new_NewDataAudit", typeof(string));
    
            var original_EditDataAuditParameter = original_EditDataAudit != null ?
                new ObjectParameter("original_EditDataAudit", original_EditDataAudit) :
                new ObjectParameter("original_EditDataAudit", typeof(string));
    
            var new_EditDataAuditParameter = new_EditDataAudit != null ?
                new ObjectParameter("new_EditDataAudit", new_EditDataAudit) :
                new ObjectParameter("new_EditDataAudit", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spReport_AuditLog_PropertyPaymentGetAll_Result>("spReport_AuditLog_PropertyPaymentGetAll", edited_DateParameter, edited_ByParameter, original_Project_CodeParameter, new_Project_CodeParameter, original_VolumeParameter, new_VolumeParameter, original_FolioParameter, new_FolioParameter, original_OfferNoParameter, new_OfferNoParameter, original_Payment_Ref_NoParameter, new_Payment_Ref_NoParameter, original_Title_ReferenceParameter, new_Title_ReferenceParameter, original_Pay_DateParameter, new_Pay_DateParameter, original_PayMethodCodeParameter, new_PayMethodCodeParameter, original_AmountPaidParameter, new_AmountPaidParameter, original_Payment_DetailsParameter, new_Payment_DetailsParameter, original_NewDataAuditParameter, new_NewDataAuditParameter, original_EditDataAuditParameter, new_EditDataAuditParameter);
        }
    
        public virtual int spReport_AuditLog_PropertyPaymentUpdate(Nullable<System.DateTime> edited_Date, string edited_By, Nullable<int> original_Project_Code, Nullable<int> new_Project_Code, string original_Volume, string new_Volume, Nullable<int> original_Folio, Nullable<int> new_Folio, Nullable<int> original_OfferNo, Nullable<int> new_OfferNo, string original_Payment_Ref_No, string new_Payment_Ref_No, string original_Title_Reference, string new_Title_Reference, Nullable<System.DateTime> original_Pay_Date, Nullable<System.DateTime> new_Pay_Date, Nullable<byte> original_PayMethodCode, Nullable<byte> new_PayMethodCode, Nullable<int> original_AmountPaid, Nullable<int> new_AmountPaid, string original_Payment_Details, string new_Payment_Details, string original_NewDataAudit, string new_NewDataAudit, string original_EditDataAudit, string new_EditDataAudit)
        {
            var edited_DateParameter = edited_Date.HasValue ?
                new ObjectParameter("Edited_Date", edited_Date) :
                new ObjectParameter("Edited_Date", typeof(System.DateTime));
    
            var edited_ByParameter = edited_By != null ?
                new ObjectParameter("Edited_By", edited_By) :
                new ObjectParameter("Edited_By", typeof(string));
    
            var original_Project_CodeParameter = original_Project_Code.HasValue ?
                new ObjectParameter("original_Project_Code", original_Project_Code) :
                new ObjectParameter("original_Project_Code", typeof(int));
    
            var new_Project_CodeParameter = new_Project_Code.HasValue ?
                new ObjectParameter("new_Project_Code", new_Project_Code) :
                new ObjectParameter("new_Project_Code", typeof(int));
    
            var original_VolumeParameter = original_Volume != null ?
                new ObjectParameter("original_Volume", original_Volume) :
                new ObjectParameter("original_Volume", typeof(string));
    
            var new_VolumeParameter = new_Volume != null ?
                new ObjectParameter("new_Volume", new_Volume) :
                new ObjectParameter("new_Volume", typeof(string));
    
            var original_FolioParameter = original_Folio.HasValue ?
                new ObjectParameter("original_Folio", original_Folio) :
                new ObjectParameter("original_Folio", typeof(int));
    
            var new_FolioParameter = new_Folio.HasValue ?
                new ObjectParameter("new_Folio", new_Folio) :
                new ObjectParameter("new_Folio", typeof(int));
    
            var original_OfferNoParameter = original_OfferNo.HasValue ?
                new ObjectParameter("original_OfferNo", original_OfferNo) :
                new ObjectParameter("original_OfferNo", typeof(int));
    
            var new_OfferNoParameter = new_OfferNo.HasValue ?
                new ObjectParameter("new_OfferNo", new_OfferNo) :
                new ObjectParameter("new_OfferNo", typeof(int));
    
            var original_Payment_Ref_NoParameter = original_Payment_Ref_No != null ?
                new ObjectParameter("original_Payment_Ref_No", original_Payment_Ref_No) :
                new ObjectParameter("original_Payment_Ref_No", typeof(string));
    
            var new_Payment_Ref_NoParameter = new_Payment_Ref_No != null ?
                new ObjectParameter("new_Payment_Ref_No", new_Payment_Ref_No) :
                new ObjectParameter("new_Payment_Ref_No", typeof(string));
    
            var original_Title_ReferenceParameter = original_Title_Reference != null ?
                new ObjectParameter("original_Title_Reference", original_Title_Reference) :
                new ObjectParameter("original_Title_Reference", typeof(string));
    
            var new_Title_ReferenceParameter = new_Title_Reference != null ?
                new ObjectParameter("new_Title_Reference", new_Title_Reference) :
                new ObjectParameter("new_Title_Reference", typeof(string));
    
            var original_Pay_DateParameter = original_Pay_Date.HasValue ?
                new ObjectParameter("original_Pay_Date", original_Pay_Date) :
                new ObjectParameter("original_Pay_Date", typeof(System.DateTime));
    
            var new_Pay_DateParameter = new_Pay_Date.HasValue ?
                new ObjectParameter("new_Pay_Date", new_Pay_Date) :
                new ObjectParameter("new_Pay_Date", typeof(System.DateTime));
    
            var original_PayMethodCodeParameter = original_PayMethodCode.HasValue ?
                new ObjectParameter("original_PayMethodCode", original_PayMethodCode) :
                new ObjectParameter("original_PayMethodCode", typeof(byte));
    
            var new_PayMethodCodeParameter = new_PayMethodCode.HasValue ?
                new ObjectParameter("new_PayMethodCode", new_PayMethodCode) :
                new ObjectParameter("new_PayMethodCode", typeof(byte));
    
            var original_AmountPaidParameter = original_AmountPaid.HasValue ?
                new ObjectParameter("original_AmountPaid", original_AmountPaid) :
                new ObjectParameter("original_AmountPaid", typeof(int));
    
            var new_AmountPaidParameter = new_AmountPaid.HasValue ?
                new ObjectParameter("new_AmountPaid", new_AmountPaid) :
                new ObjectParameter("new_AmountPaid", typeof(int));
    
            var original_Payment_DetailsParameter = original_Payment_Details != null ?
                new ObjectParameter("original_Payment_Details", original_Payment_Details) :
                new ObjectParameter("original_Payment_Details", typeof(string));
    
            var new_Payment_DetailsParameter = new_Payment_Details != null ?
                new ObjectParameter("new_Payment_Details", new_Payment_Details) :
                new ObjectParameter("new_Payment_Details", typeof(string));
    
            var original_NewDataAuditParameter = original_NewDataAudit != null ?
                new ObjectParameter("original_NewDataAudit", original_NewDataAudit) :
                new ObjectParameter("original_NewDataAudit", typeof(string));
    
            var new_NewDataAuditParameter = new_NewDataAudit != null ?
                new ObjectParameter("new_NewDataAudit", new_NewDataAudit) :
                new ObjectParameter("new_NewDataAudit", typeof(string));
    
            var original_EditDataAuditParameter = original_EditDataAudit != null ?
                new ObjectParameter("original_EditDataAudit", original_EditDataAudit) :
                new ObjectParameter("original_EditDataAudit", typeof(string));
    
            var new_EditDataAuditParameter = new_EditDataAudit != null ?
                new ObjectParameter("new_EditDataAudit", new_EditDataAudit) :
                new ObjectParameter("new_EditDataAudit", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spReport_AuditLog_PropertyPaymentUpdate", edited_DateParameter, edited_ByParameter, original_Project_CodeParameter, new_Project_CodeParameter, original_VolumeParameter, new_VolumeParameter, original_FolioParameter, new_FolioParameter, original_OfferNoParameter, new_OfferNoParameter, original_Payment_Ref_NoParameter, new_Payment_Ref_NoParameter, original_Title_ReferenceParameter, new_Title_ReferenceParameter, original_Pay_DateParameter, new_Pay_DateParameter, original_PayMethodCodeParameter, new_PayMethodCodeParameter, original_AmountPaidParameter, new_AmountPaidParameter, original_Payment_DetailsParameter, new_Payment_DetailsParameter, original_NewDataAuditParameter, new_NewDataAuditParameter, original_EditDataAuditParameter, new_EditDataAuditParameter);
        }
    
        public virtual ObjectResult<spReport_AuditLog_PropertyTitleGetAll_Result> spReport_AuditLog_PropertyTitleGetAll(string edited_By, Nullable<System.DateTime> edited_Date, Nullable<int> auditAction, Nullable<int> original_Project_Code, string original_Volume, Nullable<int> original_Folio, string original_Title_Reference, Nullable<byte> original_TypeCode, Nullable<byte> original_LandTypeCode, string original_Unit_No, string original_Plan_No, string original_Block_No, string original_Flat_N0, Nullable<byte> original_DistrictID, string original_Town_Village, string original_Plot_No, Nullable<System.DateTime> original_Lease_Start_Date, Nullable<System.DateTime> original_Lease_End_Date, Nullable<int> original_Ground_Rent, Nullable<int> original_Rates, Nullable<decimal> original_Offer_Value, Nullable<bool> original_OfferPaidUP, Nullable<byte> original_PropertyStatus, Nullable<double> original_AreaOfUnit, Nullable<double> original_FloorAreaLeased, Nullable<double> original_UnitFactor, Nullable<System.DateTime> original_RegDate, string original_InstrumentNo, string original_ProprietorName, string original_ProprietorAddress, string original_Registrar, string original_BoardMinuteRelease, string original_Directors, Nullable<int> new_Project_Code, string new_Volume, Nullable<int> new_Folio, string new_Title_Reference, Nullable<byte> new_TypeCode, Nullable<byte> new_LandTypeCode, string new_Unit_No, string new_Plan_No, string new_Block_No, string new_Flat_N0, Nullable<byte> new_DistrictID, string new_Town_Village, string new_Plot_No, Nullable<System.DateTime> new_Lease_Start_Date, Nullable<System.DateTime> new_Lease_End_Date, Nullable<int> new_Ground_Rent, Nullable<int> new_Rates, Nullable<decimal> new_Offer_Value, Nullable<bool> new_OfferPaidUP, Nullable<byte> new_PropertyStatus, Nullable<double> new_AreaOfUnit, Nullable<double> new_FloorAreaLeased, Nullable<double> new_UnitFactor, Nullable<System.DateTime> new_RegDate, string new_InstrumentNo, string new_ProprietorName, string new_ProprietorAddress, string new_Registrar, string new_BoardMinuteRelease, string new_Directors)
        {
            var edited_ByParameter = edited_By != null ?
                new ObjectParameter("Edited_By", edited_By) :
                new ObjectParameter("Edited_By", typeof(string));
    
            var edited_DateParameter = edited_Date.HasValue ?
                new ObjectParameter("Edited_Date", edited_Date) :
                new ObjectParameter("Edited_Date", typeof(System.DateTime));
    
            var auditActionParameter = auditAction.HasValue ?
                new ObjectParameter("AuditAction", auditAction) :
                new ObjectParameter("AuditAction", typeof(int));
    
            var original_Project_CodeParameter = original_Project_Code.HasValue ?
                new ObjectParameter("original_Project_Code", original_Project_Code) :
                new ObjectParameter("original_Project_Code", typeof(int));
    
            var original_VolumeParameter = original_Volume != null ?
                new ObjectParameter("original_Volume", original_Volume) :
                new ObjectParameter("original_Volume", typeof(string));
    
            var original_FolioParameter = original_Folio.HasValue ?
                new ObjectParameter("original_Folio", original_Folio) :
                new ObjectParameter("original_Folio", typeof(int));
    
            var original_Title_ReferenceParameter = original_Title_Reference != null ?
                new ObjectParameter("original_Title_Reference", original_Title_Reference) :
                new ObjectParameter("original_Title_Reference", typeof(string));
    
            var original_TypeCodeParameter = original_TypeCode.HasValue ?
                new ObjectParameter("original_TypeCode", original_TypeCode) :
                new ObjectParameter("original_TypeCode", typeof(byte));
    
            var original_LandTypeCodeParameter = original_LandTypeCode.HasValue ?
                new ObjectParameter("original_LandTypeCode", original_LandTypeCode) :
                new ObjectParameter("original_LandTypeCode", typeof(byte));
    
            var original_Unit_NoParameter = original_Unit_No != null ?
                new ObjectParameter("original_Unit_No", original_Unit_No) :
                new ObjectParameter("original_Unit_No", typeof(string));
    
            var original_Plan_NoParameter = original_Plan_No != null ?
                new ObjectParameter("original_Plan_No", original_Plan_No) :
                new ObjectParameter("original_Plan_No", typeof(string));
    
            var original_Block_NoParameter = original_Block_No != null ?
                new ObjectParameter("original_Block_No", original_Block_No) :
                new ObjectParameter("original_Block_No", typeof(string));
    
            var original_Flat_N0Parameter = original_Flat_N0 != null ?
                new ObjectParameter("original_Flat_N0", original_Flat_N0) :
                new ObjectParameter("original_Flat_N0", typeof(string));
    
            var original_DistrictIDParameter = original_DistrictID.HasValue ?
                new ObjectParameter("original_DistrictID", original_DistrictID) :
                new ObjectParameter("original_DistrictID", typeof(byte));
    
            var original_Town_VillageParameter = original_Town_Village != null ?
                new ObjectParameter("original_Town_Village", original_Town_Village) :
                new ObjectParameter("original_Town_Village", typeof(string));
    
            var original_Plot_NoParameter = original_Plot_No != null ?
                new ObjectParameter("original_Plot_No", original_Plot_No) :
                new ObjectParameter("original_Plot_No", typeof(string));
    
            var original_Lease_Start_DateParameter = original_Lease_Start_Date.HasValue ?
                new ObjectParameter("original_Lease_Start_Date", original_Lease_Start_Date) :
                new ObjectParameter("original_Lease_Start_Date", typeof(System.DateTime));
    
            var original_Lease_End_DateParameter = original_Lease_End_Date.HasValue ?
                new ObjectParameter("original_Lease_End_Date", original_Lease_End_Date) :
                new ObjectParameter("original_Lease_End_Date", typeof(System.DateTime));
    
            var original_Ground_RentParameter = original_Ground_Rent.HasValue ?
                new ObjectParameter("original_Ground_Rent", original_Ground_Rent) :
                new ObjectParameter("original_Ground_Rent", typeof(int));
    
            var original_RatesParameter = original_Rates.HasValue ?
                new ObjectParameter("original_Rates", original_Rates) :
                new ObjectParameter("original_Rates", typeof(int));
    
            var original_Offer_ValueParameter = original_Offer_Value.HasValue ?
                new ObjectParameter("original_Offer_Value", original_Offer_Value) :
                new ObjectParameter("original_Offer_Value", typeof(decimal));
    
            var original_OfferPaidUPParameter = original_OfferPaidUP.HasValue ?
                new ObjectParameter("original_OfferPaidUP", original_OfferPaidUP) :
                new ObjectParameter("original_OfferPaidUP", typeof(bool));
    
            var original_PropertyStatusParameter = original_PropertyStatus.HasValue ?
                new ObjectParameter("original_PropertyStatus", original_PropertyStatus) :
                new ObjectParameter("original_PropertyStatus", typeof(byte));
    
            var original_AreaOfUnitParameter = original_AreaOfUnit.HasValue ?
                new ObjectParameter("original_AreaOfUnit", original_AreaOfUnit) :
                new ObjectParameter("original_AreaOfUnit", typeof(double));
    
            var original_FloorAreaLeasedParameter = original_FloorAreaLeased.HasValue ?
                new ObjectParameter("original_FloorAreaLeased", original_FloorAreaLeased) :
                new ObjectParameter("original_FloorAreaLeased", typeof(double));
    
            var original_UnitFactorParameter = original_UnitFactor.HasValue ?
                new ObjectParameter("original_UnitFactor", original_UnitFactor) :
                new ObjectParameter("original_UnitFactor", typeof(double));
    
            var original_RegDateParameter = original_RegDate.HasValue ?
                new ObjectParameter("original_RegDate", original_RegDate) :
                new ObjectParameter("original_RegDate", typeof(System.DateTime));
    
            var original_InstrumentNoParameter = original_InstrumentNo != null ?
                new ObjectParameter("original_InstrumentNo", original_InstrumentNo) :
                new ObjectParameter("original_InstrumentNo", typeof(string));
    
            var original_ProprietorNameParameter = original_ProprietorName != null ?
                new ObjectParameter("original_ProprietorName", original_ProprietorName) :
                new ObjectParameter("original_ProprietorName", typeof(string));
    
            var original_ProprietorAddressParameter = original_ProprietorAddress != null ?
                new ObjectParameter("original_ProprietorAddress", original_ProprietorAddress) :
                new ObjectParameter("original_ProprietorAddress", typeof(string));
    
            var original_RegistrarParameter = original_Registrar != null ?
                new ObjectParameter("original_Registrar", original_Registrar) :
                new ObjectParameter("original_Registrar", typeof(string));
    
            var original_BoardMinuteReleaseParameter = original_BoardMinuteRelease != null ?
                new ObjectParameter("original_BoardMinuteRelease", original_BoardMinuteRelease) :
                new ObjectParameter("original_BoardMinuteRelease", typeof(string));
    
            var original_DirectorsParameter = original_Directors != null ?
                new ObjectParameter("original_Directors", original_Directors) :
                new ObjectParameter("original_Directors", typeof(string));
    
            var new_Project_CodeParameter = new_Project_Code.HasValue ?
                new ObjectParameter("new_Project_Code", new_Project_Code) :
                new ObjectParameter("new_Project_Code", typeof(int));
    
            var new_VolumeParameter = new_Volume != null ?
                new ObjectParameter("new_Volume", new_Volume) :
                new ObjectParameter("new_Volume", typeof(string));
    
            var new_FolioParameter = new_Folio.HasValue ?
                new ObjectParameter("new_Folio", new_Folio) :
                new ObjectParameter("new_Folio", typeof(int));
    
            var new_Title_ReferenceParameter = new_Title_Reference != null ?
                new ObjectParameter("new_Title_Reference", new_Title_Reference) :
                new ObjectParameter("new_Title_Reference", typeof(string));
    
            var new_TypeCodeParameter = new_TypeCode.HasValue ?
                new ObjectParameter("new_TypeCode", new_TypeCode) :
                new ObjectParameter("new_TypeCode", typeof(byte));
    
            var new_LandTypeCodeParameter = new_LandTypeCode.HasValue ?
                new ObjectParameter("new_LandTypeCode", new_LandTypeCode) :
                new ObjectParameter("new_LandTypeCode", typeof(byte));
    
            var new_Unit_NoParameter = new_Unit_No != null ?
                new ObjectParameter("new_Unit_No", new_Unit_No) :
                new ObjectParameter("new_Unit_No", typeof(string));
    
            var new_Plan_NoParameter = new_Plan_No != null ?
                new ObjectParameter("new_Plan_No", new_Plan_No) :
                new ObjectParameter("new_Plan_No", typeof(string));
    
            var new_Block_NoParameter = new_Block_No != null ?
                new ObjectParameter("new_Block_No", new_Block_No) :
                new ObjectParameter("new_Block_No", typeof(string));
    
            var new_Flat_N0Parameter = new_Flat_N0 != null ?
                new ObjectParameter("new_Flat_N0", new_Flat_N0) :
                new ObjectParameter("new_Flat_N0", typeof(string));
    
            var new_DistrictIDParameter = new_DistrictID.HasValue ?
                new ObjectParameter("new_DistrictID", new_DistrictID) :
                new ObjectParameter("new_DistrictID", typeof(byte));
    
            var new_Town_VillageParameter = new_Town_Village != null ?
                new ObjectParameter("new_Town_Village", new_Town_Village) :
                new ObjectParameter("new_Town_Village", typeof(string));
    
            var new_Plot_NoParameter = new_Plot_No != null ?
                new ObjectParameter("new_Plot_No", new_Plot_No) :
                new ObjectParameter("new_Plot_No", typeof(string));
    
            var new_Lease_Start_DateParameter = new_Lease_Start_Date.HasValue ?
                new ObjectParameter("new_Lease_Start_Date", new_Lease_Start_Date) :
                new ObjectParameter("new_Lease_Start_Date", typeof(System.DateTime));
    
            var new_Lease_End_DateParameter = new_Lease_End_Date.HasValue ?
                new ObjectParameter("new_Lease_End_Date", new_Lease_End_Date) :
                new ObjectParameter("new_Lease_End_Date", typeof(System.DateTime));
    
            var new_Ground_RentParameter = new_Ground_Rent.HasValue ?
                new ObjectParameter("new_Ground_Rent", new_Ground_Rent) :
                new ObjectParameter("new_Ground_Rent", typeof(int));
    
            var new_RatesParameter = new_Rates.HasValue ?
                new ObjectParameter("new_Rates", new_Rates) :
                new ObjectParameter("new_Rates", typeof(int));
    
            var new_Offer_ValueParameter = new_Offer_Value.HasValue ?
                new ObjectParameter("new_Offer_Value", new_Offer_Value) :
                new ObjectParameter("new_Offer_Value", typeof(decimal));
    
            var new_OfferPaidUPParameter = new_OfferPaidUP.HasValue ?
                new ObjectParameter("new_OfferPaidUP", new_OfferPaidUP) :
                new ObjectParameter("new_OfferPaidUP", typeof(bool));
    
            var new_PropertyStatusParameter = new_PropertyStatus.HasValue ?
                new ObjectParameter("new_PropertyStatus", new_PropertyStatus) :
                new ObjectParameter("new_PropertyStatus", typeof(byte));
    
            var new_AreaOfUnitParameter = new_AreaOfUnit.HasValue ?
                new ObjectParameter("new_AreaOfUnit", new_AreaOfUnit) :
                new ObjectParameter("new_AreaOfUnit", typeof(double));
    
            var new_FloorAreaLeasedParameter = new_FloorAreaLeased.HasValue ?
                new ObjectParameter("new_FloorAreaLeased", new_FloorAreaLeased) :
                new ObjectParameter("new_FloorAreaLeased", typeof(double));
    
            var new_UnitFactorParameter = new_UnitFactor.HasValue ?
                new ObjectParameter("new_UnitFactor", new_UnitFactor) :
                new ObjectParameter("new_UnitFactor", typeof(double));
    
            var new_RegDateParameter = new_RegDate.HasValue ?
                new ObjectParameter("new_RegDate", new_RegDate) :
                new ObjectParameter("new_RegDate", typeof(System.DateTime));
    
            var new_InstrumentNoParameter = new_InstrumentNo != null ?
                new ObjectParameter("new_InstrumentNo", new_InstrumentNo) :
                new ObjectParameter("new_InstrumentNo", typeof(string));
    
            var new_ProprietorNameParameter = new_ProprietorName != null ?
                new ObjectParameter("new_ProprietorName", new_ProprietorName) :
                new ObjectParameter("new_ProprietorName", typeof(string));
    
            var new_ProprietorAddressParameter = new_ProprietorAddress != null ?
                new ObjectParameter("new_ProprietorAddress", new_ProprietorAddress) :
                new ObjectParameter("new_ProprietorAddress", typeof(string));
    
            var new_RegistrarParameter = new_Registrar != null ?
                new ObjectParameter("new_Registrar", new_Registrar) :
                new ObjectParameter("new_Registrar", typeof(string));
    
            var new_BoardMinuteReleaseParameter = new_BoardMinuteRelease != null ?
                new ObjectParameter("new_BoardMinuteRelease", new_BoardMinuteRelease) :
                new ObjectParameter("new_BoardMinuteRelease", typeof(string));
    
            var new_DirectorsParameter = new_Directors != null ?
                new ObjectParameter("new_Directors", new_Directors) :
                new ObjectParameter("new_Directors", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spReport_AuditLog_PropertyTitleGetAll_Result>("spReport_AuditLog_PropertyTitleGetAll", edited_ByParameter, edited_DateParameter, auditActionParameter, original_Project_CodeParameter, original_VolumeParameter, original_FolioParameter, original_Title_ReferenceParameter, original_TypeCodeParameter, original_LandTypeCodeParameter, original_Unit_NoParameter, original_Plan_NoParameter, original_Block_NoParameter, original_Flat_N0Parameter, original_DistrictIDParameter, original_Town_VillageParameter, original_Plot_NoParameter, original_Lease_Start_DateParameter, original_Lease_End_DateParameter, original_Ground_RentParameter, original_RatesParameter, original_Offer_ValueParameter, original_OfferPaidUPParameter, original_PropertyStatusParameter, original_AreaOfUnitParameter, original_FloorAreaLeasedParameter, original_UnitFactorParameter, original_RegDateParameter, original_InstrumentNoParameter, original_ProprietorNameParameter, original_ProprietorAddressParameter, original_RegistrarParameter, original_BoardMinuteReleaseParameter, original_DirectorsParameter, new_Project_CodeParameter, new_VolumeParameter, new_FolioParameter, new_Title_ReferenceParameter, new_TypeCodeParameter, new_LandTypeCodeParameter, new_Unit_NoParameter, new_Plan_NoParameter, new_Block_NoParameter, new_Flat_N0Parameter, new_DistrictIDParameter, new_Town_VillageParameter, new_Plot_NoParameter, new_Lease_Start_DateParameter, new_Lease_End_DateParameter, new_Ground_RentParameter, new_RatesParameter, new_Offer_ValueParameter, new_OfferPaidUPParameter, new_PropertyStatusParameter, new_AreaOfUnitParameter, new_FloorAreaLeasedParameter, new_UnitFactorParameter, new_RegDateParameter, new_InstrumentNoParameter, new_ProprietorNameParameter, new_ProprietorAddressParameter, new_RegistrarParameter, new_BoardMinuteReleaseParameter, new_DirectorsParameter);
        }
    
        public virtual int spReport_AuditLog_PropertyTitleMovtUpdate(Nullable<System.DateTime> edited_Date, string edited_By, Nullable<int> original_Project_Code, Nullable<int> original_Movt_Serial_No, Nullable<int> original_Folio, string original_Volume, string original_Title_Reference, Nullable<System.DateTime> original_Movement_Date, Nullable<byte> original_Dest_Category, Nullable<bool> original_Outward, string original_Destination_Address, string original_Remark, string original_FlatNo, string original_UnitNo, Nullable<int> new_Project_Code, Nullable<int> new_Movt_Serial_No, Nullable<int> new_Folio, string new_Volume, string new_Title_Reference, Nullable<System.DateTime> new_Movement_Date, Nullable<byte> new_Dest_Category, Nullable<bool> new_Outward, string new_Destination_Address, string new_Remark, string new_FlatNo, string new_UnitNo)
        {
            var edited_DateParameter = edited_Date.HasValue ?
                new ObjectParameter("Edited_Date", edited_Date) :
                new ObjectParameter("Edited_Date", typeof(System.DateTime));
    
            var edited_ByParameter = edited_By != null ?
                new ObjectParameter("Edited_By", edited_By) :
                new ObjectParameter("Edited_By", typeof(string));
    
            var original_Project_CodeParameter = original_Project_Code.HasValue ?
                new ObjectParameter("original_Project_Code", original_Project_Code) :
                new ObjectParameter("original_Project_Code", typeof(int));
    
            var original_Movt_Serial_NoParameter = original_Movt_Serial_No.HasValue ?
                new ObjectParameter("original_Movt_Serial_No", original_Movt_Serial_No) :
                new ObjectParameter("original_Movt_Serial_No", typeof(int));
    
            var original_FolioParameter = original_Folio.HasValue ?
                new ObjectParameter("original_Folio", original_Folio) :
                new ObjectParameter("original_Folio", typeof(int));
    
            var original_VolumeParameter = original_Volume != null ?
                new ObjectParameter("original_Volume", original_Volume) :
                new ObjectParameter("original_Volume", typeof(string));
    
            var original_Title_ReferenceParameter = original_Title_Reference != null ?
                new ObjectParameter("original_Title_Reference", original_Title_Reference) :
                new ObjectParameter("original_Title_Reference", typeof(string));
    
            var original_Movement_DateParameter = original_Movement_Date.HasValue ?
                new ObjectParameter("original_Movement_Date", original_Movement_Date) :
                new ObjectParameter("original_Movement_Date", typeof(System.DateTime));
    
            var original_Dest_CategoryParameter = original_Dest_Category.HasValue ?
                new ObjectParameter("original_Dest_Category", original_Dest_Category) :
                new ObjectParameter("original_Dest_Category", typeof(byte));
    
            var original_OutwardParameter = original_Outward.HasValue ?
                new ObjectParameter("original_Outward", original_Outward) :
                new ObjectParameter("original_Outward", typeof(bool));
    
            var original_Destination_AddressParameter = original_Destination_Address != null ?
                new ObjectParameter("original_Destination_Address", original_Destination_Address) :
                new ObjectParameter("original_Destination_Address", typeof(string));
    
            var original_RemarkParameter = original_Remark != null ?
                new ObjectParameter("original_Remark", original_Remark) :
                new ObjectParameter("original_Remark", typeof(string));
    
            var original_FlatNoParameter = original_FlatNo != null ?
                new ObjectParameter("original_FlatNo", original_FlatNo) :
                new ObjectParameter("original_FlatNo", typeof(string));
    
            var original_UnitNoParameter = original_UnitNo != null ?
                new ObjectParameter("original_UnitNo", original_UnitNo) :
                new ObjectParameter("original_UnitNo", typeof(string));
    
            var new_Project_CodeParameter = new_Project_Code.HasValue ?
                new ObjectParameter("new_Project_Code", new_Project_Code) :
                new ObjectParameter("new_Project_Code", typeof(int));
    
            var new_Movt_Serial_NoParameter = new_Movt_Serial_No.HasValue ?
                new ObjectParameter("new_Movt_Serial_No", new_Movt_Serial_No) :
                new ObjectParameter("new_Movt_Serial_No", typeof(int));
    
            var new_FolioParameter = new_Folio.HasValue ?
                new ObjectParameter("new_Folio", new_Folio) :
                new ObjectParameter("new_Folio", typeof(int));
    
            var new_VolumeParameter = new_Volume != null ?
                new ObjectParameter("new_Volume", new_Volume) :
                new ObjectParameter("new_Volume", typeof(string));
    
            var new_Title_ReferenceParameter = new_Title_Reference != null ?
                new ObjectParameter("new_Title_Reference", new_Title_Reference) :
                new ObjectParameter("new_Title_Reference", typeof(string));
    
            var new_Movement_DateParameter = new_Movement_Date.HasValue ?
                new ObjectParameter("new_Movement_Date", new_Movement_Date) :
                new ObjectParameter("new_Movement_Date", typeof(System.DateTime));
    
            var new_Dest_CategoryParameter = new_Dest_Category.HasValue ?
                new ObjectParameter("new_Dest_Category", new_Dest_Category) :
                new ObjectParameter("new_Dest_Category", typeof(byte));
    
            var new_OutwardParameter = new_Outward.HasValue ?
                new ObjectParameter("new_Outward", new_Outward) :
                new ObjectParameter("new_Outward", typeof(bool));
    
            var new_Destination_AddressParameter = new_Destination_Address != null ?
                new ObjectParameter("new_Destination_Address", new_Destination_Address) :
                new ObjectParameter("new_Destination_Address", typeof(string));
    
            var new_RemarkParameter = new_Remark != null ?
                new ObjectParameter("new_Remark", new_Remark) :
                new ObjectParameter("new_Remark", typeof(string));
    
            var new_FlatNoParameter = new_FlatNo != null ?
                new ObjectParameter("new_FlatNo", new_FlatNo) :
                new ObjectParameter("new_FlatNo", typeof(string));
    
            var new_UnitNoParameter = new_UnitNo != null ?
                new ObjectParameter("new_UnitNo", new_UnitNo) :
                new ObjectParameter("new_UnitNo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spReport_AuditLog_PropertyTitleMovtUpdate", edited_DateParameter, edited_ByParameter, original_Project_CodeParameter, original_Movt_Serial_NoParameter, original_FolioParameter, original_VolumeParameter, original_Title_ReferenceParameter, original_Movement_DateParameter, original_Dest_CategoryParameter, original_OutwardParameter, original_Destination_AddressParameter, original_RemarkParameter, original_FlatNoParameter, original_UnitNoParameter, new_Project_CodeParameter, new_Movt_Serial_NoParameter, new_FolioParameter, new_VolumeParameter, new_Title_ReferenceParameter, new_Movement_DateParameter, new_Dest_CategoryParameter, new_OutwardParameter, new_Destination_AddressParameter, new_RemarkParameter, new_FlatNoParameter, new_UnitNoParameter);
        }
    
        public virtual int spReport_AuditLog_PropertyTitleUpdate(string edited_By, Nullable<System.DateTime> edited_Date, Nullable<int> auditAction, Nullable<int> original_Project_Code, string original_Volume, Nullable<int> original_Folio, string original_Title_Reference, Nullable<byte> original_TypeCode, Nullable<byte> original_LandTypeCode, string original_Unit_No, string original_Plan_No, string original_Block_No, string original_Flat_N0, Nullable<byte> original_DistrictID, string original_Town_Village, string original_Plot_No, Nullable<System.DateTime> original_Lease_Start_Date, Nullable<System.DateTime> original_Lease_End_Date, Nullable<int> original_Ground_Rent, Nullable<int> original_Rates, Nullable<decimal> original_Offer_Value, Nullable<bool> original_OfferPaidUP, Nullable<byte> original_PropertyStatus, Nullable<double> original_AreaOfUnit, Nullable<double> original_FloorAreaLeased, Nullable<double> original_UnitFactor, Nullable<System.DateTime> original_RegDate, string original_InstrumentNo, string original_ProprietorName, string original_ProprietorAddress, string original_Registrar, string original_BoardMinuteRelease, string original_Directors, Nullable<int> new_Project_Code, string new_Volume, Nullable<int> new_Folio, string new_Title_Reference, Nullable<byte> new_TypeCode, Nullable<byte> new_LandTypeCode, string new_Unit_No, string new_Plan_No, string new_Block_No, string new_Flat_N0, Nullable<byte> new_DistrictID, string new_Town_Village, string new_Plot_No, Nullable<System.DateTime> new_Lease_Start_Date, Nullable<System.DateTime> new_Lease_End_Date, Nullable<int> new_Ground_Rent, Nullable<int> new_Rates, Nullable<decimal> new_Offer_Value, Nullable<bool> new_OfferPaidUP, Nullable<byte> new_PropertyStatus, Nullable<double> new_AreaOfUnit, Nullable<double> new_FloorAreaLeased, Nullable<double> new_UnitFactor, Nullable<System.DateTime> new_RegDate, string new_InstrumentNo, string new_ProprietorName, string new_ProprietorAddress, string new_Registrar, string new_BoardMinuteRelease, string new_Directors)
        {
            var edited_ByParameter = edited_By != null ?
                new ObjectParameter("Edited_By", edited_By) :
                new ObjectParameter("Edited_By", typeof(string));
    
            var edited_DateParameter = edited_Date.HasValue ?
                new ObjectParameter("Edited_Date", edited_Date) :
                new ObjectParameter("Edited_Date", typeof(System.DateTime));
    
            var auditActionParameter = auditAction.HasValue ?
                new ObjectParameter("AuditAction", auditAction) :
                new ObjectParameter("AuditAction", typeof(int));
    
            var original_Project_CodeParameter = original_Project_Code.HasValue ?
                new ObjectParameter("original_Project_Code", original_Project_Code) :
                new ObjectParameter("original_Project_Code", typeof(int));
    
            var original_VolumeParameter = original_Volume != null ?
                new ObjectParameter("original_Volume", original_Volume) :
                new ObjectParameter("original_Volume", typeof(string));
    
            var original_FolioParameter = original_Folio.HasValue ?
                new ObjectParameter("original_Folio", original_Folio) :
                new ObjectParameter("original_Folio", typeof(int));
    
            var original_Title_ReferenceParameter = original_Title_Reference != null ?
                new ObjectParameter("original_Title_Reference", original_Title_Reference) :
                new ObjectParameter("original_Title_Reference", typeof(string));
    
            var original_TypeCodeParameter = original_TypeCode.HasValue ?
                new ObjectParameter("original_TypeCode", original_TypeCode) :
                new ObjectParameter("original_TypeCode", typeof(byte));
    
            var original_LandTypeCodeParameter = original_LandTypeCode.HasValue ?
                new ObjectParameter("original_LandTypeCode", original_LandTypeCode) :
                new ObjectParameter("original_LandTypeCode", typeof(byte));
    
            var original_Unit_NoParameter = original_Unit_No != null ?
                new ObjectParameter("original_Unit_No", original_Unit_No) :
                new ObjectParameter("original_Unit_No", typeof(string));
    
            var original_Plan_NoParameter = original_Plan_No != null ?
                new ObjectParameter("original_Plan_No", original_Plan_No) :
                new ObjectParameter("original_Plan_No", typeof(string));
    
            var original_Block_NoParameter = original_Block_No != null ?
                new ObjectParameter("original_Block_No", original_Block_No) :
                new ObjectParameter("original_Block_No", typeof(string));
    
            var original_Flat_N0Parameter = original_Flat_N0 != null ?
                new ObjectParameter("original_Flat_N0", original_Flat_N0) :
                new ObjectParameter("original_Flat_N0", typeof(string));
    
            var original_DistrictIDParameter = original_DistrictID.HasValue ?
                new ObjectParameter("original_DistrictID", original_DistrictID) :
                new ObjectParameter("original_DistrictID", typeof(byte));
    
            var original_Town_VillageParameter = original_Town_Village != null ?
                new ObjectParameter("original_Town_Village", original_Town_Village) :
                new ObjectParameter("original_Town_Village", typeof(string));
    
            var original_Plot_NoParameter = original_Plot_No != null ?
                new ObjectParameter("original_Plot_No", original_Plot_No) :
                new ObjectParameter("original_Plot_No", typeof(string));
    
            var original_Lease_Start_DateParameter = original_Lease_Start_Date.HasValue ?
                new ObjectParameter("original_Lease_Start_Date", original_Lease_Start_Date) :
                new ObjectParameter("original_Lease_Start_Date", typeof(System.DateTime));
    
            var original_Lease_End_DateParameter = original_Lease_End_Date.HasValue ?
                new ObjectParameter("original_Lease_End_Date", original_Lease_End_Date) :
                new ObjectParameter("original_Lease_End_Date", typeof(System.DateTime));
    
            var original_Ground_RentParameter = original_Ground_Rent.HasValue ?
                new ObjectParameter("original_Ground_Rent", original_Ground_Rent) :
                new ObjectParameter("original_Ground_Rent", typeof(int));
    
            var original_RatesParameter = original_Rates.HasValue ?
                new ObjectParameter("original_Rates", original_Rates) :
                new ObjectParameter("original_Rates", typeof(int));
    
            var original_Offer_ValueParameter = original_Offer_Value.HasValue ?
                new ObjectParameter("original_Offer_Value", original_Offer_Value) :
                new ObjectParameter("original_Offer_Value", typeof(decimal));
    
            var original_OfferPaidUPParameter = original_OfferPaidUP.HasValue ?
                new ObjectParameter("original_OfferPaidUP", original_OfferPaidUP) :
                new ObjectParameter("original_OfferPaidUP", typeof(bool));
    
            var original_PropertyStatusParameter = original_PropertyStatus.HasValue ?
                new ObjectParameter("original_PropertyStatus", original_PropertyStatus) :
                new ObjectParameter("original_PropertyStatus", typeof(byte));
    
            var original_AreaOfUnitParameter = original_AreaOfUnit.HasValue ?
                new ObjectParameter("original_AreaOfUnit", original_AreaOfUnit) :
                new ObjectParameter("original_AreaOfUnit", typeof(double));
    
            var original_FloorAreaLeasedParameter = original_FloorAreaLeased.HasValue ?
                new ObjectParameter("original_FloorAreaLeased", original_FloorAreaLeased) :
                new ObjectParameter("original_FloorAreaLeased", typeof(double));
    
            var original_UnitFactorParameter = original_UnitFactor.HasValue ?
                new ObjectParameter("original_UnitFactor", original_UnitFactor) :
                new ObjectParameter("original_UnitFactor", typeof(double));
    
            var original_RegDateParameter = original_RegDate.HasValue ?
                new ObjectParameter("original_RegDate", original_RegDate) :
                new ObjectParameter("original_RegDate", typeof(System.DateTime));
    
            var original_InstrumentNoParameter = original_InstrumentNo != null ?
                new ObjectParameter("original_InstrumentNo", original_InstrumentNo) :
                new ObjectParameter("original_InstrumentNo", typeof(string));
    
            var original_ProprietorNameParameter = original_ProprietorName != null ?
                new ObjectParameter("original_ProprietorName", original_ProprietorName) :
                new ObjectParameter("original_ProprietorName", typeof(string));
    
            var original_ProprietorAddressParameter = original_ProprietorAddress != null ?
                new ObjectParameter("original_ProprietorAddress", original_ProprietorAddress) :
                new ObjectParameter("original_ProprietorAddress", typeof(string));
    
            var original_RegistrarParameter = original_Registrar != null ?
                new ObjectParameter("original_Registrar", original_Registrar) :
                new ObjectParameter("original_Registrar", typeof(string));
    
            var original_BoardMinuteReleaseParameter = original_BoardMinuteRelease != null ?
                new ObjectParameter("original_BoardMinuteRelease", original_BoardMinuteRelease) :
                new ObjectParameter("original_BoardMinuteRelease", typeof(string));
    
            var original_DirectorsParameter = original_Directors != null ?
                new ObjectParameter("original_Directors", original_Directors) :
                new ObjectParameter("original_Directors", typeof(string));
    
            var new_Project_CodeParameter = new_Project_Code.HasValue ?
                new ObjectParameter("new_Project_Code", new_Project_Code) :
                new ObjectParameter("new_Project_Code", typeof(int));
    
            var new_VolumeParameter = new_Volume != null ?
                new ObjectParameter("new_Volume", new_Volume) :
                new ObjectParameter("new_Volume", typeof(string));
    
            var new_FolioParameter = new_Folio.HasValue ?
                new ObjectParameter("new_Folio", new_Folio) :
                new ObjectParameter("new_Folio", typeof(int));
    
            var new_Title_ReferenceParameter = new_Title_Reference != null ?
                new ObjectParameter("new_Title_Reference", new_Title_Reference) :
                new ObjectParameter("new_Title_Reference", typeof(string));
    
            var new_TypeCodeParameter = new_TypeCode.HasValue ?
                new ObjectParameter("new_TypeCode", new_TypeCode) :
                new ObjectParameter("new_TypeCode", typeof(byte));
    
            var new_LandTypeCodeParameter = new_LandTypeCode.HasValue ?
                new ObjectParameter("new_LandTypeCode", new_LandTypeCode) :
                new ObjectParameter("new_LandTypeCode", typeof(byte));
    
            var new_Unit_NoParameter = new_Unit_No != null ?
                new ObjectParameter("new_Unit_No", new_Unit_No) :
                new ObjectParameter("new_Unit_No", typeof(string));
    
            var new_Plan_NoParameter = new_Plan_No != null ?
                new ObjectParameter("new_Plan_No", new_Plan_No) :
                new ObjectParameter("new_Plan_No", typeof(string));
    
            var new_Block_NoParameter = new_Block_No != null ?
                new ObjectParameter("new_Block_No", new_Block_No) :
                new ObjectParameter("new_Block_No", typeof(string));
    
            var new_Flat_N0Parameter = new_Flat_N0 != null ?
                new ObjectParameter("new_Flat_N0", new_Flat_N0) :
                new ObjectParameter("new_Flat_N0", typeof(string));
    
            var new_DistrictIDParameter = new_DistrictID.HasValue ?
                new ObjectParameter("new_DistrictID", new_DistrictID) :
                new ObjectParameter("new_DistrictID", typeof(byte));
    
            var new_Town_VillageParameter = new_Town_Village != null ?
                new ObjectParameter("new_Town_Village", new_Town_Village) :
                new ObjectParameter("new_Town_Village", typeof(string));
    
            var new_Plot_NoParameter = new_Plot_No != null ?
                new ObjectParameter("new_Plot_No", new_Plot_No) :
                new ObjectParameter("new_Plot_No", typeof(string));
    
            var new_Lease_Start_DateParameter = new_Lease_Start_Date.HasValue ?
                new ObjectParameter("new_Lease_Start_Date", new_Lease_Start_Date) :
                new ObjectParameter("new_Lease_Start_Date", typeof(System.DateTime));
    
            var new_Lease_End_DateParameter = new_Lease_End_Date.HasValue ?
                new ObjectParameter("new_Lease_End_Date", new_Lease_End_Date) :
                new ObjectParameter("new_Lease_End_Date", typeof(System.DateTime));
    
            var new_Ground_RentParameter = new_Ground_Rent.HasValue ?
                new ObjectParameter("new_Ground_Rent", new_Ground_Rent) :
                new ObjectParameter("new_Ground_Rent", typeof(int));
    
            var new_RatesParameter = new_Rates.HasValue ?
                new ObjectParameter("new_Rates", new_Rates) :
                new ObjectParameter("new_Rates", typeof(int));
    
            var new_Offer_ValueParameter = new_Offer_Value.HasValue ?
                new ObjectParameter("new_Offer_Value", new_Offer_Value) :
                new ObjectParameter("new_Offer_Value", typeof(decimal));
    
            var new_OfferPaidUPParameter = new_OfferPaidUP.HasValue ?
                new ObjectParameter("new_OfferPaidUP", new_OfferPaidUP) :
                new ObjectParameter("new_OfferPaidUP", typeof(bool));
    
            var new_PropertyStatusParameter = new_PropertyStatus.HasValue ?
                new ObjectParameter("new_PropertyStatus", new_PropertyStatus) :
                new ObjectParameter("new_PropertyStatus", typeof(byte));
    
            var new_AreaOfUnitParameter = new_AreaOfUnit.HasValue ?
                new ObjectParameter("new_AreaOfUnit", new_AreaOfUnit) :
                new ObjectParameter("new_AreaOfUnit", typeof(double));
    
            var new_FloorAreaLeasedParameter = new_FloorAreaLeased.HasValue ?
                new ObjectParameter("new_FloorAreaLeased", new_FloorAreaLeased) :
                new ObjectParameter("new_FloorAreaLeased", typeof(double));
    
            var new_UnitFactorParameter = new_UnitFactor.HasValue ?
                new ObjectParameter("new_UnitFactor", new_UnitFactor) :
                new ObjectParameter("new_UnitFactor", typeof(double));
    
            var new_RegDateParameter = new_RegDate.HasValue ?
                new ObjectParameter("new_RegDate", new_RegDate) :
                new ObjectParameter("new_RegDate", typeof(System.DateTime));
    
            var new_InstrumentNoParameter = new_InstrumentNo != null ?
                new ObjectParameter("new_InstrumentNo", new_InstrumentNo) :
                new ObjectParameter("new_InstrumentNo", typeof(string));
    
            var new_ProprietorNameParameter = new_ProprietorName != null ?
                new ObjectParameter("new_ProprietorName", new_ProprietorName) :
                new ObjectParameter("new_ProprietorName", typeof(string));
    
            var new_ProprietorAddressParameter = new_ProprietorAddress != null ?
                new ObjectParameter("new_ProprietorAddress", new_ProprietorAddress) :
                new ObjectParameter("new_ProprietorAddress", typeof(string));
    
            var new_RegistrarParameter = new_Registrar != null ?
                new ObjectParameter("new_Registrar", new_Registrar) :
                new ObjectParameter("new_Registrar", typeof(string));
    
            var new_BoardMinuteReleaseParameter = new_BoardMinuteRelease != null ?
                new ObjectParameter("new_BoardMinuteRelease", new_BoardMinuteRelease) :
                new ObjectParameter("new_BoardMinuteRelease", typeof(string));
    
            var new_DirectorsParameter = new_Directors != null ?
                new ObjectParameter("new_Directors", new_Directors) :
                new ObjectParameter("new_Directors", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spReport_AuditLog_PropertyTitleUpdate", edited_ByParameter, edited_DateParameter, auditActionParameter, original_Project_CodeParameter, original_VolumeParameter, original_FolioParameter, original_Title_ReferenceParameter, original_TypeCodeParameter, original_LandTypeCodeParameter, original_Unit_NoParameter, original_Plan_NoParameter, original_Block_NoParameter, original_Flat_N0Parameter, original_DistrictIDParameter, original_Town_VillageParameter, original_Plot_NoParameter, original_Lease_Start_DateParameter, original_Lease_End_DateParameter, original_Ground_RentParameter, original_RatesParameter, original_Offer_ValueParameter, original_OfferPaidUPParameter, original_PropertyStatusParameter, original_AreaOfUnitParameter, original_FloorAreaLeasedParameter, original_UnitFactorParameter, original_RegDateParameter, original_InstrumentNoParameter, original_ProprietorNameParameter, original_ProprietorAddressParameter, original_RegistrarParameter, original_BoardMinuteReleaseParameter, original_DirectorsParameter, new_Project_CodeParameter, new_VolumeParameter, new_FolioParameter, new_Title_ReferenceParameter, new_TypeCodeParameter, new_LandTypeCodeParameter, new_Unit_NoParameter, new_Plan_NoParameter, new_Block_NoParameter, new_Flat_N0Parameter, new_DistrictIDParameter, new_Town_VillageParameter, new_Plot_NoParameter, new_Lease_Start_DateParameter, new_Lease_End_DateParameter, new_Ground_RentParameter, new_RatesParameter, new_Offer_ValueParameter, new_OfferPaidUPParameter, new_PropertyStatusParameter, new_AreaOfUnitParameter, new_FloorAreaLeasedParameter, new_UnitFactorParameter, new_RegDateParameter, new_InstrumentNoParameter, new_ProprietorNameParameter, new_ProprietorAddressParameter, new_RegistrarParameter, new_BoardMinuteReleaseParameter, new_DirectorsParameter);
        }
    
        public virtual int spReport_Condomonium_Newest_PropertiesGetAll(Nullable<int> landCode, Nullable<int> project_Code, string volume, Nullable<int> folio)
        {
            var landCodeParameter = landCode.HasValue ?
                new ObjectParameter("LandCode", landCode) :
                new ObjectParameter("LandCode", typeof(int));
    
            var project_CodeParameter = project_Code.HasValue ?
                new ObjectParameter("Project_Code", project_Code) :
                new ObjectParameter("Project_Code", typeof(int));
    
            var volumeParameter = volume != null ?
                new ObjectParameter("Volume", volume) :
                new ObjectParameter("Volume", typeof(string));
    
            var folioParameter = folio.HasValue ?
                new ObjectParameter("Folio", folio) :
                new ObjectParameter("Folio", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spReport_Condomonium_Newest_PropertiesGetAll", landCodeParameter, project_CodeParameter, volumeParameter, folioParameter);
        }
    
        public virtual int spReport_Condomonium_No_Folio_PropertiesGetAll(Nullable<int> landCode, Nullable<int> project_Code, string volume)
        {
            var landCodeParameter = landCode.HasValue ?
                new ObjectParameter("LandCode", landCode) :
                new ObjectParameter("LandCode", typeof(int));
    
            var project_CodeParameter = project_Code.HasValue ?
                new ObjectParameter("Project_Code", project_Code) :
                new ObjectParameter("Project_Code", typeof(int));
    
            var volumeParameter = volume != null ?
                new ObjectParameter("Volume", volume) :
                new ObjectParameter("Volume", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spReport_Condomonium_No_Folio_PropertiesGetAll", landCodeParameter, project_CodeParameter, volumeParameter);
        }
    
        public virtual ObjectResult<spReport_New_Added_AuditLog_PropertyTitleGetAll_Result> spReport_New_Added_AuditLog_PropertyTitleGetAll(string addedby, Nullable<System.DateTime> movement_Date01, Nullable<System.DateTime> movement_Date02)
        {
            var addedbyParameter = addedby != null ?
                new ObjectParameter("addedby", addedby) :
                new ObjectParameter("addedby", typeof(string));
    
            var movement_Date01Parameter = movement_Date01.HasValue ?
                new ObjectParameter("Movement_Date01", movement_Date01) :
                new ObjectParameter("Movement_Date01", typeof(System.DateTime));
    
            var movement_Date02Parameter = movement_Date02.HasValue ?
                new ObjectParameter("Movement_Date02", movement_Date02) :
                new ObjectParameter("Movement_Date02", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spReport_New_Added_AuditLog_PropertyTitleGetAll_Result>("spReport_New_Added_AuditLog_PropertyTitleGetAll", addedbyParameter, movement_Date01Parameter, movement_Date02Parameter);
        }
    
        public virtual ObjectResult<spReport_New_AuditLog_PropertyPaymentGetAll_Result> spReport_New_AuditLog_PropertyPaymentGetAll(string editedby, Nullable<System.DateTime> movement_Date01, Nullable<System.DateTime> movement_Date02, string audit_action)
        {
            var editedbyParameter = editedby != null ?
                new ObjectParameter("editedby", editedby) :
                new ObjectParameter("editedby", typeof(string));
    
            var movement_Date01Parameter = movement_Date01.HasValue ?
                new ObjectParameter("Movement_Date01", movement_Date01) :
                new ObjectParameter("Movement_Date01", typeof(System.DateTime));
    
            var movement_Date02Parameter = movement_Date02.HasValue ?
                new ObjectParameter("Movement_Date02", movement_Date02) :
                new ObjectParameter("Movement_Date02", typeof(System.DateTime));
    
            var audit_actionParameter = audit_action != null ?
                new ObjectParameter("audit_action", audit_action) :
                new ObjectParameter("audit_action", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spReport_New_AuditLog_PropertyPaymentGetAll_Result>("spReport_New_AuditLog_PropertyPaymentGetAll", editedbyParameter, movement_Date01Parameter, movement_Date02Parameter, audit_actionParameter);
        }
    
        public virtual ObjectResult<spReport_New_AuditLog_PropertyTitleGetAll_Result> spReport_New_AuditLog_PropertyTitleGetAll(string editedby, Nullable<System.DateTime> movement_Date01, Nullable<System.DateTime> movement_Date02, string audit_action)
        {
            var editedbyParameter = editedby != null ?
                new ObjectParameter("editedby", editedby) :
                new ObjectParameter("editedby", typeof(string));
    
            var movement_Date01Parameter = movement_Date01.HasValue ?
                new ObjectParameter("Movement_Date01", movement_Date01) :
                new ObjectParameter("Movement_Date01", typeof(System.DateTime));
    
            var movement_Date02Parameter = movement_Date02.HasValue ?
                new ObjectParameter("Movement_Date02", movement_Date02) :
                new ObjectParameter("Movement_Date02", typeof(System.DateTime));
    
            var audit_actionParameter = audit_action != null ?
                new ObjectParameter("audit_action", audit_action) :
                new ObjectParameter("audit_action", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spReport_New_AuditLog_PropertyTitleGetAll_Result>("spReport_New_AuditLog_PropertyTitleGetAll", editedbyParameter, movement_Date01Parameter, movement_Date02Parameter, audit_actionParameter);
        }
    
        public virtual ObjectResult<spReport_New_AuditLog_PropertyTitleMovtGetAll_Result> spReport_New_AuditLog_PropertyTitleMovtGetAll(string editedby, Nullable<System.DateTime> movement_Date01, Nullable<System.DateTime> movement_Date02)
        {
            var editedbyParameter = editedby != null ?
                new ObjectParameter("editedby", editedby) :
                new ObjectParameter("editedby", typeof(string));
    
            var movement_Date01Parameter = movement_Date01.HasValue ?
                new ObjectParameter("Movement_Date01", movement_Date01) :
                new ObjectParameter("Movement_Date01", typeof(System.DateTime));
    
            var movement_Date02Parameter = movement_Date02.HasValue ?
                new ObjectParameter("Movement_Date02", movement_Date02) :
                new ObjectParameter("Movement_Date02", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spReport_New_AuditLog_PropertyTitleMovtGetAll_Result>("spReport_New_AuditLog_PropertyTitleMovtGetAll", editedbyParameter, movement_Date01Parameter, movement_Date02Parameter);
        }
    
        public virtual ObjectResult<spReport_New_AuditLogLandTitles_PropertyTitleMovtGetAll_Result> spReport_New_AuditLogLandTitles_PropertyTitleMovtGetAll(string editedby, Nullable<System.DateTime> movement_Date01, Nullable<System.DateTime> movement_Date02)
        {
            var editedbyParameter = editedby != null ?
                new ObjectParameter("editedby", editedby) :
                new ObjectParameter("editedby", typeof(string));
    
            var movement_Date01Parameter = movement_Date01.HasValue ?
                new ObjectParameter("Movement_Date01", movement_Date01) :
                new ObjectParameter("Movement_Date01", typeof(System.DateTime));
    
            var movement_Date02Parameter = movement_Date02.HasValue ?
                new ObjectParameter("Movement_Date02", movement_Date02) :
                new ObjectParameter("Movement_Date02", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spReport_New_AuditLogLandTitles_PropertyTitleMovtGetAll_Result>("spReport_New_AuditLogLandTitles_PropertyTitleMovtGetAll", editedbyParameter, movement_Date01Parameter, movement_Date02Parameter);
        }
    
        public virtual ObjectResult<spReport_New_AuditLogPropTypes_PropertyTitleMovtGetAll_Result> spReport_New_AuditLogPropTypes_PropertyTitleMovtGetAll(string editedby, Nullable<System.DateTime> movement_Date01, Nullable<System.DateTime> movement_Date02)
        {
            var editedbyParameter = editedby != null ?
                new ObjectParameter("editedby", editedby) :
                new ObjectParameter("editedby", typeof(string));
    
            var movement_Date01Parameter = movement_Date01.HasValue ?
                new ObjectParameter("Movement_Date01", movement_Date01) :
                new ObjectParameter("Movement_Date01", typeof(System.DateTime));
    
            var movement_Date02Parameter = movement_Date02.HasValue ?
                new ObjectParameter("Movement_Date02", movement_Date02) :
                new ObjectParameter("Movement_Date02", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spReport_New_AuditLogPropTypes_PropertyTitleMovtGetAll_Result>("spReport_New_AuditLogPropTypes_PropertyTitleMovtGetAll", editedbyParameter, movement_Date01Parameter, movement_Date02Parameter);
        }
    
        public virtual ObjectResult<spReport_New_Edited_AuditLog_PropertyTitleGetAll_Result> spReport_New_Edited_AuditLog_PropertyTitleGetAll(string editedby, Nullable<System.DateTime> movement_Date01, Nullable<System.DateTime> movement_Date02)
        {
            var editedbyParameter = editedby != null ?
                new ObjectParameter("editedby", editedby) :
                new ObjectParameter("editedby", typeof(string));
    
            var movement_Date01Parameter = movement_Date01.HasValue ?
                new ObjectParameter("Movement_Date01", movement_Date01) :
                new ObjectParameter("Movement_Date01", typeof(System.DateTime));
    
            var movement_Date02Parameter = movement_Date02.HasValue ?
                new ObjectParameter("Movement_Date02", movement_Date02) :
                new ObjectParameter("Movement_Date02", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spReport_New_Edited_AuditLog_PropertyTitleGetAll_Result>("spReport_New_Edited_AuditLog_PropertyTitleGetAll", editedbyParameter, movement_Date01Parameter, movement_Date02Parameter);
        }
    
        public virtual ObjectResult<spReport_New_Edited_AuditLog_PropertyTitleMovtGetAll_Result> spReport_New_Edited_AuditLog_PropertyTitleMovtGetAll(string editedby, Nullable<System.DateTime> movement_Date01, Nullable<System.DateTime> movement_Date02)
        {
            var editedbyParameter = editedby != null ?
                new ObjectParameter("editedby", editedby) :
                new ObjectParameter("editedby", typeof(string));
    
            var movement_Date01Parameter = movement_Date01.HasValue ?
                new ObjectParameter("Movement_Date01", movement_Date01) :
                new ObjectParameter("Movement_Date01", typeof(System.DateTime));
    
            var movement_Date02Parameter = movement_Date02.HasValue ?
                new ObjectParameter("Movement_Date02", movement_Date02) :
                new ObjectParameter("Movement_Date02", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spReport_New_Edited_AuditLog_PropertyTitleMovtGetAll_Result>("spReport_New_Edited_AuditLog_PropertyTitleMovtGetAll", editedbyParameter, movement_Date01Parameter, movement_Date02Parameter);
        }
    
        public virtual ObjectResult<spReport_New_LeaseNotificationsGetAll_Result> spReport_New_LeaseNotificationsGetAll(string location_desc, string leasetype)
        {
            var location_descParameter = location_desc != null ?
                new ObjectParameter("location_desc", location_desc) :
                new ObjectParameter("location_desc", typeof(string));
    
            var leasetypeParameter = leasetype != null ?
                new ObjectParameter("leasetype", leasetype) :
                new ObjectParameter("leasetype", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spReport_New_LeaseNotificationsGetAll_Result>("spReport_New_LeaseNotificationsGetAll", location_descParameter, leasetypeParameter);
        }
    
        public virtual ObjectResult<spReport_New_New_New_GroupBy_ManagementReportGetAll_Result> spReport_New_New_New_GroupBy_ManagementReportGetAll(string project_Desc, string typeDesc)
        {
            var project_DescParameter = project_Desc != null ?
                new ObjectParameter("Project_Desc", project_Desc) :
                new ObjectParameter("Project_Desc", typeof(string));
    
            var typeDescParameter = typeDesc != null ?
                new ObjectParameter("TypeDesc", typeDesc) :
                new ObjectParameter("TypeDesc", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spReport_New_New_New_GroupBy_ManagementReportGetAll_Result>("spReport_New_New_New_GroupBy_ManagementReportGetAll", project_DescParameter, typeDescParameter);
        }
    
        public virtual ObjectResult<spReport_NewAdded_AuditLog_PropertyTitleMovtGetAll_Result> spReport_NewAdded_AuditLog_PropertyTitleMovtGetAll(string addedby, Nullable<System.DateTime> movement_Date01, Nullable<System.DateTime> movement_Date02)
        {
            var addedbyParameter = addedby != null ?
                new ObjectParameter("addedby", addedby) :
                new ObjectParameter("addedby", typeof(string));
    
            var movement_Date01Parameter = movement_Date01.HasValue ?
                new ObjectParameter("Movement_Date01", movement_Date01) :
                new ObjectParameter("Movement_Date01", typeof(System.DateTime));
    
            var movement_Date02Parameter = movement_Date02.HasValue ?
                new ObjectParameter("Movement_Date02", movement_Date02) :
                new ObjectParameter("Movement_Date02", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spReport_NewAdded_AuditLog_PropertyTitleMovtGetAll_Result>("spReport_NewAdded_AuditLog_PropertyTitleMovtGetAll", addedbyParameter, movement_Date01Parameter, movement_Date02Parameter);
        }
    
        public virtual ObjectResult<spReport_NewAddedLandTitles_AuditLog_PropertyTitleMovtGetAll_Result> spReport_NewAddedLandTitles_AuditLog_PropertyTitleMovtGetAll(string addedby, Nullable<System.DateTime> movement_Date01, Nullable<System.DateTime> movement_Date02)
        {
            var addedbyParameter = addedby != null ?
                new ObjectParameter("addedby", addedby) :
                new ObjectParameter("addedby", typeof(string));
    
            var movement_Date01Parameter = movement_Date01.HasValue ?
                new ObjectParameter("Movement_Date01", movement_Date01) :
                new ObjectParameter("Movement_Date01", typeof(System.DateTime));
    
            var movement_Date02Parameter = movement_Date02.HasValue ?
                new ObjectParameter("Movement_Date02", movement_Date02) :
                new ObjectParameter("Movement_Date02", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spReport_NewAddedLandTitles_AuditLog_PropertyTitleMovtGetAll_Result>("spReport_NewAddedLandTitles_AuditLog_PropertyTitleMovtGetAll", addedbyParameter, movement_Date01Parameter, movement_Date02Parameter);
        }
    
        public virtual ObjectResult<spReport_NewAddedPropTypes_AuditLog_PropertyTitleMovtGetAll_Result> spReport_NewAddedPropTypes_AuditLog_PropertyTitleMovtGetAll(string addedby, Nullable<System.DateTime> movement_Date01, Nullable<System.DateTime> movement_Date02)
        {
            var addedbyParameter = addedby != null ?
                new ObjectParameter("addedby", addedby) :
                new ObjectParameter("addedby", typeof(string));
    
            var movement_Date01Parameter = movement_Date01.HasValue ?
                new ObjectParameter("Movement_Date01", movement_Date01) :
                new ObjectParameter("Movement_Date01", typeof(System.DateTime));
    
            var movement_Date02Parameter = movement_Date02.HasValue ?
                new ObjectParameter("Movement_Date02", movement_Date02) :
                new ObjectParameter("Movement_Date02", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spReport_NewAddedPropTypes_AuditLog_PropertyTitleMovtGetAll_Result>("spReport_NewAddedPropTypes_AuditLog_PropertyTitleMovtGetAll", addedbyParameter, movement_Date01Parameter, movement_Date02Parameter);
        }
    
        public virtual ObjectResult<spReport_NewAllAdded_AuditLog_PropertyPaymentGetAll_Result> spReport_NewAllAdded_AuditLog_PropertyPaymentGetAll(string addedby, Nullable<System.DateTime> movement_Date01, Nullable<System.DateTime> movement_Date02)
        {
            var addedbyParameter = addedby != null ?
                new ObjectParameter("addedby", addedby) :
                new ObjectParameter("addedby", typeof(string));
    
            var movement_Date01Parameter = movement_Date01.HasValue ?
                new ObjectParameter("Movement_Date01", movement_Date01) :
                new ObjectParameter("Movement_Date01", typeof(System.DateTime));
    
            var movement_Date02Parameter = movement_Date02.HasValue ?
                new ObjectParameter("Movement_Date02", movement_Date02) :
                new ObjectParameter("Movement_Date02", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spReport_NewAllAdded_AuditLog_PropertyPaymentGetAll_Result>("spReport_NewAllAdded_AuditLog_PropertyPaymentGetAll", addedbyParameter, movement_Date01Parameter, movement_Date02Parameter);
        }
    
        public virtual ObjectResult<spReport_NewAllAddedLandTitles_AuditLog_PropertyPaymentGetAll_Result> spReport_NewAllAddedLandTitles_AuditLog_PropertyPaymentGetAll(string addedby, Nullable<System.DateTime> movement_Date01, Nullable<System.DateTime> movement_Date02)
        {
            var addedbyParameter = addedby != null ?
                new ObjectParameter("addedby", addedby) :
                new ObjectParameter("addedby", typeof(string));
    
            var movement_Date01Parameter = movement_Date01.HasValue ?
                new ObjectParameter("Movement_Date01", movement_Date01) :
                new ObjectParameter("Movement_Date01", typeof(System.DateTime));
    
            var movement_Date02Parameter = movement_Date02.HasValue ?
                new ObjectParameter("Movement_Date02", movement_Date02) :
                new ObjectParameter("Movement_Date02", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spReport_NewAllAddedLandTitles_AuditLog_PropertyPaymentGetAll_Result>("spReport_NewAllAddedLandTitles_AuditLog_PropertyPaymentGetAll", addedbyParameter, movement_Date01Parameter, movement_Date02Parameter);
        }
    
        public virtual ObjectResult<spReport_NewAllAddedPropTypes_AuditLog_PropertyPaymentGetAll_Result> spReport_NewAllAddedPropTypes_AuditLog_PropertyPaymentGetAll(string addedby, Nullable<System.DateTime> movement_Date01, Nullable<System.DateTime> movement_Date02)
        {
            var addedbyParameter = addedby != null ?
                new ObjectParameter("addedby", addedby) :
                new ObjectParameter("addedby", typeof(string));
    
            var movement_Date01Parameter = movement_Date01.HasValue ?
                new ObjectParameter("Movement_Date01", movement_Date01) :
                new ObjectParameter("Movement_Date01", typeof(System.DateTime));
    
            var movement_Date02Parameter = movement_Date02.HasValue ?
                new ObjectParameter("Movement_Date02", movement_Date02) :
                new ObjectParameter("Movement_Date02", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spReport_NewAllAddedPropTypes_AuditLog_PropertyPaymentGetAll_Result>("spReport_NewAllAddedPropTypes_AuditLog_PropertyPaymentGetAll", addedbyParameter, movement_Date01Parameter, movement_Date02Parameter);
        }
    
        public virtual ObjectResult<spReport_NewAllAddedTitles_AuditLog_PropertyTitleGetAll_Result> spReport_NewAllAddedTitles_AuditLog_PropertyTitleGetAll(string addedby, string landDesc, Nullable<System.DateTime> movement_Date01, Nullable<System.DateTime> movement_Date02)
        {
            var addedbyParameter = addedby != null ?
                new ObjectParameter("addedby", addedby) :
                new ObjectParameter("addedby", typeof(string));
    
            var landDescParameter = landDesc != null ?
                new ObjectParameter("LandDesc", landDesc) :
                new ObjectParameter("LandDesc", typeof(string));
    
            var movement_Date01Parameter = movement_Date01.HasValue ?
                new ObjectParameter("Movement_Date01", movement_Date01) :
                new ObjectParameter("Movement_Date01", typeof(System.DateTime));
    
            var movement_Date02Parameter = movement_Date02.HasValue ?
                new ObjectParameter("Movement_Date02", movement_Date02) :
                new ObjectParameter("Movement_Date02", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spReport_NewAllAddedTitles_AuditLog_PropertyTitleGetAll_Result>("spReport_NewAllAddedTitles_AuditLog_PropertyTitleGetAll", addedbyParameter, landDescParameter, movement_Date01Parameter, movement_Date02Parameter);
        }
    
        public virtual ObjectResult<spReport_NewAllAddedTitlesSumLandTitles_AuditLog_PropertyTitleGetAll_Result> spReport_NewAllAddedTitlesSumLandTitles_AuditLog_PropertyTitleGetAll(string addedby, string landDesc, Nullable<System.DateTime> movement_Date01, Nullable<System.DateTime> movement_Date02)
        {
            var addedbyParameter = addedby != null ?
                new ObjectParameter("addedby", addedby) :
                new ObjectParameter("addedby", typeof(string));
    
            var landDescParameter = landDesc != null ?
                new ObjectParameter("LandDesc", landDesc) :
                new ObjectParameter("LandDesc", typeof(string));
    
            var movement_Date01Parameter = movement_Date01.HasValue ?
                new ObjectParameter("Movement_Date01", movement_Date01) :
                new ObjectParameter("Movement_Date01", typeof(System.DateTime));
    
            var movement_Date02Parameter = movement_Date02.HasValue ?
                new ObjectParameter("Movement_Date02", movement_Date02) :
                new ObjectParameter("Movement_Date02", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spReport_NewAllAddedTitlesSumLandTitles_AuditLog_PropertyTitleGetAll_Result>("spReport_NewAllAddedTitlesSumLandTitles_AuditLog_PropertyTitleGetAll", addedbyParameter, landDescParameter, movement_Date01Parameter, movement_Date02Parameter);
        }
    
        public virtual ObjectResult<spReport_NewAllAddedTitlesSumPropTypes_AuditLog_PropertyTitleGetAll_Result> spReport_NewAllAddedTitlesSumPropTypes_AuditLog_PropertyTitleGetAll(string addedby, string landDesc, Nullable<System.DateTime> movement_Date01, Nullable<System.DateTime> movement_Date02)
        {
            var addedbyParameter = addedby != null ?
                new ObjectParameter("addedby", addedby) :
                new ObjectParameter("addedby", typeof(string));
    
            var landDescParameter = landDesc != null ?
                new ObjectParameter("LandDesc", landDesc) :
                new ObjectParameter("LandDesc", typeof(string));
    
            var movement_Date01Parameter = movement_Date01.HasValue ?
                new ObjectParameter("Movement_Date01", movement_Date01) :
                new ObjectParameter("Movement_Date01", typeof(System.DateTime));
    
            var movement_Date02Parameter = movement_Date02.HasValue ?
                new ObjectParameter("Movement_Date02", movement_Date02) :
                new ObjectParameter("Movement_Date02", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spReport_NewAllAddedTitlesSumPropTypes_AuditLog_PropertyTitleGetAll_Result>("spReport_NewAllAddedTitlesSumPropTypes_AuditLog_PropertyTitleGetAll", addedbyParameter, landDescParameter, movement_Date01Parameter, movement_Date02Parameter);
        }
    
        public virtual ObjectResult<spReport_NewAllApproved_AuditLog_PropertyPaymentGetAll_Result> spReport_NewAllApproved_AuditLog_PropertyPaymentGetAll(string approvedby, Nullable<System.DateTime> movement_Date01, Nullable<System.DateTime> movement_Date02)
        {
            var approvedbyParameter = approvedby != null ?
                new ObjectParameter("approvedby", approvedby) :
                new ObjectParameter("approvedby", typeof(string));
    
            var movement_Date01Parameter = movement_Date01.HasValue ?
                new ObjectParameter("Movement_Date01", movement_Date01) :
                new ObjectParameter("Movement_Date01", typeof(System.DateTime));
    
            var movement_Date02Parameter = movement_Date02.HasValue ?
                new ObjectParameter("Movement_Date02", movement_Date02) :
                new ObjectParameter("Movement_Date02", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spReport_NewAllApproved_AuditLog_PropertyPaymentGetAll_Result>("spReport_NewAllApproved_AuditLog_PropertyPaymentGetAll", approvedbyParameter, movement_Date01Parameter, movement_Date02Parameter);
        }
    
        public virtual ObjectResult<spReport_NewAllApprovedSummary_AuditLog_PropertyPaymentGetAll_Result> spReport_NewAllApprovedSummary_AuditLog_PropertyPaymentGetAll(string approvedby, Nullable<System.DateTime> movement_Date01, Nullable<System.DateTime> movement_Date02)
        {
            var approvedbyParameter = approvedby != null ?
                new ObjectParameter("approvedby", approvedby) :
                new ObjectParameter("approvedby", typeof(string));
    
            var movement_Date01Parameter = movement_Date01.HasValue ?
                new ObjectParameter("Movement_Date01", movement_Date01) :
                new ObjectParameter("Movement_Date01", typeof(System.DateTime));
    
            var movement_Date02Parameter = movement_Date02.HasValue ?
                new ObjectParameter("Movement_Date02", movement_Date02) :
                new ObjectParameter("Movement_Date02", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spReport_NewAllApprovedSummary_AuditLog_PropertyPaymentGetAll_Result>("spReport_NewAllApprovedSummary_AuditLog_PropertyPaymentGetAll", approvedbyParameter, movement_Date01Parameter, movement_Date02Parameter);
        }
    
        public virtual ObjectResult<spReport_NewAllApprovedSummaryPropType_AuditLog_PropertyPaymentGetAll_Result> spReport_NewAllApprovedSummaryPropType_AuditLog_PropertyPaymentGetAll(string approvedby, Nullable<System.DateTime> movement_Date01, Nullable<System.DateTime> movement_Date02)
        {
            var approvedbyParameter = approvedby != null ?
                new ObjectParameter("approvedby", approvedby) :
                new ObjectParameter("approvedby", typeof(string));
    
            var movement_Date01Parameter = movement_Date01.HasValue ?
                new ObjectParameter("Movement_Date01", movement_Date01) :
                new ObjectParameter("Movement_Date01", typeof(System.DateTime));
    
            var movement_Date02Parameter = movement_Date02.HasValue ?
                new ObjectParameter("Movement_Date02", movement_Date02) :
                new ObjectParameter("Movement_Date02", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spReport_NewAllApprovedSummaryPropType_AuditLog_PropertyPaymentGetAll_Result>("spReport_NewAllApprovedSummaryPropType_AuditLog_PropertyPaymentGetAll", approvedbyParameter, movement_Date01Parameter, movement_Date02Parameter);
        }
    
        public virtual ObjectResult<spReport_NewAllEdited_AuditLog_PropertyPaymentGetAll_Result> spReport_NewAllEdited_AuditLog_PropertyPaymentGetAll(string editedby, Nullable<System.DateTime> movement_Date01, Nullable<System.DateTime> movement_Date02)
        {
            var editedbyParameter = editedby != null ?
                new ObjectParameter("editedby", editedby) :
                new ObjectParameter("editedby", typeof(string));
    
            var movement_Date01Parameter = movement_Date01.HasValue ?
                new ObjectParameter("Movement_Date01", movement_Date01) :
                new ObjectParameter("Movement_Date01", typeof(System.DateTime));
    
            var movement_Date02Parameter = movement_Date02.HasValue ?
                new ObjectParameter("Movement_Date02", movement_Date02) :
                new ObjectParameter("Movement_Date02", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spReport_NewAllEdited_AuditLog_PropertyPaymentGetAll_Result>("spReport_NewAllEdited_AuditLog_PropertyPaymentGetAll", editedbyParameter, movement_Date01Parameter, movement_Date02Parameter);
        }
    
        public virtual ObjectResult<spReport_NewAllEditedLandType_AuditLog_PropertyPaymentGetAll_Result> spReport_NewAllEditedLandType_AuditLog_PropertyPaymentGetAll(string editedby, Nullable<System.DateTime> movement_Date01, Nullable<System.DateTime> movement_Date02)
        {
            var editedbyParameter = editedby != null ?
                new ObjectParameter("editedby", editedby) :
                new ObjectParameter("editedby", typeof(string));
    
            var movement_Date01Parameter = movement_Date01.HasValue ?
                new ObjectParameter("Movement_Date01", movement_Date01) :
                new ObjectParameter("Movement_Date01", typeof(System.DateTime));
    
            var movement_Date02Parameter = movement_Date02.HasValue ?
                new ObjectParameter("Movement_Date02", movement_Date02) :
                new ObjectParameter("Movement_Date02", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spReport_NewAllEditedLandType_AuditLog_PropertyPaymentGetAll_Result>("spReport_NewAllEditedLandType_AuditLog_PropertyPaymentGetAll", editedbyParameter, movement_Date01Parameter, movement_Date02Parameter);
        }
    
        public virtual ObjectResult<spReport_NewAllEditedPropType_AuditLog_PropertyPaymentGetAll_Result> spReport_NewAllEditedPropType_AuditLog_PropertyPaymentGetAll(string editedby, Nullable<System.DateTime> movement_Date01, Nullable<System.DateTime> movement_Date02)
        {
            var editedbyParameter = editedby != null ?
                new ObjectParameter("editedby", editedby) :
                new ObjectParameter("editedby", typeof(string));
    
            var movement_Date01Parameter = movement_Date01.HasValue ?
                new ObjectParameter("Movement_Date01", movement_Date01) :
                new ObjectParameter("Movement_Date01", typeof(System.DateTime));
    
            var movement_Date02Parameter = movement_Date02.HasValue ?
                new ObjectParameter("Movement_Date02", movement_Date02) :
                new ObjectParameter("Movement_Date02", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spReport_NewAllEditedPropType_AuditLog_PropertyPaymentGetAll_Result>("spReport_NewAllEditedPropType_AuditLog_PropertyPaymentGetAll", editedbyParameter, movement_Date01Parameter, movement_Date02Parameter);
        }
    
        public virtual ObjectResult<spReport_NewAllTitles_AuditLog_PropertyTitleGetAll_Result> spReport_NewAllTitles_AuditLog_PropertyTitleGetAll(string editedby, string landDesc, Nullable<System.DateTime> movement_Date01, Nullable<System.DateTime> movement_Date02)
        {
            var editedbyParameter = editedby != null ?
                new ObjectParameter("editedby", editedby) :
                new ObjectParameter("editedby", typeof(string));
    
            var landDescParameter = landDesc != null ?
                new ObjectParameter("LandDesc", landDesc) :
                new ObjectParameter("LandDesc", typeof(string));
    
            var movement_Date01Parameter = movement_Date01.HasValue ?
                new ObjectParameter("Movement_Date01", movement_Date01) :
                new ObjectParameter("Movement_Date01", typeof(System.DateTime));
    
            var movement_Date02Parameter = movement_Date02.HasValue ?
                new ObjectParameter("Movement_Date02", movement_Date02) :
                new ObjectParameter("Movement_Date02", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spReport_NewAllTitles_AuditLog_PropertyTitleGetAll_Result>("spReport_NewAllTitles_AuditLog_PropertyTitleGetAll", editedbyParameter, landDescParameter, movement_Date01Parameter, movement_Date02Parameter);
        }
    
        public virtual ObjectResult<spReport_NewAllTitlesLandTitles_AuditLog_PropertyTitleGetAll_Result> spReport_NewAllTitlesLandTitles_AuditLog_PropertyTitleGetAll(string editedby, string landDesc, Nullable<System.DateTime> movement_Date01, Nullable<System.DateTime> movement_Date02)
        {
            var editedbyParameter = editedby != null ?
                new ObjectParameter("editedby", editedby) :
                new ObjectParameter("editedby", typeof(string));
    
            var landDescParameter = landDesc != null ?
                new ObjectParameter("LandDesc", landDesc) :
                new ObjectParameter("LandDesc", typeof(string));
    
            var movement_Date01Parameter = movement_Date01.HasValue ?
                new ObjectParameter("Movement_Date01", movement_Date01) :
                new ObjectParameter("Movement_Date01", typeof(System.DateTime));
    
            var movement_Date02Parameter = movement_Date02.HasValue ?
                new ObjectParameter("Movement_Date02", movement_Date02) :
                new ObjectParameter("Movement_Date02", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spReport_NewAllTitlesLandTitles_AuditLog_PropertyTitleGetAll_Result>("spReport_NewAllTitlesLandTitles_AuditLog_PropertyTitleGetAll", editedbyParameter, landDescParameter, movement_Date01Parameter, movement_Date02Parameter);
        }
    
        public virtual ObjectResult<spReport_NewAllTitlesPropTypes_AuditLog_PropertyTitleGetAll_Result> spReport_NewAllTitlesPropTypes_AuditLog_PropertyTitleGetAll(string editedby, string landDesc, Nullable<System.DateTime> movement_Date01, Nullable<System.DateTime> movement_Date02)
        {
            var editedbyParameter = editedby != null ?
                new ObjectParameter("editedby", editedby) :
                new ObjectParameter("editedby", typeof(string));
    
            var landDescParameter = landDesc != null ?
                new ObjectParameter("LandDesc", landDesc) :
                new ObjectParameter("LandDesc", typeof(string));
    
            var movement_Date01Parameter = movement_Date01.HasValue ?
                new ObjectParameter("Movement_Date01", movement_Date01) :
                new ObjectParameter("Movement_Date01", typeof(System.DateTime));
    
            var movement_Date02Parameter = movement_Date02.HasValue ?
                new ObjectParameter("Movement_Date02", movement_Date02) :
                new ObjectParameter("Movement_Date02", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spReport_NewAllTitlesPropTypes_AuditLog_PropertyTitleGetAll_Result>("spReport_NewAllTitlesPropTypes_AuditLog_PropertyTitleGetAll", editedbyParameter, landDescParameter, movement_Date01Parameter, movement_Date02Parameter);
        }
    
        public virtual ObjectResult<spReport_NewApproved_AuditLog_PropertyTitleMovtGetAll_Result> spReport_NewApproved_AuditLog_PropertyTitleMovtGetAll(string approvedby, Nullable<System.DateTime> movement_Date01, Nullable<System.DateTime> movement_Date02)
        {
            var approvedbyParameter = approvedby != null ?
                new ObjectParameter("approvedby", approvedby) :
                new ObjectParameter("approvedby", typeof(string));
    
            var movement_Date01Parameter = movement_Date01.HasValue ?
                new ObjectParameter("Movement_Date01", movement_Date01) :
                new ObjectParameter("Movement_Date01", typeof(System.DateTime));
    
            var movement_Date02Parameter = movement_Date02.HasValue ?
                new ObjectParameter("Movement_Date02", movement_Date02) :
                new ObjectParameter("Movement_Date02", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spReport_NewApproved_AuditLog_PropertyTitleMovtGetAll_Result>("spReport_NewApproved_AuditLog_PropertyTitleMovtGetAll", approvedbyParameter, movement_Date01Parameter, movement_Date02Parameter);
        }
    
        public virtual ObjectResult<spReport_NewApprovedSummary_AuditLog_PropertyTitleMovtGetAll_Result> spReport_NewApprovedSummary_AuditLog_PropertyTitleMovtGetAll(string approvedby, Nullable<System.DateTime> movement_Date01, Nullable<System.DateTime> movement_Date02)
        {
            var approvedbyParameter = approvedby != null ?
                new ObjectParameter("approvedby", approvedby) :
                new ObjectParameter("approvedby", typeof(string));
    
            var movement_Date01Parameter = movement_Date01.HasValue ?
                new ObjectParameter("Movement_Date01", movement_Date01) :
                new ObjectParameter("Movement_Date01", typeof(System.DateTime));
    
            var movement_Date02Parameter = movement_Date02.HasValue ?
                new ObjectParameter("Movement_Date02", movement_Date02) :
                new ObjectParameter("Movement_Date02", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spReport_NewApprovedSummary_AuditLog_PropertyTitleMovtGetAll_Result>("spReport_NewApprovedSummary_AuditLog_PropertyTitleMovtGetAll", approvedbyParameter, movement_Date01Parameter, movement_Date02Parameter);
        }
    
        public virtual ObjectResult<spReport_NewApprovedSummaryPropType_AuditLog_PropertyTitleMovtGetAll_Result> spReport_NewApprovedSummaryPropType_AuditLog_PropertyTitleMovtGetAll(string approvedby, Nullable<System.DateTime> movement_Date01, Nullable<System.DateTime> movement_Date02)
        {
            var approvedbyParameter = approvedby != null ?
                new ObjectParameter("approvedby", approvedby) :
                new ObjectParameter("approvedby", typeof(string));
    
            var movement_Date01Parameter = movement_Date01.HasValue ?
                new ObjectParameter("Movement_Date01", movement_Date01) :
                new ObjectParameter("Movement_Date01", typeof(System.DateTime));
    
            var movement_Date02Parameter = movement_Date02.HasValue ?
                new ObjectParameter("Movement_Date02", movement_Date02) :
                new ObjectParameter("Movement_Date02", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spReport_NewApprovedSummaryPropType_AuditLog_PropertyTitleMovtGetAll_Result>("spReport_NewApprovedSummaryPropType_AuditLog_PropertyTitleMovtGetAll", approvedbyParameter, movement_Date01Parameter, movement_Date02Parameter);
        }
    
        public virtual ObjectResult<spReport_OffersManagementGetAll_Result> spReport_OffersManagementGetAll(string project_Desc, string statusDesc, Nullable<int> total, Nullable<System.DateTime> offerDate)
        {
            var project_DescParameter = project_Desc != null ?
                new ObjectParameter("Project_Desc", project_Desc) :
                new ObjectParameter("Project_Desc", typeof(string));
    
            var statusDescParameter = statusDesc != null ?
                new ObjectParameter("StatusDesc", statusDesc) :
                new ObjectParameter("StatusDesc", typeof(string));
    
            var totalParameter = total.HasValue ?
                new ObjectParameter("Total", total) :
                new ObjectParameter("Total", typeof(int));
    
            var offerDateParameter = offerDate.HasValue ?
                new ObjectParameter("OfferDate", offerDate) :
                new ObjectParameter("OfferDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spReport_OffersManagementGetAll_Result>("spReport_OffersManagementGetAll", project_DescParameter, statusDescParameter, totalParameter, offerDateParameter);
        }
    
        public virtual ObjectResult<spReport_Split_New_AllPropertyTitlesGetAll_Result> spReport_Split_New_AllPropertyTitlesGetAll(string location_desc, string land_code)
        {
            var location_descParameter = location_desc != null ?
                new ObjectParameter("location_desc", location_desc) :
                new ObjectParameter("location_desc", typeof(string));
    
            var land_codeParameter = land_code != null ?
                new ObjectParameter("land_code", land_code) :
                new ObjectParameter("land_code", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spReport_Split_New_AllPropertyTitlesGetAll_Result>("spReport_Split_New_AllPropertyTitlesGetAll", location_descParameter, land_codeParameter);
        }
    
        public virtual ObjectResult<spReport_Split_New_LeaseHoldPropertyTitlesGetAll_Result> spReport_Split_New_LeaseHoldPropertyTitlesGetAll(Nullable<System.DateTime> lease_End_Date01, Nullable<System.DateTime> lease_End_Date02, string location_desc, string typedesc)
        {
            var lease_End_Date01Parameter = lease_End_Date01.HasValue ?
                new ObjectParameter("Lease_End_Date01", lease_End_Date01) :
                new ObjectParameter("Lease_End_Date01", typeof(System.DateTime));
    
            var lease_End_Date02Parameter = lease_End_Date02.HasValue ?
                new ObjectParameter("Lease_End_Date02", lease_End_Date02) :
                new ObjectParameter("Lease_End_Date02", typeof(System.DateTime));
    
            var location_descParameter = location_desc != null ?
                new ObjectParameter("location_desc", location_desc) :
                new ObjectParameter("location_desc", typeof(string));
    
            var typedescParameter = typedesc != null ?
                new ObjectParameter("typedesc", typedesc) :
                new ObjectParameter("typedesc", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spReport_Split_New_LeaseHoldPropertyTitlesGetAll_Result>("spReport_Split_New_LeaseHoldPropertyTitlesGetAll", lease_End_Date01Parameter, lease_End_Date02Parameter, location_descParameter, typedescParameter);
        }
    
        public virtual ObjectResult<spReport_Split_New_New_CondomoniumPropertiesGetAll_Result> spReport_Split_New_New_CondomoniumPropertiesGetAll(Nullable<int> folio1, Nullable<int> folio2, string volume, string landdesc, string location_desc)
        {
            var folio1Parameter = folio1.HasValue ?
                new ObjectParameter("Folio1", folio1) :
                new ObjectParameter("Folio1", typeof(int));
    
            var folio2Parameter = folio2.HasValue ?
                new ObjectParameter("Folio2", folio2) :
                new ObjectParameter("Folio2", typeof(int));
    
            var volumeParameter = volume != null ?
                new ObjectParameter("volume", volume) :
                new ObjectParameter("volume", typeof(string));
    
            var landdescParameter = landdesc != null ?
                new ObjectParameter("landdesc", landdesc) :
                new ObjectParameter("landdesc", typeof(string));
    
            var location_descParameter = location_desc != null ?
                new ObjectParameter("location_desc", location_desc) :
                new ObjectParameter("location_desc", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spReport_Split_New_New_CondomoniumPropertiesGetAll_Result>("spReport_Split_New_New_CondomoniumPropertiesGetAll", folio1Parameter, folio2Parameter, volumeParameter, landdescParameter, location_descParameter);
        }
    
        public virtual ObjectResult<spReport_Split_New_New_FreeholdPropertiesGetAll_Result> spReport_Split_New_New_FreeholdPropertiesGetAll(Nullable<int> folio1, Nullable<int> folio2, string volume, string location_desc, string typedesc)
        {
            var folio1Parameter = folio1.HasValue ?
                new ObjectParameter("Folio1", folio1) :
                new ObjectParameter("Folio1", typeof(int));
    
            var folio2Parameter = folio2.HasValue ?
                new ObjectParameter("Folio2", folio2) :
                new ObjectParameter("Folio2", typeof(int));
    
            var volumeParameter = volume != null ?
                new ObjectParameter("volume", volume) :
                new ObjectParameter("volume", typeof(string));
    
            var location_descParameter = location_desc != null ?
                new ObjectParameter("location_desc", location_desc) :
                new ObjectParameter("location_desc", typeof(string));
    
            var typedescParameter = typedesc != null ?
                new ObjectParameter("typedesc", typedesc) :
                new ObjectParameter("typedesc", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spReport_Split_New_New_FreeholdPropertiesGetAll_Result>("spReport_Split_New_New_FreeholdPropertiesGetAll", folio1Parameter, folio2Parameter, volumeParameter, location_descParameter, typedescParameter);
        }
    
        public virtual ObjectResult<spReport_Split_New_New_MailoLandPropertyTitlesGetAll_Result> spReport_Split_New_New_MailoLandPropertyTitlesGetAll(string location_desc, string typedesc)
        {
            var location_descParameter = location_desc != null ?
                new ObjectParameter("location_desc", location_desc) :
                new ObjectParameter("location_desc", typeof(string));
    
            var typedescParameter = typedesc != null ?
                new ObjectParameter("typedesc", typedesc) :
                new ObjectParameter("typedesc", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spReport_Split_New_New_MailoLandPropertyTitlesGetAll_Result>("spReport_Split_New_New_MailoLandPropertyTitlesGetAll", location_descParameter, typedescParameter);
        }
    
        public virtual ObjectResult<spReport_Split_New_New_MailoLandSummaryPropertyTitlesGetAll_Result> spReport_Split_New_New_MailoLandSummaryPropertyTitlesGetAll(string location_desc, string typedesc)
        {
            var location_descParameter = location_desc != null ?
                new ObjectParameter("location_desc", location_desc) :
                new ObjectParameter("location_desc", typeof(string));
    
            var typedescParameter = typedesc != null ?
                new ObjectParameter("typedesc", typedesc) :
                new ObjectParameter("typedesc", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spReport_Split_New_New_MailoLandSummaryPropertyTitlesGetAll_Result>("spReport_Split_New_New_MailoLandSummaryPropertyTitlesGetAll", location_descParameter, typedescParameter);
        }
    
        public virtual ObjectResult<spReport_Split_New_New_New_ManagementReportGetAll_Result> spReport_Split_New_New_New_ManagementReportGetAll(string location_desc, string typedesc)
        {
            var location_descParameter = location_desc != null ?
                new ObjectParameter("location_desc", location_desc) :
                new ObjectParameter("location_desc", typeof(string));
    
            var typedescParameter = typedesc != null ?
                new ObjectParameter("typedesc", typedesc) :
                new ObjectParameter("typedesc", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spReport_Split_New_New_New_ManagementReportGetAll_Result>("spReport_Split_New_New_New_ManagementReportGetAll", location_descParameter, typedescParameter);
        }
    
        public virtual ObjectResult<spReport_Split_New_New_New_SoldPropertiesGetAll_Result> spReport_Split_New_New_New_SoldPropertiesGetAll(string title_reference, string landdesc, string location_desc)
        {
            var title_referenceParameter = title_reference != null ?
                new ObjectParameter("title_reference", title_reference) :
                new ObjectParameter("title_reference", typeof(string));
    
            var landdescParameter = landdesc != null ?
                new ObjectParameter("landdesc", landdesc) :
                new ObjectParameter("landdesc", typeof(string));
    
            var location_descParameter = location_desc != null ?
                new ObjectParameter("location_desc", location_desc) :
                new ObjectParameter("location_desc", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spReport_Split_New_New_New_SoldPropertiesGetAll_Result>("spReport_Split_New_New_New_SoldPropertiesGetAll", title_referenceParameter, landdescParameter, location_descParameter);
        }
    
        public virtual ObjectResult<spReport_Split_New_New_New_TitleMovements_Dates_GetAll_Result> spReport_Split_New_New_New_TitleMovements_Dates_GetAll(Nullable<System.DateTime> movement_Date01, Nullable<System.DateTime> movement_Date02, string volume, string location_desc, string destinydesc, string purpose_description, string typedesc)
        {
            var movement_Date01Parameter = movement_Date01.HasValue ?
                new ObjectParameter("Movement_Date01", movement_Date01) :
                new ObjectParameter("Movement_Date01", typeof(System.DateTime));
    
            var movement_Date02Parameter = movement_Date02.HasValue ?
                new ObjectParameter("Movement_Date02", movement_Date02) :
                new ObjectParameter("Movement_Date02", typeof(System.DateTime));
    
            var volumeParameter = volume != null ?
                new ObjectParameter("volume", volume) :
                new ObjectParameter("volume", typeof(string));
    
            var location_descParameter = location_desc != null ?
                new ObjectParameter("location_desc", location_desc) :
                new ObjectParameter("location_desc", typeof(string));
    
            var destinydescParameter = destinydesc != null ?
                new ObjectParameter("destinydesc", destinydesc) :
                new ObjectParameter("destinydesc", typeof(string));
    
            var purpose_descriptionParameter = purpose_description != null ?
                new ObjectParameter("purpose_description", purpose_description) :
                new ObjectParameter("purpose_description", typeof(string));
    
            var typedescParameter = typedesc != null ?
                new ObjectParameter("typedesc", typedesc) :
                new ObjectParameter("typedesc", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spReport_Split_New_New_New_TitleMovements_Dates_GetAll_Result>("spReport_Split_New_New_New_TitleMovements_Dates_GetAll", movement_Date01Parameter, movement_Date02Parameter, volumeParameter, location_descParameter, destinydescParameter, purpose_descriptionParameter, typedescParameter);
        }
    
        public virtual ObjectResult<spReport_Split_New_New_NHCCPropertiesGetAll_Result> spReport_Split_New_New_NHCCPropertiesGetAll(string title_reference, string landdesc, string location_desc)
        {
            var title_referenceParameter = title_reference != null ?
                new ObjectParameter("title_reference", title_reference) :
                new ObjectParameter("title_reference", typeof(string));
    
            var landdescParameter = landdesc != null ?
                new ObjectParameter("landdesc", landdesc) :
                new ObjectParameter("landdesc", typeof(string));
    
            var location_descParameter = location_desc != null ?
                new ObjectParameter("location_desc", location_desc) :
                new ObjectParameter("location_desc", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spReport_Split_New_New_NHCCPropertiesGetAll_Result>("spReport_Split_New_New_NHCCPropertiesGetAll", title_referenceParameter, landdescParameter, location_descParameter);
        }
    
        public virtual ObjectResult<spReport_Split_New_New_NoTitlesGetAll_Result> spReport_Split_New_New_NoTitlesGetAll(string location_desc, string landdesc)
        {
            var location_descParameter = location_desc != null ?
                new ObjectParameter("location_desc", location_desc) :
                new ObjectParameter("location_desc", typeof(string));
    
            var landdescParameter = landdesc != null ?
                new ObjectParameter("landdesc", landdesc) :
                new ObjectParameter("landdesc", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spReport_Split_New_New_NoTitlesGetAll_Result>("spReport_Split_New_New_NoTitlesGetAll", location_descParameter, landdescParameter);
        }
    
        public virtual ObjectResult<spReport_Split_New_New_UnlistedPropertiesGetAll_Result> spReport_Split_New_New_UnlistedPropertiesGetAll(Nullable<int> folio1, Nullable<int> folio2, string volume, string landdesc, string location_desc)
        {
            var folio1Parameter = folio1.HasValue ?
                new ObjectParameter("Folio1", folio1) :
                new ObjectParameter("Folio1", typeof(int));
    
            var folio2Parameter = folio2.HasValue ?
                new ObjectParameter("Folio2", folio2) :
                new ObjectParameter("Folio2", typeof(int));
    
            var volumeParameter = volume != null ?
                new ObjectParameter("volume", volume) :
                new ObjectParameter("volume", typeof(string));
    
            var landdescParameter = landdesc != null ?
                new ObjectParameter("landdesc", landdesc) :
                new ObjectParameter("landdesc", typeof(string));
    
            var location_descParameter = location_desc != null ?
                new ObjectParameter("location_desc", location_desc) :
                new ObjectParameter("location_desc", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spReport_Split_New_New_UnlistedPropertiesGetAll_Result>("spReport_Split_New_New_UnlistedPropertiesGetAll", folio1Parameter, folio2Parameter, volumeParameter, landdescParameter, location_descParameter);
        }
    
        public virtual ObjectResult<spReport_Split_New_PropertyPayment_GetAll_Result> spReport_Split_New_PropertyPayment_GetAll(Nullable<int> folio1, Nullable<int> folio2, Nullable<System.DateTime> payment_Date01, Nullable<System.DateTime> payment_Date02, string title_reference, string volume, string location_desc, string paymethod, string typedesc)
        {
            var folio1Parameter = folio1.HasValue ?
                new ObjectParameter("Folio1", folio1) :
                new ObjectParameter("Folio1", typeof(int));
    
            var folio2Parameter = folio2.HasValue ?
                new ObjectParameter("Folio2", folio2) :
                new ObjectParameter("Folio2", typeof(int));
    
            var payment_Date01Parameter = payment_Date01.HasValue ?
                new ObjectParameter("Payment_Date01", payment_Date01) :
                new ObjectParameter("Payment_Date01", typeof(System.DateTime));
    
            var payment_Date02Parameter = payment_Date02.HasValue ?
                new ObjectParameter("Payment_Date02", payment_Date02) :
                new ObjectParameter("Payment_Date02", typeof(System.DateTime));
    
            var title_referenceParameter = title_reference != null ?
                new ObjectParameter("title_reference", title_reference) :
                new ObjectParameter("title_reference", typeof(string));
    
            var volumeParameter = volume != null ?
                new ObjectParameter("volume", volume) :
                new ObjectParameter("volume", typeof(string));
    
            var location_descParameter = location_desc != null ?
                new ObjectParameter("location_desc", location_desc) :
                new ObjectParameter("location_desc", typeof(string));
    
            var paymethodParameter = paymethod != null ?
                new ObjectParameter("paymethod", paymethod) :
                new ObjectParameter("paymethod", typeof(string));
    
            var typedescParameter = typedesc != null ?
                new ObjectParameter("typedesc", typedesc) :
                new ObjectParameter("typedesc", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spReport_Split_New_PropertyPayment_GetAll_Result>("spReport_Split_New_PropertyPayment_GetAll", folio1Parameter, folio2Parameter, payment_Date01Parameter, payment_Date02Parameter, title_referenceParameter, volumeParameter, location_descParameter, paymethodParameter, typedescParameter);
        }
    
        public virtual ObjectResult<spReport_Split_New_StandAlone_PropertiesGetAll_Result> spReport_Split_New_StandAlone_PropertiesGetAll(Nullable<int> folio1, Nullable<int> folio2, string volume, string landdesc, string location_desc)
        {
            var folio1Parameter = folio1.HasValue ?
                new ObjectParameter("Folio1", folio1) :
                new ObjectParameter("Folio1", typeof(int));
    
            var folio2Parameter = folio2.HasValue ?
                new ObjectParameter("Folio2", folio2) :
                new ObjectParameter("Folio2", typeof(int));
    
            var volumeParameter = volume != null ?
                new ObjectParameter("volume", volume) :
                new ObjectParameter("volume", typeof(string));
    
            var landdescParameter = landdesc != null ?
                new ObjectParameter("landdesc", landdesc) :
                new ObjectParameter("landdesc", typeof(string));
    
            var location_descParameter = location_desc != null ?
                new ObjectParameter("location_desc", location_desc) :
                new ObjectParameter("location_desc", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spReport_Split_New_StandAlone_PropertiesGetAll_Result>("spReport_Split_New_StandAlone_PropertiesGetAll", folio1Parameter, folio2Parameter, volumeParameter, landdescParameter, location_descParameter);
        }
    
        public virtual ObjectResult<spReport_Split_NewLandType_LeaseHoldPropertyTitlesGetAll_Result> spReport_Split_NewLandType_LeaseHoldPropertyTitlesGetAll(Nullable<System.DateTime> lease_End_Date01, Nullable<System.DateTime> lease_End_Date02, string location_desc, string typedesc)
        {
            var lease_End_Date01Parameter = lease_End_Date01.HasValue ?
                new ObjectParameter("Lease_End_Date01", lease_End_Date01) :
                new ObjectParameter("Lease_End_Date01", typeof(System.DateTime));
    
            var lease_End_Date02Parameter = lease_End_Date02.HasValue ?
                new ObjectParameter("Lease_End_Date02", lease_End_Date02) :
                new ObjectParameter("Lease_End_Date02", typeof(System.DateTime));
    
            var location_descParameter = location_desc != null ?
                new ObjectParameter("location_desc", location_desc) :
                new ObjectParameter("location_desc", typeof(string));
    
            var typedescParameter = typedesc != null ?
                new ObjectParameter("typedesc", typedesc) :
                new ObjectParameter("typedesc", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spReport_Split_NewLandType_LeaseHoldPropertyTitlesGetAll_Result>("spReport_Split_NewLandType_LeaseHoldPropertyTitlesGetAll", lease_End_Date01Parameter, lease_End_Date02Parameter, location_descParameter, typedescParameter);
        }
    
        public virtual ObjectResult<spReport_SplitLandTypes_New_New_New_SoldPropertiesGetAll_Result> spReport_SplitLandTypes_New_New_New_SoldPropertiesGetAll(string title_reference, string landdesc, string location_desc)
        {
            var title_referenceParameter = title_reference != null ?
                new ObjectParameter("title_reference", title_reference) :
                new ObjectParameter("title_reference", typeof(string));
    
            var landdescParameter = landdesc != null ?
                new ObjectParameter("landdesc", landdesc) :
                new ObjectParameter("landdesc", typeof(string));
    
            var location_descParameter = location_desc != null ?
                new ObjectParameter("location_desc", location_desc) :
                new ObjectParameter("location_desc", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spReport_SplitLandTypes_New_New_New_SoldPropertiesGetAll_Result>("spReport_SplitLandTypes_New_New_New_SoldPropertiesGetAll", title_referenceParameter, landdescParameter, location_descParameter);
        }
    
        public virtual ObjectResult<spReport_SplitLandTypes_New_New_NoTitlesGetAll_Result> spReport_SplitLandTypes_New_New_NoTitlesGetAll(string location_desc, string landdesc)
        {
            var location_descParameter = location_desc != null ?
                new ObjectParameter("location_desc", location_desc) :
                new ObjectParameter("location_desc", typeof(string));
    
            var landdescParameter = landdesc != null ?
                new ObjectParameter("landdesc", landdesc) :
                new ObjectParameter("landdesc", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spReport_SplitLandTypes_New_New_NoTitlesGetAll_Result>("spReport_SplitLandTypes_New_New_NoTitlesGetAll", location_descParameter, landdescParameter);
        }
    
        public virtual ObjectResult<spReport_SplitPropTypes_New_New_New_SoldPropertiesGetAll_Result> spReport_SplitPropTypes_New_New_New_SoldPropertiesGetAll(string title_reference, string landdesc, string location_desc)
        {
            var title_referenceParameter = title_reference != null ?
                new ObjectParameter("title_reference", title_reference) :
                new ObjectParameter("title_reference", typeof(string));
    
            var landdescParameter = landdesc != null ?
                new ObjectParameter("landdesc", landdesc) :
                new ObjectParameter("landdesc", typeof(string));
    
            var location_descParameter = location_desc != null ?
                new ObjectParameter("location_desc", location_desc) :
                new ObjectParameter("location_desc", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spReport_SplitPropTypes_New_New_New_SoldPropertiesGetAll_Result>("spReport_SplitPropTypes_New_New_New_SoldPropertiesGetAll", title_referenceParameter, landdescParameter, location_descParameter);
        }
    
        public virtual ObjectResult<spReport_SplitPropTypes_New_New_NoTitlesGetAll_Result> spReport_SplitPropTypes_New_New_NoTitlesGetAll(string location_desc, string landdesc)
        {
            var location_descParameter = location_desc != null ?
                new ObjectParameter("location_desc", location_desc) :
                new ObjectParameter("location_desc", typeof(string));
    
            var landdescParameter = landdesc != null ?
                new ObjectParameter("landdesc", landdesc) :
                new ObjectParameter("landdesc", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spReport_SplitPropTypes_New_New_NoTitlesGetAll_Result>("spReport_SplitPropTypes_New_New_NoTitlesGetAll", location_descParameter, landdescParameter);
        }
    
        public virtual ObjectResult<spReport_SplitSummary_New_AllPropertyTitlesGetAll_Result> spReport_SplitSummary_New_AllPropertyTitlesGetAll(string location_desc, string land_code)
        {
            var location_descParameter = location_desc != null ?
                new ObjectParameter("location_desc", location_desc) :
                new ObjectParameter("location_desc", typeof(string));
    
            var land_codeParameter = land_code != null ?
                new ObjectParameter("land_code", land_code) :
                new ObjectParameter("land_code", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spReport_SplitSummary_New_AllPropertyTitlesGetAll_Result>("spReport_SplitSummary_New_AllPropertyTitlesGetAll", location_descParameter, land_codeParameter);
        }
    
        public virtual ObjectResult<spReport_SplitSummary_New_New_FreeholdPropertiesGetAll_Result> spReport_SplitSummary_New_New_FreeholdPropertiesGetAll(Nullable<int> folio1, Nullable<int> folio2, string volume, string location_desc, string typedesc)
        {
            var folio1Parameter = folio1.HasValue ?
                new ObjectParameter("Folio1", folio1) :
                new ObjectParameter("Folio1", typeof(int));
    
            var folio2Parameter = folio2.HasValue ?
                new ObjectParameter("Folio2", folio2) :
                new ObjectParameter("Folio2", typeof(int));
    
            var volumeParameter = volume != null ?
                new ObjectParameter("volume", volume) :
                new ObjectParameter("volume", typeof(string));
    
            var location_descParameter = location_desc != null ?
                new ObjectParameter("location_desc", location_desc) :
                new ObjectParameter("location_desc", typeof(string));
    
            var typedescParameter = typedesc != null ?
                new ObjectParameter("typedesc", typedesc) :
                new ObjectParameter("typedesc", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spReport_SplitSummary_New_New_FreeholdPropertiesGetAll_Result>("spReport_SplitSummary_New_New_FreeholdPropertiesGetAll", folio1Parameter, folio2Parameter, volumeParameter, location_descParameter, typedescParameter);
        }
    
        public virtual ObjectResult<spReport_SplitSummaryPropType_New_AllPropertyTitlesGetAll_Result> spReport_SplitSummaryPropType_New_AllPropertyTitlesGetAll(string location_desc, string land_code)
        {
            var location_descParameter = location_desc != null ?
                new ObjectParameter("location_desc", location_desc) :
                new ObjectParameter("location_desc", typeof(string));
    
            var land_codeParameter = land_code != null ?
                new ObjectParameter("land_code", land_code) :
                new ObjectParameter("land_code", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spReport_SplitSummaryPropType_New_AllPropertyTitlesGetAll_Result>("spReport_SplitSummaryPropType_New_AllPropertyTitlesGetAll", location_descParameter, land_codeParameter);
        }
    
        public virtual int spReport_StandAllPropertyGetAll(string landDesc, string district_Name, string block_No, Nullable<bool> offerPaidUP, string project_Desc, string plot_No, string plan_No, string expr1, Nullable<int> expr2)
        {
            var landDescParameter = landDesc != null ?
                new ObjectParameter("LandDesc", landDesc) :
                new ObjectParameter("LandDesc", typeof(string));
    
            var district_NameParameter = district_Name != null ?
                new ObjectParameter("District_Name", district_Name) :
                new ObjectParameter("District_Name", typeof(string));
    
            var block_NoParameter = block_No != null ?
                new ObjectParameter("Block_No", block_No) :
                new ObjectParameter("Block_No", typeof(string));
    
            var offerPaidUPParameter = offerPaidUP.HasValue ?
                new ObjectParameter("OfferPaidUP", offerPaidUP) :
                new ObjectParameter("OfferPaidUP", typeof(bool));
    
            var project_DescParameter = project_Desc != null ?
                new ObjectParameter("Project_Desc", project_Desc) :
                new ObjectParameter("Project_Desc", typeof(string));
    
            var plot_NoParameter = plot_No != null ?
                new ObjectParameter("Plot_No", plot_No) :
                new ObjectParameter("Plot_No", typeof(string));
    
            var plan_NoParameter = plan_No != null ?
                new ObjectParameter("Plan_No", plan_No) :
                new ObjectParameter("Plan_No", typeof(string));
    
            var expr1Parameter = expr1 != null ?
                new ObjectParameter("Expr1", expr1) :
                new ObjectParameter("Expr1", typeof(string));
    
            var expr2Parameter = expr2.HasValue ?
                new ObjectParameter("Expr2", expr2) :
                new ObjectParameter("Expr2", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spReport_StandAllPropertyGetAll", landDescParameter, district_NameParameter, block_NoParameter, offerPaidUPParameter, project_DescParameter, plot_NoParameter, plan_NoParameter, expr1Parameter, expr2Parameter);
        }
    
        public virtual ObjectResult<spReport_UnlockedAllTitles_AuditLog_PropertyTitleGetAll_Result> spReport_UnlockedAllTitles_AuditLog_PropertyTitleGetAll(string unlockedby, string landDesc, Nullable<System.DateTime> movement_Date01, Nullable<System.DateTime> movement_Date02)
        {
            var unlockedbyParameter = unlockedby != null ?
                new ObjectParameter("unlockedby", unlockedby) :
                new ObjectParameter("unlockedby", typeof(string));
    
            var landDescParameter = landDesc != null ?
                new ObjectParameter("LandDesc", landDesc) :
                new ObjectParameter("LandDesc", typeof(string));
    
            var movement_Date01Parameter = movement_Date01.HasValue ?
                new ObjectParameter("Movement_Date01", movement_Date01) :
                new ObjectParameter("Movement_Date01", typeof(System.DateTime));
    
            var movement_Date02Parameter = movement_Date02.HasValue ?
                new ObjectParameter("Movement_Date02", movement_Date02) :
                new ObjectParameter("Movement_Date02", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spReport_UnlockedAllTitles_AuditLog_PropertyTitleGetAll_Result>("spReport_UnlockedAllTitles_AuditLog_PropertyTitleGetAll", unlockedbyParameter, landDescParameter, movement_Date01Parameter, movement_Date02Parameter);
        }
    
        public virtual ObjectResult<spReport_UnlockedAllTitlesPropTypeSummary_AuditLog_PropertyTitleGetAll_Result> spReport_UnlockedAllTitlesPropTypeSummary_AuditLog_PropertyTitleGetAll(string unlockedby, string landDesc, Nullable<System.DateTime> movement_Date01, Nullable<System.DateTime> movement_Date02)
        {
            var unlockedbyParameter = unlockedby != null ?
                new ObjectParameter("unlockedby", unlockedby) :
                new ObjectParameter("unlockedby", typeof(string));
    
            var landDescParameter = landDesc != null ?
                new ObjectParameter("LandDesc", landDesc) :
                new ObjectParameter("LandDesc", typeof(string));
    
            var movement_Date01Parameter = movement_Date01.HasValue ?
                new ObjectParameter("Movement_Date01", movement_Date01) :
                new ObjectParameter("Movement_Date01", typeof(System.DateTime));
    
            var movement_Date02Parameter = movement_Date02.HasValue ?
                new ObjectParameter("Movement_Date02", movement_Date02) :
                new ObjectParameter("Movement_Date02", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spReport_UnlockedAllTitlesPropTypeSummary_AuditLog_PropertyTitleGetAll_Result>("spReport_UnlockedAllTitlesPropTypeSummary_AuditLog_PropertyTitleGetAll", unlockedbyParameter, landDescParameter, movement_Date01Parameter, movement_Date02Parameter);
        }
    
        public virtual ObjectResult<spReport_UnlockedAllTitlessummary_AuditLog_PropertyTitleGetAll_Result> spReport_UnlockedAllTitlessummary_AuditLog_PropertyTitleGetAll(string unlockedby, string landDesc, Nullable<System.DateTime> movement_Date01, Nullable<System.DateTime> movement_Date02)
        {
            var unlockedbyParameter = unlockedby != null ?
                new ObjectParameter("unlockedby", unlockedby) :
                new ObjectParameter("unlockedby", typeof(string));
    
            var landDescParameter = landDesc != null ?
                new ObjectParameter("LandDesc", landDesc) :
                new ObjectParameter("LandDesc", typeof(string));
    
            var movement_Date01Parameter = movement_Date01.HasValue ?
                new ObjectParameter("Movement_Date01", movement_Date01) :
                new ObjectParameter("Movement_Date01", typeof(System.DateTime));
    
            var movement_Date02Parameter = movement_Date02.HasValue ?
                new ObjectParameter("Movement_Date02", movement_Date02) :
                new ObjectParameter("Movement_Date02", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spReport_UnlockedAllTitlessummary_AuditLog_PropertyTitleGetAll_Result>("spReport_UnlockedAllTitlessummary_AuditLog_PropertyTitleGetAll", unlockedbyParameter, landDescParameter, movement_Date01Parameter, movement_Date02Parameter);
        }
    
        public virtual ObjectResult<spReport_UnlockedFreeHold_AuditLog_PropertyTitleGetAll_Result> spReport_UnlockedFreeHold_AuditLog_PropertyTitleGetAll(string unlockedby, Nullable<System.DateTime> movement_Date01, Nullable<System.DateTime> movement_Date02)
        {
            var unlockedbyParameter = unlockedby != null ?
                new ObjectParameter("unlockedby", unlockedby) :
                new ObjectParameter("unlockedby", typeof(string));
    
            var movement_Date01Parameter = movement_Date01.HasValue ?
                new ObjectParameter("Movement_Date01", movement_Date01) :
                new ObjectParameter("Movement_Date01", typeof(System.DateTime));
    
            var movement_Date02Parameter = movement_Date02.HasValue ?
                new ObjectParameter("Movement_Date02", movement_Date02) :
                new ObjectParameter("Movement_Date02", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spReport_UnlockedFreeHold_AuditLog_PropertyTitleGetAll_Result>("spReport_UnlockedFreeHold_AuditLog_PropertyTitleGetAll", unlockedbyParameter, movement_Date01Parameter, movement_Date02Parameter);
        }
    
        public virtual ObjectResult<spReport_UnlockedLandTitlesNewAll_AuditLog_PropertyPaymentGetAll_Result> spReport_UnlockedLandTitlesNewAll_AuditLog_PropertyPaymentGetAll(string unlockedby, Nullable<System.DateTime> movement_Date01, Nullable<System.DateTime> movement_Date02)
        {
            var unlockedbyParameter = unlockedby != null ?
                new ObjectParameter("unlockedby", unlockedby) :
                new ObjectParameter("unlockedby", typeof(string));
    
            var movement_Date01Parameter = movement_Date01.HasValue ?
                new ObjectParameter("Movement_Date01", movement_Date01) :
                new ObjectParameter("Movement_Date01", typeof(System.DateTime));
    
            var movement_Date02Parameter = movement_Date02.HasValue ?
                new ObjectParameter("Movement_Date02", movement_Date02) :
                new ObjectParameter("Movement_Date02", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spReport_UnlockedLandTitlesNewAll_AuditLog_PropertyPaymentGetAll_Result>("spReport_UnlockedLandTitlesNewAll_AuditLog_PropertyPaymentGetAll", unlockedbyParameter, movement_Date01Parameter, movement_Date02Parameter);
        }
    
        public virtual ObjectResult<spReport_UnlockedNewAdded_AuditLog_PropertyTitleMovtGetAll_Result> spReport_UnlockedNewAdded_AuditLog_PropertyTitleMovtGetAll(string unlockedby, Nullable<System.DateTime> movement_Date01, Nullable<System.DateTime> movement_Date02)
        {
            var unlockedbyParameter = unlockedby != null ?
                new ObjectParameter("unlockedby", unlockedby) :
                new ObjectParameter("unlockedby", typeof(string));
    
            var movement_Date01Parameter = movement_Date01.HasValue ?
                new ObjectParameter("Movement_Date01", movement_Date01) :
                new ObjectParameter("Movement_Date01", typeof(System.DateTime));
    
            var movement_Date02Parameter = movement_Date02.HasValue ?
                new ObjectParameter("Movement_Date02", movement_Date02) :
                new ObjectParameter("Movement_Date02", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spReport_UnlockedNewAdded_AuditLog_PropertyTitleMovtGetAll_Result>("spReport_UnlockedNewAdded_AuditLog_PropertyTitleMovtGetAll", unlockedbyParameter, movement_Date01Parameter, movement_Date02Parameter);
        }
    
        public virtual ObjectResult<spReport_UnlockedNewAddedlandtitles_AuditLog_PropertyTitleMovtGetAll_Result> spReport_UnlockedNewAddedlandtitles_AuditLog_PropertyTitleMovtGetAll(string unlockedby, Nullable<System.DateTime> movement_Date01, Nullable<System.DateTime> movement_Date02)
        {
            var unlockedbyParameter = unlockedby != null ?
                new ObjectParameter("unlockedby", unlockedby) :
                new ObjectParameter("unlockedby", typeof(string));
    
            var movement_Date01Parameter = movement_Date01.HasValue ?
                new ObjectParameter("Movement_Date01", movement_Date01) :
                new ObjectParameter("Movement_Date01", typeof(System.DateTime));
    
            var movement_Date02Parameter = movement_Date02.HasValue ?
                new ObjectParameter("Movement_Date02", movement_Date02) :
                new ObjectParameter("Movement_Date02", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spReport_UnlockedNewAddedlandtitles_AuditLog_PropertyTitleMovtGetAll_Result>("spReport_UnlockedNewAddedlandtitles_AuditLog_PropertyTitleMovtGetAll", unlockedbyParameter, movement_Date01Parameter, movement_Date02Parameter);
        }
    
        public virtual ObjectResult<spReport_UnlockedNewAddedPropTypes_AuditLog_PropertyTitleMovtGetAll_Result> spReport_UnlockedNewAddedPropTypes_AuditLog_PropertyTitleMovtGetAll(string unlockedby, Nullable<System.DateTime> movement_Date01, Nullable<System.DateTime> movement_Date02)
        {
            var unlockedbyParameter = unlockedby != null ?
                new ObjectParameter("unlockedby", unlockedby) :
                new ObjectParameter("unlockedby", typeof(string));
    
            var movement_Date01Parameter = movement_Date01.HasValue ?
                new ObjectParameter("Movement_Date01", movement_Date01) :
                new ObjectParameter("Movement_Date01", typeof(System.DateTime));
    
            var movement_Date02Parameter = movement_Date02.HasValue ?
                new ObjectParameter("Movement_Date02", movement_Date02) :
                new ObjectParameter("Movement_Date02", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spReport_UnlockedNewAddedPropTypes_AuditLog_PropertyTitleMovtGetAll_Result>("spReport_UnlockedNewAddedPropTypes_AuditLog_PropertyTitleMovtGetAll", unlockedbyParameter, movement_Date01Parameter, movement_Date02Parameter);
        }
    
        public virtual ObjectResult<spReport_UnlockedNewAll_AuditLog_PropertyPaymentGetAll_Result> spReport_UnlockedNewAll_AuditLog_PropertyPaymentGetAll(string unlockedby, Nullable<System.DateTime> movement_Date01, Nullable<System.DateTime> movement_Date02)
        {
            var unlockedbyParameter = unlockedby != null ?
                new ObjectParameter("unlockedby", unlockedby) :
                new ObjectParameter("unlockedby", typeof(string));
    
            var movement_Date01Parameter = movement_Date01.HasValue ?
                new ObjectParameter("Movement_Date01", movement_Date01) :
                new ObjectParameter("Movement_Date01", typeof(System.DateTime));
    
            var movement_Date02Parameter = movement_Date02.HasValue ?
                new ObjectParameter("Movement_Date02", movement_Date02) :
                new ObjectParameter("Movement_Date02", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spReport_UnlockedNewAll_AuditLog_PropertyPaymentGetAll_Result>("spReport_UnlockedNewAll_AuditLog_PropertyPaymentGetAll", unlockedbyParameter, movement_Date01Parameter, movement_Date02Parameter);
        }
    
        public virtual ObjectResult<spReport_UnlockedPropTitlesNewAll_AuditLog_PropertyPaymentGetAll_Result> spReport_UnlockedPropTitlesNewAll_AuditLog_PropertyPaymentGetAll(string unlockedby, Nullable<System.DateTime> movement_Date01, Nullable<System.DateTime> movement_Date02)
        {
            var unlockedbyParameter = unlockedby != null ?
                new ObjectParameter("unlockedby", unlockedby) :
                new ObjectParameter("unlockedby", typeof(string));
    
            var movement_Date01Parameter = movement_Date01.HasValue ?
                new ObjectParameter("Movement_Date01", movement_Date01) :
                new ObjectParameter("Movement_Date01", typeof(System.DateTime));
    
            var movement_Date02Parameter = movement_Date02.HasValue ?
                new ObjectParameter("Movement_Date02", movement_Date02) :
                new ObjectParameter("Movement_Date02", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spReport_UnlockedPropTitlesNewAll_AuditLog_PropertyPaymentGetAll_Result>("spReport_UnlockedPropTitlesNewAll_AuditLog_PropertyPaymentGetAll", unlockedbyParameter, movement_Date01Parameter, movement_Date02Parameter);
        }
    
        public virtual int spSealApplicationRegisterDelete(Nullable<byte> sealApplicationRegister)
        {
            var sealApplicationRegisterParameter = sealApplicationRegister.HasValue ?
                new ObjectParameter("SealApplicationRegister", sealApplicationRegister) :
                new ObjectParameter("SealApplicationRegister", typeof(byte));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spSealApplicationRegisterDelete", sealApplicationRegisterParameter);
        }
    
        public virtual ObjectResult<spSealApplicationRegisterGetAll_Result> spSealApplicationRegisterGetAll(Nullable<byte> sealApplicationRegister, string sealApplicationRegisterDesc)
        {
            var sealApplicationRegisterParameter = sealApplicationRegister.HasValue ?
                new ObjectParameter("SealApplicationRegister", sealApplicationRegister) :
                new ObjectParameter("SealApplicationRegister", typeof(byte));
    
            var sealApplicationRegisterDescParameter = sealApplicationRegisterDesc != null ?
                new ObjectParameter("SealApplicationRegisterDesc", sealApplicationRegisterDesc) :
                new ObjectParameter("SealApplicationRegisterDesc", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spSealApplicationRegisterGetAll_Result>("spSealApplicationRegisterGetAll", sealApplicationRegisterParameter, sealApplicationRegisterDescParameter);
        }
    
        public virtual int spSealApplicationRegisterGetByKey(Nullable<byte> sealApplicationRegister, ObjectParameter sealApplicationRegisterDesc)
        {
            var sealApplicationRegisterParameter = sealApplicationRegister.HasValue ?
                new ObjectParameter("SealApplicationRegister", sealApplicationRegister) :
                new ObjectParameter("SealApplicationRegister", typeof(byte));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spSealApplicationRegisterGetByKey", sealApplicationRegisterParameter, sealApplicationRegisterDesc);
        }
    
        public virtual int spSealApplicationRegisterInsert(Nullable<byte> sealApplicationRegister, string sealApplicationRegisterDesc)
        {
            var sealApplicationRegisterParameter = sealApplicationRegister.HasValue ?
                new ObjectParameter("SealApplicationRegister", sealApplicationRegister) :
                new ObjectParameter("SealApplicationRegister", typeof(byte));
    
            var sealApplicationRegisterDescParameter = sealApplicationRegisterDesc != null ?
                new ObjectParameter("SealApplicationRegisterDesc", sealApplicationRegisterDesc) :
                new ObjectParameter("SealApplicationRegisterDesc", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spSealApplicationRegisterInsert", sealApplicationRegisterParameter, sealApplicationRegisterDescParameter);
        }
    
        public virtual int spSealApplicationRegisterUpdate(Nullable<byte> sealApplicationRegister, string sealApplicationRegisterDesc)
        {
            var sealApplicationRegisterParameter = sealApplicationRegister.HasValue ?
                new ObjectParameter("SealApplicationRegister", sealApplicationRegister) :
                new ObjectParameter("SealApplicationRegister", typeof(byte));
    
            var sealApplicationRegisterDescParameter = sealApplicationRegisterDesc != null ?
                new ObjectParameter("SealApplicationRegisterDesc", sealApplicationRegisterDesc) :
                new ObjectParameter("SealApplicationRegisterDesc", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spSealApplicationRegisterUpdate", sealApplicationRegisterParameter, sealApplicationRegisterDescParameter);
        }
    
        public virtual int spSubcountyDelete(Nullable<int> subcounty_ID)
        {
            var subcounty_IDParameter = subcounty_ID.HasValue ?
                new ObjectParameter("Subcounty_ID", subcounty_ID) :
                new ObjectParameter("Subcounty_ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spSubcountyDelete", subcounty_IDParameter);
        }
    
        public virtual ObjectResult<spSubcountyGetAll_Result> spSubcountyGetAll(Nullable<int> subcounty_ID, Nullable<short> county_ID, Nullable<byte> district, string subcounty_Name)
        {
            var subcounty_IDParameter = subcounty_ID.HasValue ?
                new ObjectParameter("Subcounty_ID", subcounty_ID) :
                new ObjectParameter("Subcounty_ID", typeof(int));
    
            var county_IDParameter = county_ID.HasValue ?
                new ObjectParameter("County_ID", county_ID) :
                new ObjectParameter("County_ID", typeof(short));
    
            var districtParameter = district.HasValue ?
                new ObjectParameter("District", district) :
                new ObjectParameter("District", typeof(byte));
    
            var subcounty_NameParameter = subcounty_Name != null ?
                new ObjectParameter("Subcounty_Name", subcounty_Name) :
                new ObjectParameter("Subcounty_Name", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spSubcountyGetAll_Result>("spSubcountyGetAll", subcounty_IDParameter, county_IDParameter, districtParameter, subcounty_NameParameter);
        }
    
        public virtual int spSubcountyGetByKey(Nullable<int> subcounty_ID, ObjectParameter county_ID, ObjectParameter district, ObjectParameter subcounty_Name)
        {
            var subcounty_IDParameter = subcounty_ID.HasValue ?
                new ObjectParameter("Subcounty_ID", subcounty_ID) :
                new ObjectParameter("Subcounty_ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spSubcountyGetByKey", subcounty_IDParameter, county_ID, district, subcounty_Name);
        }
    
        public virtual int spSubcountyInsert(Nullable<int> subcounty_ID, Nullable<short> county_ID, Nullable<byte> district, string subcounty_Name)
        {
            var subcounty_IDParameter = subcounty_ID.HasValue ?
                new ObjectParameter("Subcounty_ID", subcounty_ID) :
                new ObjectParameter("Subcounty_ID", typeof(int));
    
            var county_IDParameter = county_ID.HasValue ?
                new ObjectParameter("County_ID", county_ID) :
                new ObjectParameter("County_ID", typeof(short));
    
            var districtParameter = district.HasValue ?
                new ObjectParameter("District", district) :
                new ObjectParameter("District", typeof(byte));
    
            var subcounty_NameParameter = subcounty_Name != null ?
                new ObjectParameter("Subcounty_Name", subcounty_Name) :
                new ObjectParameter("Subcounty_Name", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spSubcountyInsert", subcounty_IDParameter, county_IDParameter, districtParameter, subcounty_NameParameter);
        }
    
        public virtual int spSubcountyUpdate(Nullable<int> subcounty_ID, Nullable<short> county_ID, Nullable<byte> district, string subcounty_Name)
        {
            var subcounty_IDParameter = subcounty_ID.HasValue ?
                new ObjectParameter("Subcounty_ID", subcounty_ID) :
                new ObjectParameter("Subcounty_ID", typeof(int));
    
            var county_IDParameter = county_ID.HasValue ?
                new ObjectParameter("County_ID", county_ID) :
                new ObjectParameter("County_ID", typeof(short));
    
            var districtParameter = district.HasValue ?
                new ObjectParameter("District", district) :
                new ObjectParameter("District", typeof(byte));
    
            var subcounty_NameParameter = subcounty_Name != null ?
                new ObjectParameter("Subcounty_Name", subcounty_Name) :
                new ObjectParameter("Subcounty_Name", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spSubcountyUpdate", subcounty_IDParameter, county_IDParameter, districtParameter, subcounty_NameParameter);
        }
    
        public virtual int spTitleChangeDelete(Nullable<int> project_Code, Nullable<int> changeNo, string volume, Nullable<int> folio)
        {
            var project_CodeParameter = project_Code.HasValue ?
                new ObjectParameter("Project_Code", project_Code) :
                new ObjectParameter("Project_Code", typeof(int));
    
            var changeNoParameter = changeNo.HasValue ?
                new ObjectParameter("ChangeNo", changeNo) :
                new ObjectParameter("ChangeNo", typeof(int));
    
            var volumeParameter = volume != null ?
                new ObjectParameter("Volume", volume) :
                new ObjectParameter("Volume", typeof(string));
    
            var folioParameter = folio.HasValue ?
                new ObjectParameter("Folio", folio) :
                new ObjectParameter("Folio", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spTitleChangeDelete", project_CodeParameter, changeNoParameter, volumeParameter, folioParameter);
        }
    
        public virtual ObjectResult<spTitleChangeGetAll_Result> spTitleChangeGetAll(Nullable<int> project_Code, Nullable<int> changeNo, string volume, Nullable<int> folio)
        {
            var project_CodeParameter = project_Code.HasValue ?
                new ObjectParameter("Project_Code", project_Code) :
                new ObjectParameter("Project_Code", typeof(int));
    
            var changeNoParameter = changeNo.HasValue ?
                new ObjectParameter("ChangeNo", changeNo) :
                new ObjectParameter("ChangeNo", typeof(int));
    
            var volumeParameter = volume != null ?
                new ObjectParameter("Volume", volume) :
                new ObjectParameter("Volume", typeof(string));
    
            var folioParameter = folio.HasValue ?
                new ObjectParameter("Folio", folio) :
                new ObjectParameter("Folio", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spTitleChangeGetAll_Result>("spTitleChangeGetAll", project_CodeParameter, changeNoParameter, volumeParameter, folioParameter);
        }
    
        public virtual int spTitleChangeGetByKey(Nullable<int> project_Code, Nullable<int> changeNo, string volume, Nullable<int> folio, ObjectParameter title_Reference, ObjectParameter typeCode, ObjectParameter unit_No, ObjectParameter plan_No, ObjectParameter block_No, ObjectParameter flat_N0, ObjectParameter lease_Start_Date, ObjectParameter lease_End_Date, ObjectParameter ground_Rent, ObjectParameter rates, ObjectParameter newDataAudit, ObjectParameter editDataAudit)
        {
            var project_CodeParameter = project_Code.HasValue ?
                new ObjectParameter("Project_Code", project_Code) :
                new ObjectParameter("Project_Code", typeof(int));
    
            var changeNoParameter = changeNo.HasValue ?
                new ObjectParameter("ChangeNo", changeNo) :
                new ObjectParameter("ChangeNo", typeof(int));
    
            var volumeParameter = volume != null ?
                new ObjectParameter("Volume", volume) :
                new ObjectParameter("Volume", typeof(string));
    
            var folioParameter = folio.HasValue ?
                new ObjectParameter("Folio", folio) :
                new ObjectParameter("Folio", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spTitleChangeGetByKey", project_CodeParameter, changeNoParameter, volumeParameter, folioParameter, title_Reference, typeCode, unit_No, plan_No, block_No, flat_N0, lease_Start_Date, lease_End_Date, ground_Rent, rates, newDataAudit, editDataAudit);
        }
    
        public virtual int spTitleChangeInsert(Nullable<int> project_Code, Nullable<int> changeNo, string volume, Nullable<int> folio, string title_Reference, Nullable<byte> typeCode, string unit_No, string plan_No, string block_No, string flat_N0, Nullable<System.DateTime> lease_Start_Date, Nullable<System.DateTime> lease_End_Date, Nullable<decimal> ground_Rent, Nullable<decimal> rates, string newDataAudit, string editDataAudit)
        {
            var project_CodeParameter = project_Code.HasValue ?
                new ObjectParameter("Project_Code", project_Code) :
                new ObjectParameter("Project_Code", typeof(int));
    
            var changeNoParameter = changeNo.HasValue ?
                new ObjectParameter("ChangeNo", changeNo) :
                new ObjectParameter("ChangeNo", typeof(int));
    
            var volumeParameter = volume != null ?
                new ObjectParameter("Volume", volume) :
                new ObjectParameter("Volume", typeof(string));
    
            var folioParameter = folio.HasValue ?
                new ObjectParameter("Folio", folio) :
                new ObjectParameter("Folio", typeof(int));
    
            var title_ReferenceParameter = title_Reference != null ?
                new ObjectParameter("Title_Reference", title_Reference) :
                new ObjectParameter("Title_Reference", typeof(string));
    
            var typeCodeParameter = typeCode.HasValue ?
                new ObjectParameter("TypeCode", typeCode) :
                new ObjectParameter("TypeCode", typeof(byte));
    
            var unit_NoParameter = unit_No != null ?
                new ObjectParameter("Unit_No", unit_No) :
                new ObjectParameter("Unit_No", typeof(string));
    
            var plan_NoParameter = plan_No != null ?
                new ObjectParameter("Plan_No", plan_No) :
                new ObjectParameter("Plan_No", typeof(string));
    
            var block_NoParameter = block_No != null ?
                new ObjectParameter("Block_No", block_No) :
                new ObjectParameter("Block_No", typeof(string));
    
            var flat_N0Parameter = flat_N0 != null ?
                new ObjectParameter("Flat_N0", flat_N0) :
                new ObjectParameter("Flat_N0", typeof(string));
    
            var lease_Start_DateParameter = lease_Start_Date.HasValue ?
                new ObjectParameter("Lease_Start_Date", lease_Start_Date) :
                new ObjectParameter("Lease_Start_Date", typeof(System.DateTime));
    
            var lease_End_DateParameter = lease_End_Date.HasValue ?
                new ObjectParameter("Lease_End_Date", lease_End_Date) :
                new ObjectParameter("Lease_End_Date", typeof(System.DateTime));
    
            var ground_RentParameter = ground_Rent.HasValue ?
                new ObjectParameter("Ground_Rent", ground_Rent) :
                new ObjectParameter("Ground_Rent", typeof(decimal));
    
            var ratesParameter = rates.HasValue ?
                new ObjectParameter("Rates", rates) :
                new ObjectParameter("Rates", typeof(decimal));
    
            var newDataAuditParameter = newDataAudit != null ?
                new ObjectParameter("NewDataAudit", newDataAudit) :
                new ObjectParameter("NewDataAudit", typeof(string));
    
            var editDataAuditParameter = editDataAudit != null ?
                new ObjectParameter("EditDataAudit", editDataAudit) :
                new ObjectParameter("EditDataAudit", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spTitleChangeInsert", project_CodeParameter, changeNoParameter, volumeParameter, folioParameter, title_ReferenceParameter, typeCodeParameter, unit_NoParameter, plan_NoParameter, block_NoParameter, flat_N0Parameter, lease_Start_DateParameter, lease_End_DateParameter, ground_RentParameter, ratesParameter, newDataAuditParameter, editDataAuditParameter);
        }
    
        public virtual int spTitleChangeUpdate(Nullable<int> project_Code, Nullable<int> changeNo, string volume, Nullable<int> folio, string title_Reference, Nullable<byte> typeCode, string unit_No, string plan_No, string block_No, string flat_N0, Nullable<System.DateTime> lease_Start_Date, Nullable<System.DateTime> lease_End_Date, Nullable<decimal> ground_Rent, Nullable<decimal> rates, string newDataAudit, string editDataAudit)
        {
            var project_CodeParameter = project_Code.HasValue ?
                new ObjectParameter("Project_Code", project_Code) :
                new ObjectParameter("Project_Code", typeof(int));
    
            var changeNoParameter = changeNo.HasValue ?
                new ObjectParameter("ChangeNo", changeNo) :
                new ObjectParameter("ChangeNo", typeof(int));
    
            var volumeParameter = volume != null ?
                new ObjectParameter("Volume", volume) :
                new ObjectParameter("Volume", typeof(string));
    
            var folioParameter = folio.HasValue ?
                new ObjectParameter("Folio", folio) :
                new ObjectParameter("Folio", typeof(int));
    
            var title_ReferenceParameter = title_Reference != null ?
                new ObjectParameter("Title_Reference", title_Reference) :
                new ObjectParameter("Title_Reference", typeof(string));
    
            var typeCodeParameter = typeCode.HasValue ?
                new ObjectParameter("TypeCode", typeCode) :
                new ObjectParameter("TypeCode", typeof(byte));
    
            var unit_NoParameter = unit_No != null ?
                new ObjectParameter("Unit_No", unit_No) :
                new ObjectParameter("Unit_No", typeof(string));
    
            var plan_NoParameter = plan_No != null ?
                new ObjectParameter("Plan_No", plan_No) :
                new ObjectParameter("Plan_No", typeof(string));
    
            var block_NoParameter = block_No != null ?
                new ObjectParameter("Block_No", block_No) :
                new ObjectParameter("Block_No", typeof(string));
    
            var flat_N0Parameter = flat_N0 != null ?
                new ObjectParameter("Flat_N0", flat_N0) :
                new ObjectParameter("Flat_N0", typeof(string));
    
            var lease_Start_DateParameter = lease_Start_Date.HasValue ?
                new ObjectParameter("Lease_Start_Date", lease_Start_Date) :
                new ObjectParameter("Lease_Start_Date", typeof(System.DateTime));
    
            var lease_End_DateParameter = lease_End_Date.HasValue ?
                new ObjectParameter("Lease_End_Date", lease_End_Date) :
                new ObjectParameter("Lease_End_Date", typeof(System.DateTime));
    
            var ground_RentParameter = ground_Rent.HasValue ?
                new ObjectParameter("Ground_Rent", ground_Rent) :
                new ObjectParameter("Ground_Rent", typeof(decimal));
    
            var ratesParameter = rates.HasValue ?
                new ObjectParameter("Rates", rates) :
                new ObjectParameter("Rates", typeof(decimal));
    
            var newDataAuditParameter = newDataAudit != null ?
                new ObjectParameter("NewDataAudit", newDataAudit) :
                new ObjectParameter("NewDataAudit", typeof(string));
    
            var editDataAuditParameter = editDataAudit != null ?
                new ObjectParameter("EditDataAudit", editDataAudit) :
                new ObjectParameter("EditDataAudit", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spTitleChangeUpdate", project_CodeParameter, changeNoParameter, volumeParameter, folioParameter, title_ReferenceParameter, typeCodeParameter, unit_NoParameter, plan_NoParameter, block_NoParameter, flat_N0Parameter, lease_Start_DateParameter, lease_End_DateParameter, ground_RentParameter, ratesParameter, newDataAuditParameter, editDataAuditParameter);
        }
    
        public virtual int spTitleDestination(Nullable<byte> dest_Category)
        {
            var dest_CategoryParameter = dest_Category.HasValue ?
                new ObjectParameter("Dest_Category", dest_Category) :
                new ObjectParameter("Dest_Category", typeof(byte));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spTitleDestination", dest_CategoryParameter);
        }
    
        public virtual int spTitleLocation(Nullable<int> project_code)
        {
            var project_codeParameter = project_code.HasValue ?
                new ObjectParameter("project_code", project_code) :
                new ObjectParameter("project_code", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spTitleLocation", project_codeParameter);
        }
    
        public virtual int spTitleLocations(Nullable<byte> districtID)
        {
            var districtIDParameter = districtID.HasValue ?
                new ObjectParameter("DistrictID", districtID) :
                new ObjectParameter("DistrictID", typeof(byte));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spTitleLocations", districtIDParameter);
        }
    
        public virtual int spTitleLocationsReport(Nullable<int> project_Code, Nullable<byte> districtID)
        {
            var project_CodeParameter = project_Code.HasValue ?
                new ObjectParameter("Project_Code", project_Code) :
                new ObjectParameter("Project_Code", typeof(int));
    
            var districtIDParameter = districtID.HasValue ?
                new ObjectParameter("DistrictID", districtID) :
                new ObjectParameter("DistrictID", typeof(byte));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spTitleLocationsReport", project_CodeParameter, districtIDParameter);
        }
    
        public virtual int spTitleMovByDest(Nullable<byte> destination)
        {
            var destinationParameter = destination.HasValue ?
                new ObjectParameter("Destination", destination) :
                new ObjectParameter("Destination", typeof(byte));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spTitleMovByDest", destinationParameter);
        }
    
        public virtual int spTitleMovementIntenal(Nullable<System.DateTime> startdate, Nullable<System.DateTime> enddate)
        {
            var startdateParameter = startdate.HasValue ?
                new ObjectParameter("startdate", startdate) :
                new ObjectParameter("startdate", typeof(System.DateTime));
    
            var enddateParameter = enddate.HasValue ?
                new ObjectParameter("enddate", enddate) :
                new ObjectParameter("enddate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spTitleMovementIntenal", startdateParameter, enddateParameter);
        }
    
        public virtual int spTitleMovements(Nullable<System.DateTime> startdate, Nullable<System.DateTime> enddate, Nullable<byte> destinyCode)
        {
            var startdateParameter = startdate.HasValue ?
                new ObjectParameter("startdate", startdate) :
                new ObjectParameter("startdate", typeof(System.DateTime));
    
            var enddateParameter = enddate.HasValue ?
                new ObjectParameter("enddate", enddate) :
                new ObjectParameter("enddate", typeof(System.DateTime));
    
            var destinyCodeParameter = destinyCode.HasValue ?
                new ObjectParameter("DestinyCode", destinyCode) :
                new ObjectParameter("DestinyCode", typeof(byte));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spTitleMovements", startdateParameter, enddateParameter, destinyCodeParameter);
        }
    
        public virtual int spTitleMovtLocation(string town_Village)
        {
            var town_VillageParameter = town_Village != null ?
                new ObjectParameter("Town_Village", town_Village) :
                new ObjectParameter("Town_Village", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spTitleMovtLocation", town_VillageParameter);
        }
    
        public virtual int spTitleMovtMgt(Nullable<System.DateTime> startdate, Nullable<System.DateTime> enddate, Nullable<byte> destinyCode)
        {
            var startdateParameter = startdate.HasValue ?
                new ObjectParameter("startdate", startdate) :
                new ObjectParameter("startdate", typeof(System.DateTime));
    
            var enddateParameter = enddate.HasValue ?
                new ObjectParameter("enddate", enddate) :
                new ObjectParameter("enddate", typeof(System.DateTime));
    
            var destinyCodeParameter = destinyCode.HasValue ?
                new ObjectParameter("DestinyCode", destinyCode) :
                new ObjectParameter("DestinyCode", typeof(byte));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spTitleMovtMgt", startdateParameter, enddateParameter, destinyCodeParameter);
        }
    
        public virtual int spTitleMovtMgt_old(Nullable<System.DateTime> startdate, Nullable<System.DateTime> enddate, Nullable<byte> destinyCode)
        {
            var startdateParameter = startdate.HasValue ?
                new ObjectParameter("startdate", startdate) :
                new ObjectParameter("startdate", typeof(System.DateTime));
    
            var enddateParameter = enddate.HasValue ?
                new ObjectParameter("enddate", enddate) :
                new ObjectParameter("enddate", typeof(System.DateTime));
    
            var destinyCodeParameter = destinyCode.HasValue ?
                new ObjectParameter("DestinyCode", destinyCode) :
                new ObjectParameter("DestinyCode", typeof(byte));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spTitleMovtMgt_old", startdateParameter, enddateParameter, destinyCodeParameter);
        }
    
        public virtual int spTitleMovtOwner(Nullable<byte> landCode, Nullable<System.DateTime> startdate, Nullable<System.DateTime> enddate)
        {
            var landCodeParameter = landCode.HasValue ?
                new ObjectParameter("LandCode", landCode) :
                new ObjectParameter("LandCode", typeof(byte));
    
            var startdateParameter = startdate.HasValue ?
                new ObjectParameter("startdate", startdate) :
                new ObjectParameter("startdate", typeof(System.DateTime));
    
            var enddateParameter = enddate.HasValue ?
                new ObjectParameter("enddate", enddate) :
                new ObjectParameter("enddate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spTitleMovtOwner", landCodeParameter, startdateParameter, enddateParameter);
        }
    
        public virtual int spTitleOwnership(Nullable<byte> landCode)
        {
            var landCodeParameter = landCode.HasValue ?
                new ObjectParameter("LandCode", landCode) :
                new ObjectParameter("LandCode", typeof(byte));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spTitleOwnership", landCodeParameter);
        }
    
        public virtual int spTitleType(Nullable<byte> typeCode)
        {
            var typeCodeParameter = typeCode.HasValue ?
                new ObjectParameter("TypeCode", typeCode) :
                new ObjectParameter("TypeCode", typeof(byte));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spTitleType", typeCodeParameter);
        }
    
        public virtual int spUser_Menu_OptionDelete(string userName, string menuItem_Type, string menuItem_Key)
        {
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var menuItem_TypeParameter = menuItem_Type != null ?
                new ObjectParameter("MenuItem_Type", menuItem_Type) :
                new ObjectParameter("MenuItem_Type", typeof(string));
    
            var menuItem_KeyParameter = menuItem_Key != null ?
                new ObjectParameter("MenuItem_Key", menuItem_Key) :
                new ObjectParameter("MenuItem_Key", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spUser_Menu_OptionDelete", userNameParameter, menuItem_TypeParameter, menuItem_KeyParameter);
        }
    
        public virtual ObjectResult<spUser_Menu_OptionGetAll_Result> spUser_Menu_OptionGetAll(string userName, string menuItem_Type, string menuItem_Key, Nullable<bool> menuItem_Enabled, Nullable<bool> menuItem_Visible)
        {
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var menuItem_TypeParameter = menuItem_Type != null ?
                new ObjectParameter("MenuItem_Type", menuItem_Type) :
                new ObjectParameter("MenuItem_Type", typeof(string));
    
            var menuItem_KeyParameter = menuItem_Key != null ?
                new ObjectParameter("MenuItem_Key", menuItem_Key) :
                new ObjectParameter("MenuItem_Key", typeof(string));
    
            var menuItem_EnabledParameter = menuItem_Enabled.HasValue ?
                new ObjectParameter("MenuItem_Enabled", menuItem_Enabled) :
                new ObjectParameter("MenuItem_Enabled", typeof(bool));
    
            var menuItem_VisibleParameter = menuItem_Visible.HasValue ?
                new ObjectParameter("MenuItem_Visible", menuItem_Visible) :
                new ObjectParameter("MenuItem_Visible", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spUser_Menu_OptionGetAll_Result>("spUser_Menu_OptionGetAll", userNameParameter, menuItem_TypeParameter, menuItem_KeyParameter, menuItem_EnabledParameter, menuItem_VisibleParameter);
        }
    
        public virtual int spUser_Menu_OptionGetByKey(string userName, string menuItem_Type, string menuItem_Key, ObjectParameter menuItem_Enabled, ObjectParameter menuItem_Visible)
        {
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var menuItem_TypeParameter = menuItem_Type != null ?
                new ObjectParameter("MenuItem_Type", menuItem_Type) :
                new ObjectParameter("MenuItem_Type", typeof(string));
    
            var menuItem_KeyParameter = menuItem_Key != null ?
                new ObjectParameter("MenuItem_Key", menuItem_Key) :
                new ObjectParameter("MenuItem_Key", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spUser_Menu_OptionGetByKey", userNameParameter, menuItem_TypeParameter, menuItem_KeyParameter, menuItem_Enabled, menuItem_Visible);
        }
    
        public virtual int spUser_Menu_OptionInsert(string userName, string menuItem_Type, string menuItem_Key, Nullable<bool> menuItem_Enabled, Nullable<bool> menuItem_Visible)
        {
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var menuItem_TypeParameter = menuItem_Type != null ?
                new ObjectParameter("MenuItem_Type", menuItem_Type) :
                new ObjectParameter("MenuItem_Type", typeof(string));
    
            var menuItem_KeyParameter = menuItem_Key != null ?
                new ObjectParameter("MenuItem_Key", menuItem_Key) :
                new ObjectParameter("MenuItem_Key", typeof(string));
    
            var menuItem_EnabledParameter = menuItem_Enabled.HasValue ?
                new ObjectParameter("MenuItem_Enabled", menuItem_Enabled) :
                new ObjectParameter("MenuItem_Enabled", typeof(bool));
    
            var menuItem_VisibleParameter = menuItem_Visible.HasValue ?
                new ObjectParameter("MenuItem_Visible", menuItem_Visible) :
                new ObjectParameter("MenuItem_Visible", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spUser_Menu_OptionInsert", userNameParameter, menuItem_TypeParameter, menuItem_KeyParameter, menuItem_EnabledParameter, menuItem_VisibleParameter);
        }
    
        public virtual int spUser_Menu_OptionUpdate(string userName, string menuItem_Type, string menuItem_Key, Nullable<bool> menuItem_Enabled, Nullable<bool> menuItem_Visible)
        {
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var menuItem_TypeParameter = menuItem_Type != null ?
                new ObjectParameter("MenuItem_Type", menuItem_Type) :
                new ObjectParameter("MenuItem_Type", typeof(string));
    
            var menuItem_KeyParameter = menuItem_Key != null ?
                new ObjectParameter("MenuItem_Key", menuItem_Key) :
                new ObjectParameter("MenuItem_Key", typeof(string));
    
            var menuItem_EnabledParameter = menuItem_Enabled.HasValue ?
                new ObjectParameter("MenuItem_Enabled", menuItem_Enabled) :
                new ObjectParameter("MenuItem_Enabled", typeof(bool));
    
            var menuItem_VisibleParameter = menuItem_Visible.HasValue ?
                new ObjectParameter("MenuItem_Visible", menuItem_Visible) :
                new ObjectParameter("MenuItem_Visible", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spUser_Menu_OptionUpdate", userNameParameter, menuItem_TypeParameter, menuItem_KeyParameter, menuItem_EnabledParameter, menuItem_VisibleParameter);
        }
    
        public virtual int spUser_NHCCDelete(string userName)
        {
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spUser_NHCCDelete", userNameParameter);
        }
    
        public virtual ObjectResult<spUser_NHCCGetAll_Result> spUser_NHCCGetAll(string userName)
        {
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spUser_NHCCGetAll_Result>("spUser_NHCCGetAll", userNameParameter);
        }
    
        public virtual int spUser_NHCCGetByKey(string userName, ObjectParameter password, ObjectParameter accountStatus_ID, ObjectParameter email, ObjectParameter fullName)
        {
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spUser_NHCCGetByKey", userNameParameter, password, accountStatus_ID, email, fullName);
        }
    
        public virtual int spUser_NHCCInsert(string userName, string password, Nullable<int> accountStatus_ID, string email, string fullName)
        {
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            var accountStatus_IDParameter = accountStatus_ID.HasValue ?
                new ObjectParameter("AccountStatus_ID", accountStatus_ID) :
                new ObjectParameter("AccountStatus_ID", typeof(int));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var fullNameParameter = fullName != null ?
                new ObjectParameter("FullName", fullName) :
                new ObjectParameter("FullName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spUser_NHCCInsert", userNameParameter, passwordParameter, accountStatus_IDParameter, emailParameter, fullNameParameter);
        }
    
        public virtual int spUser_NHCCUpdate(string userName, string password, Nullable<int> accountStatus_ID, string email, string fullName)
        {
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            var accountStatus_IDParameter = accountStatus_ID.HasValue ?
                new ObjectParameter("AccountStatus_ID", accountStatus_ID) :
                new ObjectParameter("AccountStatus_ID", typeof(int));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var fullNameParameter = fullName != null ?
                new ObjectParameter("FullName", fullName) :
                new ObjectParameter("FullName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spUser_NHCCUpdate", userNameParameter, passwordParameter, accountStatus_IDParameter, emailParameter, fullNameParameter);
        }
    
        public virtual int spUsers_AccountStatusDelete(Nullable<int> accountStatus_ID)
        {
            var accountStatus_IDParameter = accountStatus_ID.HasValue ?
                new ObjectParameter("AccountStatus_ID", accountStatus_ID) :
                new ObjectParameter("AccountStatus_ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spUsers_AccountStatusDelete", accountStatus_IDParameter);
        }
    
        public virtual ObjectResult<spUsers_AccountStatusGetAll_Result> spUsers_AccountStatusGetAll(Nullable<int> accountStatus_ID, string accountStatus)
        {
            var accountStatus_IDParameter = accountStatus_ID.HasValue ?
                new ObjectParameter("AccountStatus_ID", accountStatus_ID) :
                new ObjectParameter("AccountStatus_ID", typeof(int));
    
            var accountStatusParameter = accountStatus != null ?
                new ObjectParameter("AccountStatus", accountStatus) :
                new ObjectParameter("AccountStatus", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spUsers_AccountStatusGetAll_Result>("spUsers_AccountStatusGetAll", accountStatus_IDParameter, accountStatusParameter);
        }
    
        public virtual int spUsers_AccountStatusGetByKey(Nullable<int> accountStatus_ID, ObjectParameter accountStatus)
        {
            var accountStatus_IDParameter = accountStatus_ID.HasValue ?
                new ObjectParameter("AccountStatus_ID", accountStatus_ID) :
                new ObjectParameter("AccountStatus_ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spUsers_AccountStatusGetByKey", accountStatus_IDParameter, accountStatus);
        }
    
        public virtual int spUsers_AccountStatusInsert(Nullable<int> accountStatus_ID, string accountStatus)
        {
            var accountStatus_IDParameter = accountStatus_ID.HasValue ?
                new ObjectParameter("AccountStatus_ID", accountStatus_ID) :
                new ObjectParameter("AccountStatus_ID", typeof(int));
    
            var accountStatusParameter = accountStatus != null ?
                new ObjectParameter("AccountStatus", accountStatus) :
                new ObjectParameter("AccountStatus", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spUsers_AccountStatusInsert", accountStatus_IDParameter, accountStatusParameter);
        }
    
        public virtual int spUsers_AccountStatusUpdate(Nullable<int> accountStatus_ID, string accountStatus)
        {
            var accountStatus_IDParameter = accountStatus_ID.HasValue ?
                new ObjectParameter("AccountStatus_ID", accountStatus_ID) :
                new ObjectParameter("AccountStatus_ID", typeof(int));
    
            var accountStatusParameter = accountStatus != null ?
                new ObjectParameter("AccountStatus", accountStatus) :
                new ObjectParameter("AccountStatus", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spUsers_AccountStatusUpdate", accountStatus_IDParameter, accountStatusParameter);
        }
    
        public virtual int spUsers_UserRolesDelete(string userName, Nullable<byte> userRole)
        {
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var userRoleParameter = userRole.HasValue ?
                new ObjectParameter("UserRole", userRole) :
                new ObjectParameter("UserRole", typeof(byte));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spUsers_UserRolesDelete", userNameParameter, userRoleParameter);
        }
    
        public virtual ObjectResult<spUsers_UserRolesGetAll_Result> spUsers_UserRolesGetAll(string userName, Nullable<byte> userRole)
        {
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var userRoleParameter = userRole.HasValue ?
                new ObjectParameter("UserRole", userRole) :
                new ObjectParameter("UserRole", typeof(byte));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spUsers_UserRolesGetAll_Result>("spUsers_UserRolesGetAll", userNameParameter, userRoleParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> spUsers_UserRolesGetByKey(string userName, Nullable<byte> userRole)
        {
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var userRoleParameter = userRole.HasValue ?
                new ObjectParameter("UserRole", userRole) :
                new ObjectParameter("UserRole", typeof(byte));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("spUsers_UserRolesGetByKey", userNameParameter, userRoleParameter);
        }
    
        public virtual int spUsers_UserRolesInsert(string userName, Nullable<byte> userRole)
        {
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var userRoleParameter = userRole.HasValue ?
                new ObjectParameter("UserRole", userRole) :
                new ObjectParameter("UserRole", typeof(byte));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spUsers_UserRolesInsert", userNameParameter, userRoleParameter);
        }
    
        public virtual int spUsers_UserRolesUpdate(string userName, Nullable<byte> userRole)
        {
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var userRoleParameter = userRole.HasValue ?
                new ObjectParameter("UserRole", userRole) :
                new ObjectParameter("UserRole", typeof(byte));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spUsers_UserRolesUpdate", userNameParameter, userRoleParameter);
        }
    
        public virtual int spView_admin_DecisionType_summitGetAll(Nullable<int> decisionID)
        {
            var decisionIDParameter = decisionID.HasValue ?
                new ObjectParameter("DecisionID", decisionID) :
                new ObjectParameter("DecisionID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spView_admin_DecisionType_summitGetAll", decisionIDParameter);
        }
    
        public virtual int spView_Applications_DetailsGetAll(Nullable<System.DateTime> applicationDate01, Nullable<System.DateTime> applicationDate02, string client_ID)
        {
            var applicationDate01Parameter = applicationDate01.HasValue ?
                new ObjectParameter("ApplicationDate01", applicationDate01) :
                new ObjectParameter("ApplicationDate01", typeof(System.DateTime));
    
            var applicationDate02Parameter = applicationDate02.HasValue ?
                new ObjectParameter("ApplicationDate02", applicationDate02) :
                new ObjectParameter("ApplicationDate02", typeof(System.DateTime));
    
            var client_IDParameter = client_ID != null ?
                new ObjectParameter("Client_ID", client_ID) :
                new ObjectParameter("Client_ID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spView_Applications_DetailsGetAll", applicationDate01Parameter, applicationDate02Parameter, client_IDParameter);
        }
    
        public virtual int spView_Clients_ApplicationsGetAll(string referenceNumber, string clientName, string client_ID, string notes)
        {
            var referenceNumberParameter = referenceNumber != null ?
                new ObjectParameter("ReferenceNumber", referenceNumber) :
                new ObjectParameter("ReferenceNumber", typeof(string));
    
            var clientNameParameter = clientName != null ?
                new ObjectParameter("ClientName", clientName) :
                new ObjectParameter("ClientName", typeof(string));
    
            var client_IDParameter = client_ID != null ?
                new ObjectParameter("Client_ID", client_ID) :
                new ObjectParameter("Client_ID", typeof(string));
    
            var notesParameter = notes != null ?
                new ObjectParameter("Notes", notes) :
                new ObjectParameter("Notes", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spView_Clients_ApplicationsGetAll", referenceNumberParameter, clientNameParameter, client_IDParameter, notesParameter);
        }
    
        public virtual int spView_PropertyApplicationsGetAll(Nullable<System.DateTime> applicationDate, Nullable<System.DateTime> offerDate)
        {
            var applicationDateParameter = applicationDate.HasValue ?
                new ObjectParameter("ApplicationDate", applicationDate) :
                new ObjectParameter("ApplicationDate", typeof(System.DateTime));
    
            var offerDateParameter = offerDate.HasValue ?
                new ObjectParameter("OfferDate", offerDate) :
                new ObjectParameter("OfferDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spView_PropertyApplicationsGetAll", applicationDateParameter, offerDateParameter);
        }
    
        public virtual int spView_SMCT_AcceptedOffersGetAll(Nullable<int> project_code, Nullable<System.DateTime> offerAcceptanceOrRejectionDate01, Nullable<System.DateTime> offerAcceptanceOrRejectionDate02)
        {
            var project_codeParameter = project_code.HasValue ?
                new ObjectParameter("Project_code", project_code) :
                new ObjectParameter("Project_code", typeof(int));
    
            var offerAcceptanceOrRejectionDate01Parameter = offerAcceptanceOrRejectionDate01.HasValue ?
                new ObjectParameter("OfferAcceptanceOrRejectionDate01", offerAcceptanceOrRejectionDate01) :
                new ObjectParameter("OfferAcceptanceOrRejectionDate01", typeof(System.DateTime));
    
            var offerAcceptanceOrRejectionDate02Parameter = offerAcceptanceOrRejectionDate02.HasValue ?
                new ObjectParameter("OfferAcceptanceOrRejectionDate02", offerAcceptanceOrRejectionDate02) :
                new ObjectParameter("OfferAcceptanceOrRejectionDate02", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spView_SMCT_AcceptedOffersGetAll", project_codeParameter, offerAcceptanceOrRejectionDate01Parameter, offerAcceptanceOrRejectionDate02Parameter);
        }
    
        public virtual int spView_SMCT_AcceptedRejectedOffersGetAll(Nullable<int> project_code, Nullable<System.DateTime> offerAcceptanceOrRejectionDate01, Nullable<System.DateTime> offerAcceptanceOrRejectionDate02)
        {
            var project_codeParameter = project_code.HasValue ?
                new ObjectParameter("Project_code", project_code) :
                new ObjectParameter("Project_code", typeof(int));
    
            var offerAcceptanceOrRejectionDate01Parameter = offerAcceptanceOrRejectionDate01.HasValue ?
                new ObjectParameter("OfferAcceptanceOrRejectionDate01", offerAcceptanceOrRejectionDate01) :
                new ObjectParameter("OfferAcceptanceOrRejectionDate01", typeof(System.DateTime));
    
            var offerAcceptanceOrRejectionDate02Parameter = offerAcceptanceOrRejectionDate02.HasValue ?
                new ObjectParameter("OfferAcceptanceOrRejectionDate02", offerAcceptanceOrRejectionDate02) :
                new ObjectParameter("OfferAcceptanceOrRejectionDate02", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spView_SMCT_AcceptedRejectedOffersGetAll", project_codeParameter, offerAcceptanceOrRejectionDate01Parameter, offerAcceptanceOrRejectionDate02Parameter);
        }
    
        public virtual int spView_SMCT_ApplicantsGetAll(Nullable<System.DateTime> applicationDate01, Nullable<System.DateTime> applicationDate02, Nullable<int> project_code)
        {
            var applicationDate01Parameter = applicationDate01.HasValue ?
                new ObjectParameter("ApplicationDate01", applicationDate01) :
                new ObjectParameter("ApplicationDate01", typeof(System.DateTime));
    
            var applicationDate02Parameter = applicationDate02.HasValue ?
                new ObjectParameter("ApplicationDate02", applicationDate02) :
                new ObjectParameter("ApplicationDate02", typeof(System.DateTime));
    
            var project_codeParameter = project_code.HasValue ?
                new ObjectParameter("Project_code", project_code) :
                new ObjectParameter("Project_code", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spView_SMCT_ApplicantsGetAll", applicationDate01Parameter, applicationDate02Parameter, project_codeParameter);
        }
    
        public virtual int spView_SMCT_ApplicantsPerPropertyGetAll(Nullable<System.DateTime> applicationDate01, Nullable<System.DateTime> applicationDate02, Nullable<int> project_code)
        {
            var applicationDate01Parameter = applicationDate01.HasValue ?
                new ObjectParameter("ApplicationDate01", applicationDate01) :
                new ObjectParameter("ApplicationDate01", typeof(System.DateTime));
    
            var applicationDate02Parameter = applicationDate02.HasValue ?
                new ObjectParameter("ApplicationDate02", applicationDate02) :
                new ObjectParameter("ApplicationDate02", typeof(System.DateTime));
    
            var project_codeParameter = project_code.HasValue ?
                new ObjectParameter("Project_code", project_code) :
                new ObjectParameter("Project_code", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spView_SMCT_ApplicantsPerPropertyGetAll", applicationDate01Parameter, applicationDate02Parameter, project_codeParameter);
        }
    
        public virtual int spView_SMCT_CommitmentFeeGetAll(Nullable<int> project_code, Nullable<bool> commitmentFeePaid, Nullable<System.DateTime> offerAcceptanceOrRejectionDate01, Nullable<System.DateTime> offerAcceptanceOrRejectionDate02)
        {
            var project_codeParameter = project_code.HasValue ?
                new ObjectParameter("Project_code", project_code) :
                new ObjectParameter("Project_code", typeof(int));
    
            var commitmentFeePaidParameter = commitmentFeePaid.HasValue ?
                new ObjectParameter("CommitmentFeePaid", commitmentFeePaid) :
                new ObjectParameter("CommitmentFeePaid", typeof(bool));
    
            var offerAcceptanceOrRejectionDate01Parameter = offerAcceptanceOrRejectionDate01.HasValue ?
                new ObjectParameter("OfferAcceptanceOrRejectionDate01", offerAcceptanceOrRejectionDate01) :
                new ObjectParameter("OfferAcceptanceOrRejectionDate01", typeof(System.DateTime));
    
            var offerAcceptanceOrRejectionDate02Parameter = offerAcceptanceOrRejectionDate02.HasValue ?
                new ObjectParameter("OfferAcceptanceOrRejectionDate02", offerAcceptanceOrRejectionDate02) :
                new ObjectParameter("OfferAcceptanceOrRejectionDate02", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spView_SMCT_CommitmentFeeGetAll", project_codeParameter, commitmentFeePaidParameter, offerAcceptanceOrRejectionDate01Parameter, offerAcceptanceOrRejectionDate02Parameter);
        }
    
        public virtual int spView_SMCT_DaysToExpiryGetAll(Nullable<int> project_code, Nullable<System.DateTime> offerDate01, Nullable<System.DateTime> offerDate02)
        {
            var project_codeParameter = project_code.HasValue ?
                new ObjectParameter("Project_code", project_code) :
                new ObjectParameter("Project_code", typeof(int));
    
            var offerDate01Parameter = offerDate01.HasValue ?
                new ObjectParameter("OfferDate01", offerDate01) :
                new ObjectParameter("OfferDate01", typeof(System.DateTime));
    
            var offerDate02Parameter = offerDate02.HasValue ?
                new ObjectParameter("OfferDate02", offerDate02) :
                new ObjectParameter("OfferDate02", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spView_SMCT_DaysToExpiryGetAll", project_codeParameter, offerDate01Parameter, offerDate02Parameter);
        }
    
        public virtual int spView_SMCT_ExpiredOffersGetAll(Nullable<int> project_code, Nullable<System.DateTime> offerExpiryDate01, Nullable<System.DateTime> offerExpiryDate02)
        {
            var project_codeParameter = project_code.HasValue ?
                new ObjectParameter("Project_code", project_code) :
                new ObjectParameter("Project_code", typeof(int));
    
            var offerExpiryDate01Parameter = offerExpiryDate01.HasValue ?
                new ObjectParameter("OfferExpiryDate01", offerExpiryDate01) :
                new ObjectParameter("OfferExpiryDate01", typeof(System.DateTime));
    
            var offerExpiryDate02Parameter = offerExpiryDate02.HasValue ?
                new ObjectParameter("OfferExpiryDate02", offerExpiryDate02) :
                new ObjectParameter("OfferExpiryDate02", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spView_SMCT_ExpiredOffersGetAll", project_codeParameter, offerExpiryDate01Parameter, offerExpiryDate02Parameter);
        }
    
        public virtual int spView_SMCT_ManageApplicantsGetAll(string alphabet_position, Nullable<bool> isRecordValid)
        {
            var alphabet_positionParameter = alphabet_position != null ?
                new ObjectParameter("alphabet_position", alphabet_position) :
                new ObjectParameter("alphabet_position", typeof(string));
    
            var isRecordValidParameter = isRecordValid.HasValue ?
                new ObjectParameter("IsRecordValid", isRecordValid) :
                new ObjectParameter("IsRecordValid", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spView_SMCT_ManageApplicantsGetAll", alphabet_positionParameter, isRecordValidParameter);
        }
    
        public virtual int spView_SMCT_ManageApplicantsInsert(string client_ID, string alphabet_position, string clientName, Nullable<int> nationality, string physicalAddress, string postalAddress, string emailAddress, string office_Tel, string home_Tel, string mobile_Tel, byte[] passportPhoto, string iD_Number, Nullable<int> iD_Type, string addedBy, string editedBy, Nullable<bool> isRecordValid)
        {
            var client_IDParameter = client_ID != null ?
                new ObjectParameter("Client_ID", client_ID) :
                new ObjectParameter("Client_ID", typeof(string));
    
            var alphabet_positionParameter = alphabet_position != null ?
                new ObjectParameter("alphabet_position", alphabet_position) :
                new ObjectParameter("alphabet_position", typeof(string));
    
            var clientNameParameter = clientName != null ?
                new ObjectParameter("ClientName", clientName) :
                new ObjectParameter("ClientName", typeof(string));
    
            var nationalityParameter = nationality.HasValue ?
                new ObjectParameter("Nationality", nationality) :
                new ObjectParameter("Nationality", typeof(int));
    
            var physicalAddressParameter = physicalAddress != null ?
                new ObjectParameter("PhysicalAddress", physicalAddress) :
                new ObjectParameter("PhysicalAddress", typeof(string));
    
            var postalAddressParameter = postalAddress != null ?
                new ObjectParameter("PostalAddress", postalAddress) :
                new ObjectParameter("PostalAddress", typeof(string));
    
            var emailAddressParameter = emailAddress != null ?
                new ObjectParameter("EmailAddress", emailAddress) :
                new ObjectParameter("EmailAddress", typeof(string));
    
            var office_TelParameter = office_Tel != null ?
                new ObjectParameter("Office_Tel", office_Tel) :
                new ObjectParameter("Office_Tel", typeof(string));
    
            var home_TelParameter = home_Tel != null ?
                new ObjectParameter("Home_Tel", home_Tel) :
                new ObjectParameter("Home_Tel", typeof(string));
    
            var mobile_TelParameter = mobile_Tel != null ?
                new ObjectParameter("Mobile_Tel", mobile_Tel) :
                new ObjectParameter("Mobile_Tel", typeof(string));
    
            var passportPhotoParameter = passportPhoto != null ?
                new ObjectParameter("PassportPhoto", passportPhoto) :
                new ObjectParameter("PassportPhoto", typeof(byte[]));
    
            var iD_NumberParameter = iD_Number != null ?
                new ObjectParameter("ID_Number", iD_Number) :
                new ObjectParameter("ID_Number", typeof(string));
    
            var iD_TypeParameter = iD_Type.HasValue ?
                new ObjectParameter("ID_Type", iD_Type) :
                new ObjectParameter("ID_Type", typeof(int));
    
            var addedByParameter = addedBy != null ?
                new ObjectParameter("AddedBy", addedBy) :
                new ObjectParameter("AddedBy", typeof(string));
    
            var editedByParameter = editedBy != null ?
                new ObjectParameter("EditedBy", editedBy) :
                new ObjectParameter("EditedBy", typeof(string));
    
            var isRecordValidParameter = isRecordValid.HasValue ?
                new ObjectParameter("IsRecordValid", isRecordValid) :
                new ObjectParameter("IsRecordValid", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spView_SMCT_ManageApplicantsInsert", client_IDParameter, alphabet_positionParameter, clientNameParameter, nationalityParameter, physicalAddressParameter, postalAddressParameter, emailAddressParameter, office_TelParameter, home_TelParameter, mobile_TelParameter, passportPhotoParameter, iD_NumberParameter, iD_TypeParameter, addedByParameter, editedByParameter, isRecordValidParameter);
        }
    
        public virtual int spView_SMCT_ManageApplicantsUpdate(string client_ID, string alphabet_position, string clientName, Nullable<int> nationality, string physicalAddress, string postalAddress, string emailAddress, string office_Tel, string home_Tel, string mobile_Tel, byte[] passportPhoto, string iD_Number, Nullable<int> iD_Type, string addedBy, string editedBy, Nullable<bool> isRecordValid)
        {
            var client_IDParameter = client_ID != null ?
                new ObjectParameter("Client_ID", client_ID) :
                new ObjectParameter("Client_ID", typeof(string));
    
            var alphabet_positionParameter = alphabet_position != null ?
                new ObjectParameter("alphabet_position", alphabet_position) :
                new ObjectParameter("alphabet_position", typeof(string));
    
            var clientNameParameter = clientName != null ?
                new ObjectParameter("ClientName", clientName) :
                new ObjectParameter("ClientName", typeof(string));
    
            var nationalityParameter = nationality.HasValue ?
                new ObjectParameter("Nationality", nationality) :
                new ObjectParameter("Nationality", typeof(int));
    
            var physicalAddressParameter = physicalAddress != null ?
                new ObjectParameter("PhysicalAddress", physicalAddress) :
                new ObjectParameter("PhysicalAddress", typeof(string));
    
            var postalAddressParameter = postalAddress != null ?
                new ObjectParameter("PostalAddress", postalAddress) :
                new ObjectParameter("PostalAddress", typeof(string));
    
            var emailAddressParameter = emailAddress != null ?
                new ObjectParameter("EmailAddress", emailAddress) :
                new ObjectParameter("EmailAddress", typeof(string));
    
            var office_TelParameter = office_Tel != null ?
                new ObjectParameter("Office_Tel", office_Tel) :
                new ObjectParameter("Office_Tel", typeof(string));
    
            var home_TelParameter = home_Tel != null ?
                new ObjectParameter("Home_Tel", home_Tel) :
                new ObjectParameter("Home_Tel", typeof(string));
    
            var mobile_TelParameter = mobile_Tel != null ?
                new ObjectParameter("Mobile_Tel", mobile_Tel) :
                new ObjectParameter("Mobile_Tel", typeof(string));
    
            var passportPhotoParameter = passportPhoto != null ?
                new ObjectParameter("PassportPhoto", passportPhoto) :
                new ObjectParameter("PassportPhoto", typeof(byte[]));
    
            var iD_NumberParameter = iD_Number != null ?
                new ObjectParameter("ID_Number", iD_Number) :
                new ObjectParameter("ID_Number", typeof(string));
    
            var iD_TypeParameter = iD_Type.HasValue ?
                new ObjectParameter("ID_Type", iD_Type) :
                new ObjectParameter("ID_Type", typeof(int));
    
            var addedByParameter = addedBy != null ?
                new ObjectParameter("AddedBy", addedBy) :
                new ObjectParameter("AddedBy", typeof(string));
    
            var editedByParameter = editedBy != null ?
                new ObjectParameter("EditedBy", editedBy) :
                new ObjectParameter("EditedBy", typeof(string));
    
            var isRecordValidParameter = isRecordValid.HasValue ?
                new ObjectParameter("IsRecordValid", isRecordValid) :
                new ObjectParameter("IsRecordValid", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spView_SMCT_ManageApplicantsUpdate", client_IDParameter, alphabet_positionParameter, clientNameParameter, nationalityParameter, physicalAddressParameter, postalAddressParameter, emailAddressParameter, office_TelParameter, home_TelParameter, mobile_TelParameter, passportPhotoParameter, iD_NumberParameter, iD_TypeParameter, addedByParameter, editedByParameter, isRecordValidParameter);
        }
    
        public virtual int spView_SMCT_TitleTransferedGetAll(Nullable<int> project_code, Nullable<bool> titleTransferred, Nullable<System.DateTime> dateOfTitleTransfer01, Nullable<System.DateTime> dateOfTitleTransfer02)
        {
            var project_codeParameter = project_code.HasValue ?
                new ObjectParameter("Project_code", project_code) :
                new ObjectParameter("Project_code", typeof(int));
    
            var titleTransferredParameter = titleTransferred.HasValue ?
                new ObjectParameter("TitleTransferred", titleTransferred) :
                new ObjectParameter("TitleTransferred", typeof(bool));
    
            var dateOfTitleTransfer01Parameter = dateOfTitleTransfer01.HasValue ?
                new ObjectParameter("DateOfTitleTransfer01", dateOfTitleTransfer01) :
                new ObjectParameter("DateOfTitleTransfer01", typeof(System.DateTime));
    
            var dateOfTitleTransfer02Parameter = dateOfTitleTransfer02.HasValue ?
                new ObjectParameter("DateOfTitleTransfer02", dateOfTitleTransfer02) :
                new ObjectParameter("DateOfTitleTransfer02", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spView_SMCT_TitleTransferedGetAll", project_codeParameter, titleTransferredParameter, dateOfTitleTransfer01Parameter, dateOfTitleTransfer02Parameter);
        }
    
        public virtual int spView_SMCT_WithdrawnOffersGetAll(Nullable<int> project_code, Nullable<System.DateTime> dateOfOfferWithdrawal01, Nullable<System.DateTime> dateOfOfferWithdrawal02)
        {
            var project_codeParameter = project_code.HasValue ?
                new ObjectParameter("Project_code", project_code) :
                new ObjectParameter("Project_code", typeof(int));
    
            var dateOfOfferWithdrawal01Parameter = dateOfOfferWithdrawal01.HasValue ?
                new ObjectParameter("DateOfOfferWithdrawal01", dateOfOfferWithdrawal01) :
                new ObjectParameter("DateOfOfferWithdrawal01", typeof(System.DateTime));
    
            var dateOfOfferWithdrawal02Parameter = dateOfOfferWithdrawal02.HasValue ?
                new ObjectParameter("DateOfOfferWithdrawal02", dateOfOfferWithdrawal02) :
                new ObjectParameter("DateOfOfferWithdrawal02", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spView_SMCT_WithdrawnOffersGetAll", project_codeParameter, dateOfOfferWithdrawal01Parameter, dateOfOfferWithdrawal02Parameter);
        }
    
        public virtual ObjectResult<spView_UsersGetAll_Result> spView_UsersGetAll(string userName)
        {
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spView_UsersGetAll_Result>("spView_UsersGetAll", userNameParameter);
        }
    
        public virtual int spvwLeaseExpiryGetAll(string title_Reference, string plot_No, Nullable<System.DateTime> lease_Start_Date, Nullable<System.DateTime> lease_End_Date, string purchaserEmployer, Nullable<int> monthsToExpiry, Nullable<int> yearsToExpiry)
        {
            var title_ReferenceParameter = title_Reference != null ?
                new ObjectParameter("Title_Reference", title_Reference) :
                new ObjectParameter("Title_Reference", typeof(string));
    
            var plot_NoParameter = plot_No != null ?
                new ObjectParameter("Plot_No", plot_No) :
                new ObjectParameter("Plot_No", typeof(string));
    
            var lease_Start_DateParameter = lease_Start_Date.HasValue ?
                new ObjectParameter("Lease_Start_Date", lease_Start_Date) :
                new ObjectParameter("Lease_Start_Date", typeof(System.DateTime));
    
            var lease_End_DateParameter = lease_End_Date.HasValue ?
                new ObjectParameter("Lease_End_Date", lease_End_Date) :
                new ObjectParameter("Lease_End_Date", typeof(System.DateTime));
    
            var purchaserEmployerParameter = purchaserEmployer != null ?
                new ObjectParameter("PurchaserEmployer", purchaserEmployer) :
                new ObjectParameter("PurchaserEmployer", typeof(string));
    
            var monthsToExpiryParameter = monthsToExpiry.HasValue ?
                new ObjectParameter("MonthsToExpiry", monthsToExpiry) :
                new ObjectParameter("MonthsToExpiry", typeof(int));
    
            var yearsToExpiryParameter = yearsToExpiry.HasValue ?
                new ObjectParameter("YearsToExpiry", yearsToExpiry) :
                new ObjectParameter("YearsToExpiry", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spvwLeaseExpiryGetAll", title_ReferenceParameter, plot_NoParameter, lease_Start_DateParameter, lease_End_DateParameter, purchaserEmployerParameter, monthsToExpiryParameter, yearsToExpiryParameter);
        }
    }
}
