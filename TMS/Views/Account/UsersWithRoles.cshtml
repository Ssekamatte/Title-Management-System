@*@{
        ViewBag.Title = "Users With Roles";
    }*@


@model IEnumerable<TMS.Models.Users_in_Role_ViewModel>
@{
    ViewBag.Title = "Users With Roles";
    Layout = "~/Views/Shared/_Layout.cshtml";
}


<br />
<div class="row">
    <div class="col-lg-12">
        <ol class="breadcrumb">
            <li class="lead">
                <strong>Users with Roles</strong>
            </li>
        </ol>
    </div>
</div>


@*<div class="panel panel-success">
    <div class="panel-heading">
        <h3 class="box-title">
            <b>Users with Roles</b>
        </h3>
    </div>}*@

<div class="panel-body">

    @(Html.EJ().Grid<object>("FlatGrid").AllowResizeToFit().AllowMultipleExporting().AllowScrolling().AllowKeyboardNavigation()
                            .Datasource((IEnumerable<object>)ViewBag.UsersWithRoles)
                            .EnableAltRow()
                     .EditSettings(edit => { edit.AllowAdding().AllowDeleting().AllowEditing().EditMode(EditMode.DialogTemplate).DialogEditorTemplateID("#template"); })
                     .IsResponsive(true)
                    //.EditSettings(edit => { edit.AllowAdding().AllowDeleting().AllowEditing().EditMode(EditMode.Dialog); })
                    .AllowFiltering().FilterSettings(filter => { filter.FilterType(FilterType.Excel); })
    .AllowPaging()
            .ToolbarSettings(toolbar =>
            {
                toolbar.ShowToolbar().ToolbarItems(items =>
                {
                    //items.AddTool(ToolBarItems.Add);
                    //items.AddTool(ToolBarItems.Edit);
                    //items.AddTool(ToolBarItems.Delete);
                    //items.AddTool(ToolBarItems.Update);
                    //items.AddTool(ToolBarItems.Cancel);
                    items.AddTool(ToolBarItems.Search);
                    //items.AddTool(ToolBarItems.ExcelExport);
                    //items.AddTool(ToolBarItems.WordExport);
                    //items.AddTool(ToolBarItems.PdfExport);
                });
            })

        .Columns(col =>
        {


            col.Field("UserId").HeaderText("id").IsPrimaryKey(true).Visible(false).TextAlign(TextAlign.Justify).Width(100).Add();
            col.Field("Username").HeaderText("User Name").IsPrimaryKey(false).Visible(true).TextAlign(TextAlign.Justify).Width(100).Add();
            col.Field("Email").HeaderText("Email").IsPrimaryKey(false).Visible(true).TextAlign(TextAlign.Justify).Width(100).Add();
            col.Field("Role").HeaderText("Role").IsPrimaryKey(false).Visible(true).TextAlign(TextAlign.Justify).Width(200).Add();
           // col.Field("NameOfUserAccountHolder").AllowEditing(false).Visible(true).HeaderText("Full Name").Add();

            //col.Field("Department_ID").HeaderText("Department").IsPrimaryKey(false).Visible(true).TextAlign(TextAlign.Justify).ForeignKeyField("Department_ID").ForeignKeyValue("Department").DataSource((IEnumerable<object>)ViewBag.Department).Width(200).Add();
        })
        .ClientSideEvents(eve => { eve.ActionComplete("complete"); })
    )


</div>
<div class="panel-footer">
    <p class="box-title"><b>Total Users till @String.Format("{0 : dddd, MMMM d, yyyy}", DateTime.Now)  : </b><span class="label label-primary">@Model.Count()</span></p>
</div>
</div>

<script type="text/template" id="template">
    <b>User Role Details</b>
    @Html.AntiForgeryToken()
    <table cellspacing="10">
        <tr>
            @*<td style="text-align: right;">id</td>
                    <td style="text-align: left"> <input type="text" id="id" name="id" value="{{:id}}" class="e-field e-ejinputtext valid e-disable" /> </td>
                <td style="text-align: right;">Email</td>*@
            <td style="text-align: right;">Email</td>
            <td style="text-align: left"> <input type="text" id="Email" name="Email" value="{{:Email}}" class="e-field e-ejinputtext valid" /> </td>
            <td style="text-align: right;">UserName</td>
            <td style="text-align: left"> <input type="text" id="UserName" name="UserName" value="{{:Username}}" class="e-field e-ejinputtext valid" /> </td>

        </tr>
        <tr>
            <td style="text-align: right;">Role</td>
            <td style="text-align: left"> <input type="text" id="Role" name="Role" value="{{:Role}}" class="e-field e-ejinputtext valid" /> </td>
            @*<td style="text-align: right;">Department</td>
                <td style="text-align: left"> <input type="text" id="Department_ID" name="Department_ID" value="{{:Department_ID}}" class="e-field e-ejinputtext valid" /> </td>*@
        </tr>
    </table>

</script>


<script type="text/javascript">

    var userroles = @Html.Raw(Json.Encode(ViewBag.userRoles));
    var Department = @Html.Raw(Json.Encode(ViewBag.Department));
    console.log(JSON.stringify(userroles));
    function complete(args) {
        if ((args.requestType == "beginedit" || args.requestType == "add") && args.model.editSettings.editMode == "dialogtemplate") {

            $("#EditDialog_FlatGrid_Save").ejButton("destroy");
            $($("#EditDialog_FlatGrid_Save").hide()).after('<button id="save" type="button" onclick="savess();" class="btn btn-success btn-sm" > <span class="glyphicon glyphicon-save"></span> Save</button>');
            $("#save").css({ "width": "100px", "height": "50px", "font-size": "17px", "margin-left": "190px" });
            $("#EditDialog_FlatGrid_Cancel").ejButton("destroy");
            $($("#EditDialog_FlatGrid_Cancel").hide()).after(' <button type="button" id="cancel" onclick="cancelss()" class="btn btn-danger btn-sm" ><span class="glyphicon glyphicon-remove-circle"></span> Cancel</button>');
            $("#cancel").css({ "width": "100px", "height": "50px", "margin-left": "10px" })

            var DropDownListDist = $('#Role').ejDropDownList({
                dataSource: userroles,
                width: "150px",
                change: "setRole",
                fields: { value: "Name", text: "Name" },
            }).data("ejDropDownList");


            //var DropDownList = $('#Department_ID').ejDropDownList({
            //    dataSource: Department,
            //    width: "150px",
            //    change: "setDepartment",
            //    fields: { value: "Department_ID", text: "Department" },
            //}).data("ejDropDownList");
        }

        if (args.requestType == "beginedit")
        {
            $('#Email').attr("disabled",true)
            //$("#Username").prop("readonly", true);
            $("#Username").prop("disabled", true);
            var ogrid = $('#FlatGrid').ejGrid('instance');
            var userid = ogrid.getSelectedRecords()[0].UserId;
            var password = ogrid.getSelectedRecords()[0].PasswordHash;
            //alert(password);
            setUserId(userid);
           //setPassword(password)
            $('#' + this._id + '_dialogEdit').ejDialog("option", "title", "Set User Role"); //change dialog title
        }
    }
</script>

<script>
    function savess() {
        var obj = $("#FlatGrid").ejGrid("instance");
        var gridInstance = $("#Grid").ejGrid("instance");
        $.ajax({
            type: "POST",
            url: "AllocateRole?userid=" + window.UserId + '&userrole=' + window.userRole,  //TotalesBillsUpdate is Server side method
            //url: "/Account/AllocateRole?userid=" + window.UserId + '&userrole=' + window.userRole + '&district=' + window.district,  //TotalesBillsUpdate is Server side method


            //data: JSON.stringify({ 'order': changes.changed }),
            //contentType: 'application/json; charset=utf-8',
            //dataType: "json",
            success: function (LinkId) {
                //alert('');
                // alert(data);
                // if (LinkId > 0)
                {
                    // gridInstance.batchSave();
                    cancelss();
                }
            },
            error: function () {
                //alert('');
                // alert(data);
                // if (LinkId > 0)
                {
                    // gridInstance.batchSave();
                    cancelss();
                }
            },

        });
    }

    function cancelss() {
        var obj = $("#FlatGrid").ejGrid("instance")
        obj.cancelEdit();
    }
</script>

<script>
    window.UserId;
    function setUserId(arg) {
        window.UserId = arg;
    }

    window.userRole;
    function setRole(arg) {
        var obj = $('#Role').data("ejDropDownList");
        console.log("Selected Item's Text - " + obj.option("text"));
        console.log("selected Item's Value - " + obj.option("value"));
        window.userRole = obj.option("value");
    }
    //window.district;
    //function setDepartment(arg) {
    //    var obj = $('#Department_ID').data("ejDropDownList");
    //    console.log("Selected Item's Text - " + obj.option("text"));
    //    console.log("selected Item's Value - " + obj.option("value"));
    //    window.district = obj.option("value");
    //}


    window.Password;
    function setPassword(arg) {
        window.Password = arg;
        console.log(JSON.stringify(window.Password));

    }
</script>




@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}
